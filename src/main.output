Terminals unused in grammar

    BOOL


Grammar

    0 $accept: program $end

    1 program: statements

    2 statements: statement
    3           | statements statement

    4 statement: SEMICOLON
    5          | declaration SEMICOLON
    6          | function

    7 function: T IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE statements RBRACE
    8         | T IDENTIFIER LEFTBR RIGHTBR LBRACE statements RBRACE
    9         | T_VOID IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE statements RBRACE
   10         | T_VOID IDENTIFIER LEFTBR RIGHTBR LBRACE statements RBRACE

   11 PARMS: T IDENTIFIER
   12      | PARMS COMMA T IDENTIFIER

   13 declaration: T IDENTIFIER LOP_ASS expr
   14            | T IDENTIFIERS
   15            | expr

   16 IDENTIFIERS: IDENTIFIER
   17            | IDENTIFIERS COMMA IDENTIFIER

   18 expr: IDENTIFIER
   19     | INTEGER
   20     | CHAR
   21     | STRING
   22     | expr ADD expr
   23     | expr SUB expr
   24     | expr MUL expr
   25     | expr DIV expr
   26     | expr SUR expr
   27     | expr LSHIFT expr
   28     | expr RSHIFT expr
   29     | expr BIT_AND expr
   30     | expr BIT_OR expr
   31     | expr BIT_XOR expr
   32     | expr EQ expr
   33     | expr UEQ expr
   34     | expr LT expr
   35     | expr GT expr
   36     | expr LE expr
   37     | expr GE expr
   38     | expr LOG_AND expr
   39     | expr LOG_OR expr
   40     | expr LOP_ASS expr
   41     | expr ADD_ASS expr
   42     | expr SUB_ASS expr
   43     | expr MUL_ASS expr
   44     | expr DIV_ASS expr
   45     | expr SUR_ASS expr
   46     | expr LS_ASS expr
   47     | expr RS_ASS expr
   48     | expr OR_ASS expr
   49     | expr AND_ASS expr
   50     | expr XOR_ASS expr
   51     | SUB expr
   52     | ADD expr
   53     | LEFTBR expr RIGHTBR

   54 T: T_INT
   55  | T_CHAR
   56  | T_BOOL
   57  | T_STRING


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    T_CHAR (258) 55
    T_INT (259) 54
    T_STRING (260) 57
    T_BOOL (261) 56
    T_VOID (262) 9 10
    LOP_ASS (263) 13 40
    ADD_ASS (264) 41
    SUB_ASS (265) 42
    MUL_ASS (266) 43
    DIV_ASS (267) 44
    SUR_ASS (268) 45
    LS_ASS (269) 46
    RS_ASS (270) 47
    AND_ASS (271) 49
    OR_ASS (272) 48
    XOR_ASS (273) 50
    LOG_OR (274) 39
    LOG_AND (275) 38
    BIT_OR (276) 30
    BIT_XOR (277) 31
    BIT_AND (278) 29
    EQ (279) 32
    UEQ (280) 33
    GT (281) 35
    LT (282) 34
    GE (283) 37
    LE (284) 36
    LSHIFT (285) 27
    RSHIFT (286) 28
    ADD (287) 22 52
    SUB (288) 23 51
    MUL (289) 24
    DIV (290) 25
    SUR (291) 26
    LEFTBR (292) 7 8 9 10 53
    RIGHTBR (293) 7 8 9 10 53
    LBRACE (294) 7 8 9 10
    RBRACE (295) 7 8 9 10
    SEMICOLON (296) 4 5
    COMMA (297) 12 17
    IDENTIFIER (298) 7 8 9 10 11 12 13 16 17 18
    INTEGER (299) 19
    CHAR (300) 20
    BOOL (301)
    STRING (302) 21
    UMINUS (303)
    UADD (304)


Nonterminals, with rules where they appear

    $accept (50)
        on left: 0
    program (51)
        on left: 1
        on right: 0
    statements (52)
        on left: 2 3
        on right: 1 3 7 8 9 10
    statement (53)
        on left: 4 5 6
        on right: 2 3
    function (54)
        on left: 7 8 9 10
        on right: 6
    PARMS (55)
        on left: 11 12
        on right: 7 9 12
    declaration (56)
        on left: 13 14 15
        on right: 5
    IDENTIFIERS (57)
        on left: 16 17
        on right: 14 17
    expr (58)
        on left: 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53
        on right: 13 15 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53
    T (59)
        on left: 54 55 56 57
        on right: 7 8 11 12 13 14


State 0

    0 $accept: . program $end

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    SEMICOLON   shift, and go to state 9
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    program      go to state 14
    statements   go to state 15
    statement    go to state 16
    function     go to state 17
    declaration  go to state 18
    expr         go to state 19
    T            go to state 20


State 1

   55 T: T_CHAR .

    $default  reduce using rule 55 (T)


State 2

   54 T: T_INT .

    $default  reduce using rule 54 (T)


State 3

   57 T: T_STRING .

    $default  reduce using rule 57 (T)


State 4

   56 T: T_BOOL .

    $default  reduce using rule 56 (T)


State 5

    9 function: T_VOID . IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE statements RBRACE
   10         | T_VOID . IDENTIFIER LEFTBR RIGHTBR LBRACE statements RBRACE

    IDENTIFIER  shift, and go to state 21


State 6

   52 expr: ADD . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 22


State 7

   51 expr: SUB . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 23


State 8

   53 expr: LEFTBR . expr RIGHTBR

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 24


State 9

    4 statement: SEMICOLON .

    $default  reduce using rule 4 (statement)


State 10

   18 expr: IDENTIFIER .

    $default  reduce using rule 18 (expr)


State 11

   19 expr: INTEGER .

    $default  reduce using rule 19 (expr)


State 12

   20 expr: CHAR .

    $default  reduce using rule 20 (expr)


State 13

   21 expr: STRING .

    $default  reduce using rule 21 (expr)


State 14

    0 $accept: program . $end

    $end  shift, and go to state 25


State 15

    1 program: statements .
    3 statements: statements . statement

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    SEMICOLON   shift, and go to state 9
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    $default  reduce using rule 1 (program)

    statement    go to state 26
    function     go to state 17
    declaration  go to state 18
    expr         go to state 19
    T            go to state 20


State 16

    2 statements: statement .

    $default  reduce using rule 2 (statements)


State 17

    6 statement: function .

    $default  reduce using rule 6 (statement)


State 18

    5 statement: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 27


State 19

   15 declaration: expr .
   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    LOP_ASS  shift, and go to state 28
    ADD_ASS  shift, and go to state 29
    SUB_ASS  shift, and go to state 30
    MUL_ASS  shift, and go to state 31
    DIV_ASS  shift, and go to state 32
    SUR_ASS  shift, and go to state 33
    LS_ASS   shift, and go to state 34
    RS_ASS   shift, and go to state 35
    AND_ASS  shift, and go to state 36
    OR_ASS   shift, and go to state 37
    XOR_ASS  shift, and go to state 38
    LOG_OR   shift, and go to state 39
    LOG_AND  shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_XOR  shift, and go to state 42
    BIT_AND  shift, and go to state 43
    EQ       shift, and go to state 44
    UEQ      shift, and go to state 45
    GT       shift, and go to state 46
    LT       shift, and go to state 47
    GE       shift, and go to state 48
    LE       shift, and go to state 49
    LSHIFT   shift, and go to state 50
    RSHIFT   shift, and go to state 51
    ADD      shift, and go to state 52
    SUB      shift, and go to state 53
    MUL      shift, and go to state 54
    DIV      shift, and go to state 55
    SUR      shift, and go to state 56

    $default  reduce using rule 15 (declaration)


State 20

    7 function: T . IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE statements RBRACE
    8         | T . IDENTIFIER LEFTBR RIGHTBR LBRACE statements RBRACE
   13 declaration: T . IDENTIFIER LOP_ASS expr
   14            | T . IDENTIFIERS

    IDENTIFIER  shift, and go to state 57

    IDENTIFIERS  go to state 58


State 21

    9 function: T_VOID IDENTIFIER . LEFTBR PARMS RIGHTBR LBRACE statements RBRACE
   10         | T_VOID IDENTIFIER . LEFTBR RIGHTBR LBRACE statements RBRACE

    LEFTBR  shift, and go to state 59


State 22

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr
   52     | ADD expr .

    $default  reduce using rule 52 (expr)


State 23

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr
   51     | SUB expr .

    $default  reduce using rule 51 (expr)


State 24

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr
   53     | LEFTBR expr . RIGHTBR

    LOP_ASS  shift, and go to state 28
    ADD_ASS  shift, and go to state 29
    SUB_ASS  shift, and go to state 30
    MUL_ASS  shift, and go to state 31
    DIV_ASS  shift, and go to state 32
    SUR_ASS  shift, and go to state 33
    LS_ASS   shift, and go to state 34
    RS_ASS   shift, and go to state 35
    AND_ASS  shift, and go to state 36
    OR_ASS   shift, and go to state 37
    XOR_ASS  shift, and go to state 38
    LOG_OR   shift, and go to state 39
    LOG_AND  shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_XOR  shift, and go to state 42
    BIT_AND  shift, and go to state 43
    EQ       shift, and go to state 44
    UEQ      shift, and go to state 45
    GT       shift, and go to state 46
    LT       shift, and go to state 47
    GE       shift, and go to state 48
    LE       shift, and go to state 49
    LSHIFT   shift, and go to state 50
    RSHIFT   shift, and go to state 51
    ADD      shift, and go to state 52
    SUB      shift, and go to state 53
    MUL      shift, and go to state 54
    DIV      shift, and go to state 55
    SUR      shift, and go to state 56
    RIGHTBR  shift, and go to state 60


State 25

    0 $accept: program $end .

    $default  accept


State 26

    3 statements: statements statement .

    $default  reduce using rule 3 (statements)


State 27

    5 statement: declaration SEMICOLON .

    $default  reduce using rule 5 (statement)


State 28

   40 expr: expr LOP_ASS . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 61


State 29

   41 expr: expr ADD_ASS . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 62


State 30

   42 expr: expr SUB_ASS . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 63


State 31

   43 expr: expr MUL_ASS . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 64


State 32

   44 expr: expr DIV_ASS . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 65


State 33

   45 expr: expr SUR_ASS . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 66


State 34

   46 expr: expr LS_ASS . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 67


State 35

   47 expr: expr RS_ASS . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 68


State 36

   49 expr: expr AND_ASS . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 69


State 37

   48 expr: expr OR_ASS . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 70


State 38

   50 expr: expr XOR_ASS . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 71


State 39

   39 expr: expr LOG_OR . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 72


State 40

   38 expr: expr LOG_AND . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 73


State 41

   30 expr: expr BIT_OR . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 74


State 42

   31 expr: expr BIT_XOR . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 75


State 43

   29 expr: expr BIT_AND . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 76


State 44

   32 expr: expr EQ . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 77


State 45

   33 expr: expr UEQ . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 78


State 46

   35 expr: expr GT . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 79


State 47

   34 expr: expr LT . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 80


State 48

   37 expr: expr GE . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 81


State 49

   36 expr: expr LE . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 82


State 50

   27 expr: expr LSHIFT . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 83


State 51

   28 expr: expr RSHIFT . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 84


State 52

   22 expr: expr ADD . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 85


State 53

   23 expr: expr SUB . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 86


State 54

   24 expr: expr MUL . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 87


State 55

   25 expr: expr DIV . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 88


State 56

   26 expr: expr SUR . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 89


State 57

    7 function: T IDENTIFIER . LEFTBR PARMS RIGHTBR LBRACE statements RBRACE
    8         | T IDENTIFIER . LEFTBR RIGHTBR LBRACE statements RBRACE
   13 declaration: T IDENTIFIER . LOP_ASS expr
   16 IDENTIFIERS: IDENTIFIER .

    LOP_ASS  shift, and go to state 90
    LEFTBR   shift, and go to state 91

    $default  reduce using rule 16 (IDENTIFIERS)


State 58

   14 declaration: T IDENTIFIERS .
   17 IDENTIFIERS: IDENTIFIERS . COMMA IDENTIFIER

    COMMA  shift, and go to state 92

    $default  reduce using rule 14 (declaration)


State 59

    9 function: T_VOID IDENTIFIER LEFTBR . PARMS RIGHTBR LBRACE statements RBRACE
   10         | T_VOID IDENTIFIER LEFTBR . RIGHTBR LBRACE statements RBRACE

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    RIGHTBR   shift, and go to state 93

    PARMS  go to state 94
    T      go to state 95


State 60

   53 expr: LEFTBR expr RIGHTBR .

    $default  reduce using rule 53 (expr)


State 61

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   40     | expr LOP_ASS expr .
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    LOP_ASS  shift, and go to state 28
    ADD_ASS  shift, and go to state 29
    SUB_ASS  shift, and go to state 30
    MUL_ASS  shift, and go to state 31
    DIV_ASS  shift, and go to state 32
    SUR_ASS  shift, and go to state 33
    LS_ASS   shift, and go to state 34
    RS_ASS   shift, and go to state 35
    AND_ASS  shift, and go to state 36
    OR_ASS   shift, and go to state 37
    XOR_ASS  shift, and go to state 38
    LOG_OR   shift, and go to state 39
    LOG_AND  shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_XOR  shift, and go to state 42
    BIT_AND  shift, and go to state 43
    EQ       shift, and go to state 44
    UEQ      shift, and go to state 45
    GT       shift, and go to state 46
    LT       shift, and go to state 47
    GE       shift, and go to state 48
    LE       shift, and go to state 49
    LSHIFT   shift, and go to state 50
    RSHIFT   shift, and go to state 51
    ADD      shift, and go to state 52
    SUB      shift, and go to state 53
    MUL      shift, and go to state 54
    DIV      shift, and go to state 55
    SUR      shift, and go to state 56

    $default  reduce using rule 40 (expr)


State 62

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   41     | expr ADD_ASS expr .
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    LOP_ASS  shift, and go to state 28
    ADD_ASS  shift, and go to state 29
    SUB_ASS  shift, and go to state 30
    MUL_ASS  shift, and go to state 31
    DIV_ASS  shift, and go to state 32
    SUR_ASS  shift, and go to state 33
    LS_ASS   shift, and go to state 34
    RS_ASS   shift, and go to state 35
    AND_ASS  shift, and go to state 36
    OR_ASS   shift, and go to state 37
    XOR_ASS  shift, and go to state 38
    LOG_OR   shift, and go to state 39
    LOG_AND  shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_XOR  shift, and go to state 42
    BIT_AND  shift, and go to state 43
    EQ       shift, and go to state 44
    UEQ      shift, and go to state 45
    GT       shift, and go to state 46
    LT       shift, and go to state 47
    GE       shift, and go to state 48
    LE       shift, and go to state 49
    LSHIFT   shift, and go to state 50
    RSHIFT   shift, and go to state 51
    ADD      shift, and go to state 52
    SUB      shift, and go to state 53
    MUL      shift, and go to state 54
    DIV      shift, and go to state 55
    SUR      shift, and go to state 56

    $default  reduce using rule 41 (expr)


State 63

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   42     | expr SUB_ASS expr .
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    LOP_ASS  shift, and go to state 28
    ADD_ASS  shift, and go to state 29
    SUB_ASS  shift, and go to state 30
    MUL_ASS  shift, and go to state 31
    DIV_ASS  shift, and go to state 32
    SUR_ASS  shift, and go to state 33
    LS_ASS   shift, and go to state 34
    RS_ASS   shift, and go to state 35
    AND_ASS  shift, and go to state 36
    OR_ASS   shift, and go to state 37
    XOR_ASS  shift, and go to state 38
    LOG_OR   shift, and go to state 39
    LOG_AND  shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_XOR  shift, and go to state 42
    BIT_AND  shift, and go to state 43
    EQ       shift, and go to state 44
    UEQ      shift, and go to state 45
    GT       shift, and go to state 46
    LT       shift, and go to state 47
    GE       shift, and go to state 48
    LE       shift, and go to state 49
    LSHIFT   shift, and go to state 50
    RSHIFT   shift, and go to state 51
    ADD      shift, and go to state 52
    SUB      shift, and go to state 53
    MUL      shift, and go to state 54
    DIV      shift, and go to state 55
    SUR      shift, and go to state 56

    $default  reduce using rule 42 (expr)


State 64

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   43     | expr MUL_ASS expr .
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    LOP_ASS  shift, and go to state 28
    ADD_ASS  shift, and go to state 29
    SUB_ASS  shift, and go to state 30
    MUL_ASS  shift, and go to state 31
    DIV_ASS  shift, and go to state 32
    SUR_ASS  shift, and go to state 33
    LS_ASS   shift, and go to state 34
    RS_ASS   shift, and go to state 35
    AND_ASS  shift, and go to state 36
    OR_ASS   shift, and go to state 37
    XOR_ASS  shift, and go to state 38
    LOG_OR   shift, and go to state 39
    LOG_AND  shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_XOR  shift, and go to state 42
    BIT_AND  shift, and go to state 43
    EQ       shift, and go to state 44
    UEQ      shift, and go to state 45
    GT       shift, and go to state 46
    LT       shift, and go to state 47
    GE       shift, and go to state 48
    LE       shift, and go to state 49
    LSHIFT   shift, and go to state 50
    RSHIFT   shift, and go to state 51
    ADD      shift, and go to state 52
    SUB      shift, and go to state 53
    MUL      shift, and go to state 54
    DIV      shift, and go to state 55
    SUR      shift, and go to state 56

    $default  reduce using rule 43 (expr)


State 65

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   44     | expr DIV_ASS expr .
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    LOP_ASS  shift, and go to state 28
    ADD_ASS  shift, and go to state 29
    SUB_ASS  shift, and go to state 30
    MUL_ASS  shift, and go to state 31
    DIV_ASS  shift, and go to state 32
    SUR_ASS  shift, and go to state 33
    LS_ASS   shift, and go to state 34
    RS_ASS   shift, and go to state 35
    AND_ASS  shift, and go to state 36
    OR_ASS   shift, and go to state 37
    XOR_ASS  shift, and go to state 38
    LOG_OR   shift, and go to state 39
    LOG_AND  shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_XOR  shift, and go to state 42
    BIT_AND  shift, and go to state 43
    EQ       shift, and go to state 44
    UEQ      shift, and go to state 45
    GT       shift, and go to state 46
    LT       shift, and go to state 47
    GE       shift, and go to state 48
    LE       shift, and go to state 49
    LSHIFT   shift, and go to state 50
    RSHIFT   shift, and go to state 51
    ADD      shift, and go to state 52
    SUB      shift, and go to state 53
    MUL      shift, and go to state 54
    DIV      shift, and go to state 55
    SUR      shift, and go to state 56

    $default  reduce using rule 44 (expr)


State 66

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   45     | expr SUR_ASS expr .
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    LOP_ASS  shift, and go to state 28
    ADD_ASS  shift, and go to state 29
    SUB_ASS  shift, and go to state 30
    MUL_ASS  shift, and go to state 31
    DIV_ASS  shift, and go to state 32
    SUR_ASS  shift, and go to state 33
    LS_ASS   shift, and go to state 34
    RS_ASS   shift, and go to state 35
    AND_ASS  shift, and go to state 36
    OR_ASS   shift, and go to state 37
    XOR_ASS  shift, and go to state 38
    LOG_OR   shift, and go to state 39
    LOG_AND  shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_XOR  shift, and go to state 42
    BIT_AND  shift, and go to state 43
    EQ       shift, and go to state 44
    UEQ      shift, and go to state 45
    GT       shift, and go to state 46
    LT       shift, and go to state 47
    GE       shift, and go to state 48
    LE       shift, and go to state 49
    LSHIFT   shift, and go to state 50
    RSHIFT   shift, and go to state 51
    ADD      shift, and go to state 52
    SUB      shift, and go to state 53
    MUL      shift, and go to state 54
    DIV      shift, and go to state 55
    SUR      shift, and go to state 56

    $default  reduce using rule 45 (expr)


State 67

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   46     | expr LS_ASS expr .
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    LOP_ASS  shift, and go to state 28
    ADD_ASS  shift, and go to state 29
    SUB_ASS  shift, and go to state 30
    MUL_ASS  shift, and go to state 31
    DIV_ASS  shift, and go to state 32
    SUR_ASS  shift, and go to state 33
    LS_ASS   shift, and go to state 34
    RS_ASS   shift, and go to state 35
    AND_ASS  shift, and go to state 36
    OR_ASS   shift, and go to state 37
    XOR_ASS  shift, and go to state 38
    LOG_OR   shift, and go to state 39
    LOG_AND  shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_XOR  shift, and go to state 42
    BIT_AND  shift, and go to state 43
    EQ       shift, and go to state 44
    UEQ      shift, and go to state 45
    GT       shift, and go to state 46
    LT       shift, and go to state 47
    GE       shift, and go to state 48
    LE       shift, and go to state 49
    LSHIFT   shift, and go to state 50
    RSHIFT   shift, and go to state 51
    ADD      shift, and go to state 52
    SUB      shift, and go to state 53
    MUL      shift, and go to state 54
    DIV      shift, and go to state 55
    SUR      shift, and go to state 56

    $default  reduce using rule 46 (expr)


State 68

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   47     | expr RS_ASS expr .
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    LOP_ASS  shift, and go to state 28
    ADD_ASS  shift, and go to state 29
    SUB_ASS  shift, and go to state 30
    MUL_ASS  shift, and go to state 31
    DIV_ASS  shift, and go to state 32
    SUR_ASS  shift, and go to state 33
    LS_ASS   shift, and go to state 34
    RS_ASS   shift, and go to state 35
    AND_ASS  shift, and go to state 36
    OR_ASS   shift, and go to state 37
    XOR_ASS  shift, and go to state 38
    LOG_OR   shift, and go to state 39
    LOG_AND  shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_XOR  shift, and go to state 42
    BIT_AND  shift, and go to state 43
    EQ       shift, and go to state 44
    UEQ      shift, and go to state 45
    GT       shift, and go to state 46
    LT       shift, and go to state 47
    GE       shift, and go to state 48
    LE       shift, and go to state 49
    LSHIFT   shift, and go to state 50
    RSHIFT   shift, and go to state 51
    ADD      shift, and go to state 52
    SUB      shift, and go to state 53
    MUL      shift, and go to state 54
    DIV      shift, and go to state 55
    SUR      shift, and go to state 56

    $default  reduce using rule 47 (expr)


State 69

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   49     | expr AND_ASS expr .
   50     | expr . XOR_ASS expr

    LOP_ASS  shift, and go to state 28
    ADD_ASS  shift, and go to state 29
    SUB_ASS  shift, and go to state 30
    MUL_ASS  shift, and go to state 31
    DIV_ASS  shift, and go to state 32
    SUR_ASS  shift, and go to state 33
    LS_ASS   shift, and go to state 34
    RS_ASS   shift, and go to state 35
    AND_ASS  shift, and go to state 36
    OR_ASS   shift, and go to state 37
    XOR_ASS  shift, and go to state 38
    LOG_OR   shift, and go to state 39
    LOG_AND  shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_XOR  shift, and go to state 42
    BIT_AND  shift, and go to state 43
    EQ       shift, and go to state 44
    UEQ      shift, and go to state 45
    GT       shift, and go to state 46
    LT       shift, and go to state 47
    GE       shift, and go to state 48
    LE       shift, and go to state 49
    LSHIFT   shift, and go to state 50
    RSHIFT   shift, and go to state 51
    ADD      shift, and go to state 52
    SUB      shift, and go to state 53
    MUL      shift, and go to state 54
    DIV      shift, and go to state 55
    SUR      shift, and go to state 56

    $default  reduce using rule 49 (expr)


State 70

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   48     | expr OR_ASS expr .
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    LOP_ASS  shift, and go to state 28
    ADD_ASS  shift, and go to state 29
    SUB_ASS  shift, and go to state 30
    MUL_ASS  shift, and go to state 31
    DIV_ASS  shift, and go to state 32
    SUR_ASS  shift, and go to state 33
    LS_ASS   shift, and go to state 34
    RS_ASS   shift, and go to state 35
    AND_ASS  shift, and go to state 36
    OR_ASS   shift, and go to state 37
    XOR_ASS  shift, and go to state 38
    LOG_OR   shift, and go to state 39
    LOG_AND  shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_XOR  shift, and go to state 42
    BIT_AND  shift, and go to state 43
    EQ       shift, and go to state 44
    UEQ      shift, and go to state 45
    GT       shift, and go to state 46
    LT       shift, and go to state 47
    GE       shift, and go to state 48
    LE       shift, and go to state 49
    LSHIFT   shift, and go to state 50
    RSHIFT   shift, and go to state 51
    ADD      shift, and go to state 52
    SUB      shift, and go to state 53
    MUL      shift, and go to state 54
    DIV      shift, and go to state 55
    SUR      shift, and go to state 56

    $default  reduce using rule 48 (expr)


State 71

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr
   50     | expr XOR_ASS expr .

    LOP_ASS  shift, and go to state 28
    ADD_ASS  shift, and go to state 29
    SUB_ASS  shift, and go to state 30
    MUL_ASS  shift, and go to state 31
    DIV_ASS  shift, and go to state 32
    SUR_ASS  shift, and go to state 33
    LS_ASS   shift, and go to state 34
    RS_ASS   shift, and go to state 35
    AND_ASS  shift, and go to state 36
    OR_ASS   shift, and go to state 37
    XOR_ASS  shift, and go to state 38
    LOG_OR   shift, and go to state 39
    LOG_AND  shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_XOR  shift, and go to state 42
    BIT_AND  shift, and go to state 43
    EQ       shift, and go to state 44
    UEQ      shift, and go to state 45
    GT       shift, and go to state 46
    LT       shift, and go to state 47
    GE       shift, and go to state 48
    LE       shift, and go to state 49
    LSHIFT   shift, and go to state 50
    RSHIFT   shift, and go to state 51
    ADD      shift, and go to state 52
    SUB      shift, and go to state 53
    MUL      shift, and go to state 54
    DIV      shift, and go to state 55
    SUR      shift, and go to state 56

    $default  reduce using rule 50 (expr)


State 72

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   39     | expr LOG_OR expr .
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    LOG_AND  shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_XOR  shift, and go to state 42
    BIT_AND  shift, and go to state 43
    EQ       shift, and go to state 44
    UEQ      shift, and go to state 45
    GT       shift, and go to state 46
    LT       shift, and go to state 47
    GE       shift, and go to state 48
    LE       shift, and go to state 49
    LSHIFT   shift, and go to state 50
    RSHIFT   shift, and go to state 51
    ADD      shift, and go to state 52
    SUB      shift, and go to state 53
    MUL      shift, and go to state 54
    DIV      shift, and go to state 55
    SUR      shift, and go to state 56

    $default  reduce using rule 39 (expr)


State 73

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   38     | expr LOG_AND expr .
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    BIT_OR   shift, and go to state 41
    BIT_XOR  shift, and go to state 42
    BIT_AND  shift, and go to state 43
    EQ       shift, and go to state 44
    UEQ      shift, and go to state 45
    GT       shift, and go to state 46
    LT       shift, and go to state 47
    GE       shift, and go to state 48
    LE       shift, and go to state 49
    LSHIFT   shift, and go to state 50
    RSHIFT   shift, and go to state 51
    ADD      shift, and go to state 52
    SUB      shift, and go to state 53
    MUL      shift, and go to state 54
    DIV      shift, and go to state 55
    SUR      shift, and go to state 56

    $default  reduce using rule 38 (expr)


State 74

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   30     | expr BIT_OR expr .
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    BIT_XOR  shift, and go to state 42
    BIT_AND  shift, and go to state 43
    EQ       shift, and go to state 44
    UEQ      shift, and go to state 45
    GT       shift, and go to state 46
    LT       shift, and go to state 47
    GE       shift, and go to state 48
    LE       shift, and go to state 49
    LSHIFT   shift, and go to state 50
    RSHIFT   shift, and go to state 51
    ADD      shift, and go to state 52
    SUB      shift, and go to state 53
    MUL      shift, and go to state 54
    DIV      shift, and go to state 55
    SUR      shift, and go to state 56

    $default  reduce using rule 30 (expr)


State 75

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   31     | expr BIT_XOR expr .
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    BIT_AND  shift, and go to state 43
    EQ       shift, and go to state 44
    UEQ      shift, and go to state 45
    GT       shift, and go to state 46
    LT       shift, and go to state 47
    GE       shift, and go to state 48
    LE       shift, and go to state 49
    LSHIFT   shift, and go to state 50
    RSHIFT   shift, and go to state 51
    ADD      shift, and go to state 52
    SUB      shift, and go to state 53
    MUL      shift, and go to state 54
    DIV      shift, and go to state 55
    SUR      shift, and go to state 56

    $default  reduce using rule 31 (expr)


State 76

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   29     | expr BIT_AND expr .
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    EQ      shift, and go to state 44
    UEQ     shift, and go to state 45
    GT      shift, and go to state 46
    LT      shift, and go to state 47
    GE      shift, and go to state 48
    LE      shift, and go to state 49
    LSHIFT  shift, and go to state 50
    RSHIFT  shift, and go to state 51
    ADD     shift, and go to state 52
    SUB     shift, and go to state 53
    MUL     shift, and go to state 54
    DIV     shift, and go to state 55
    SUR     shift, and go to state 56

    $default  reduce using rule 29 (expr)


State 77

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   32     | expr EQ expr .
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    GT      shift, and go to state 46
    LT      shift, and go to state 47
    GE      shift, and go to state 48
    LE      shift, and go to state 49
    LSHIFT  shift, and go to state 50
    RSHIFT  shift, and go to state 51
    ADD     shift, and go to state 52
    SUB     shift, and go to state 53
    MUL     shift, and go to state 54
    DIV     shift, and go to state 55
    SUR     shift, and go to state 56

    $default  reduce using rule 32 (expr)


State 78

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   33     | expr UEQ expr .
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    GT      shift, and go to state 46
    LT      shift, and go to state 47
    GE      shift, and go to state 48
    LE      shift, and go to state 49
    LSHIFT  shift, and go to state 50
    RSHIFT  shift, and go to state 51
    ADD     shift, and go to state 52
    SUB     shift, and go to state 53
    MUL     shift, and go to state 54
    DIV     shift, and go to state 55
    SUR     shift, and go to state 56

    $default  reduce using rule 33 (expr)


State 79

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   35     | expr GT expr .
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    LSHIFT  shift, and go to state 50
    RSHIFT  shift, and go to state 51
    ADD     shift, and go to state 52
    SUB     shift, and go to state 53
    MUL     shift, and go to state 54
    DIV     shift, and go to state 55
    SUR     shift, and go to state 56

    $default  reduce using rule 35 (expr)


State 80

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   34     | expr LT expr .
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    LSHIFT  shift, and go to state 50
    RSHIFT  shift, and go to state 51
    ADD     shift, and go to state 52
    SUB     shift, and go to state 53
    MUL     shift, and go to state 54
    DIV     shift, and go to state 55
    SUR     shift, and go to state 56

    $default  reduce using rule 34 (expr)


State 81

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   37     | expr GE expr .
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    LSHIFT  shift, and go to state 50
    RSHIFT  shift, and go to state 51
    ADD     shift, and go to state 52
    SUB     shift, and go to state 53
    MUL     shift, and go to state 54
    DIV     shift, and go to state 55
    SUR     shift, and go to state 56

    $default  reduce using rule 37 (expr)


State 82

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   36     | expr LE expr .
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    LSHIFT  shift, and go to state 50
    RSHIFT  shift, and go to state 51
    ADD     shift, and go to state 52
    SUB     shift, and go to state 53
    MUL     shift, and go to state 54
    DIV     shift, and go to state 55
    SUR     shift, and go to state 56

    $default  reduce using rule 36 (expr)


State 83

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   27     | expr LSHIFT expr .
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    ADD  shift, and go to state 52
    SUB  shift, and go to state 53
    MUL  shift, and go to state 54
    DIV  shift, and go to state 55
    SUR  shift, and go to state 56

    $default  reduce using rule 27 (expr)


State 84

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   28     | expr RSHIFT expr .
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    ADD  shift, and go to state 52
    SUB  shift, and go to state 53
    MUL  shift, and go to state 54
    DIV  shift, and go to state 55
    SUR  shift, and go to state 56

    $default  reduce using rule 28 (expr)


State 85

   22 expr: expr . ADD expr
   22     | expr ADD expr .
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    MUL  shift, and go to state 54
    DIV  shift, and go to state 55
    SUR  shift, and go to state 56

    $default  reduce using rule 22 (expr)


State 86

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   23     | expr SUB expr .
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    MUL  shift, and go to state 54
    DIV  shift, and go to state 55
    SUR  shift, and go to state 56

    $default  reduce using rule 23 (expr)


State 87

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   24     | expr MUL expr .
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    $default  reduce using rule 24 (expr)


State 88

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   25     | expr DIV expr .
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    $default  reduce using rule 25 (expr)


State 89

   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   26     | expr SUR expr .
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    $default  reduce using rule 26 (expr)


State 90

   13 declaration: T IDENTIFIER LOP_ASS . expr

    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    expr  go to state 96


State 91

    7 function: T IDENTIFIER LEFTBR . PARMS RIGHTBR LBRACE statements RBRACE
    8         | T IDENTIFIER LEFTBR . RIGHTBR LBRACE statements RBRACE

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    RIGHTBR   shift, and go to state 97

    PARMS  go to state 98
    T      go to state 95


State 92

   17 IDENTIFIERS: IDENTIFIERS COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 99


State 93

   10 function: T_VOID IDENTIFIER LEFTBR RIGHTBR . LBRACE statements RBRACE

    LBRACE  shift, and go to state 100


State 94

    9 function: T_VOID IDENTIFIER LEFTBR PARMS . RIGHTBR LBRACE statements RBRACE
   12 PARMS: PARMS . COMMA T IDENTIFIER

    RIGHTBR  shift, and go to state 101
    COMMA    shift, and go to state 102


State 95

   11 PARMS: T . IDENTIFIER

    IDENTIFIER  shift, and go to state 103


State 96

   13 declaration: T IDENTIFIER LOP_ASS expr .
   22 expr: expr . ADD expr
   23     | expr . SUB expr
   24     | expr . MUL expr
   25     | expr . DIV expr
   26     | expr . SUR expr
   27     | expr . LSHIFT expr
   28     | expr . RSHIFT expr
   29     | expr . BIT_AND expr
   30     | expr . BIT_OR expr
   31     | expr . BIT_XOR expr
   32     | expr . EQ expr
   33     | expr . UEQ expr
   34     | expr . LT expr
   35     | expr . GT expr
   36     | expr . LE expr
   37     | expr . GE expr
   38     | expr . LOG_AND expr
   39     | expr . LOG_OR expr
   40     | expr . LOP_ASS expr
   41     | expr . ADD_ASS expr
   42     | expr . SUB_ASS expr
   43     | expr . MUL_ASS expr
   44     | expr . DIV_ASS expr
   45     | expr . SUR_ASS expr
   46     | expr . LS_ASS expr
   47     | expr . RS_ASS expr
   48     | expr . OR_ASS expr
   49     | expr . AND_ASS expr
   50     | expr . XOR_ASS expr

    LOP_ASS  shift, and go to state 28
    ADD_ASS  shift, and go to state 29
    SUB_ASS  shift, and go to state 30
    MUL_ASS  shift, and go to state 31
    DIV_ASS  shift, and go to state 32
    SUR_ASS  shift, and go to state 33
    LS_ASS   shift, and go to state 34
    RS_ASS   shift, and go to state 35
    AND_ASS  shift, and go to state 36
    OR_ASS   shift, and go to state 37
    XOR_ASS  shift, and go to state 38
    LOG_OR   shift, and go to state 39
    LOG_AND  shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_XOR  shift, and go to state 42
    BIT_AND  shift, and go to state 43
    EQ       shift, and go to state 44
    UEQ      shift, and go to state 45
    GT       shift, and go to state 46
    LT       shift, and go to state 47
    GE       shift, and go to state 48
    LE       shift, and go to state 49
    LSHIFT   shift, and go to state 50
    RSHIFT   shift, and go to state 51
    ADD      shift, and go to state 52
    SUB      shift, and go to state 53
    MUL      shift, and go to state 54
    DIV      shift, and go to state 55
    SUR      shift, and go to state 56

    $default  reduce using rule 13 (declaration)


State 97

    8 function: T IDENTIFIER LEFTBR RIGHTBR . LBRACE statements RBRACE

    LBRACE  shift, and go to state 104


State 98

    7 function: T IDENTIFIER LEFTBR PARMS . RIGHTBR LBRACE statements RBRACE
   12 PARMS: PARMS . COMMA T IDENTIFIER

    RIGHTBR  shift, and go to state 105
    COMMA    shift, and go to state 102


State 99

   17 IDENTIFIERS: IDENTIFIERS COMMA IDENTIFIER .

    $default  reduce using rule 17 (IDENTIFIERS)


State 100

   10 function: T_VOID IDENTIFIER LEFTBR RIGHTBR LBRACE . statements RBRACE

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    SEMICOLON   shift, and go to state 9
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    statements   go to state 106
    statement    go to state 16
    function     go to state 17
    declaration  go to state 18
    expr         go to state 19
    T            go to state 20


State 101

    9 function: T_VOID IDENTIFIER LEFTBR PARMS RIGHTBR . LBRACE statements RBRACE

    LBRACE  shift, and go to state 107


State 102

   12 PARMS: PARMS COMMA . T IDENTIFIER

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4

    T  go to state 108


State 103

   11 PARMS: T IDENTIFIER .

    $default  reduce using rule 11 (PARMS)


State 104

    8 function: T IDENTIFIER LEFTBR RIGHTBR LBRACE . statements RBRACE

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    SEMICOLON   shift, and go to state 9
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    statements   go to state 109
    statement    go to state 16
    function     go to state 17
    declaration  go to state 18
    expr         go to state 19
    T            go to state 20


State 105

    7 function: T IDENTIFIER LEFTBR PARMS RIGHTBR . LBRACE statements RBRACE

    LBRACE  shift, and go to state 110


State 106

    3 statements: statements . statement
   10 function: T_VOID IDENTIFIER LEFTBR RIGHTBR LBRACE statements . RBRACE

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    RBRACE      shift, and go to state 111
    SEMICOLON   shift, and go to state 9
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    statement    go to state 26
    function     go to state 17
    declaration  go to state 18
    expr         go to state 19
    T            go to state 20


State 107

    9 function: T_VOID IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE . statements RBRACE

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    SEMICOLON   shift, and go to state 9
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    statements   go to state 112
    statement    go to state 16
    function     go to state 17
    declaration  go to state 18
    expr         go to state 19
    T            go to state 20


State 108

   12 PARMS: PARMS COMMA T . IDENTIFIER

    IDENTIFIER  shift, and go to state 113


State 109

    3 statements: statements . statement
    8 function: T IDENTIFIER LEFTBR RIGHTBR LBRACE statements . RBRACE

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    RBRACE      shift, and go to state 114
    SEMICOLON   shift, and go to state 9
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    statement    go to state 26
    function     go to state 17
    declaration  go to state 18
    expr         go to state 19
    T            go to state 20


State 110

    7 function: T IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE . statements RBRACE

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    SEMICOLON   shift, and go to state 9
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    statements   go to state 115
    statement    go to state 16
    function     go to state 17
    declaration  go to state 18
    expr         go to state 19
    T            go to state 20


State 111

   10 function: T_VOID IDENTIFIER LEFTBR RIGHTBR LBRACE statements RBRACE .

    $default  reduce using rule 10 (function)


State 112

    3 statements: statements . statement
    9 function: T_VOID IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE statements . RBRACE

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    RBRACE      shift, and go to state 116
    SEMICOLON   shift, and go to state 9
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    statement    go to state 26
    function     go to state 17
    declaration  go to state 18
    expr         go to state 19
    T            go to state 20


State 113

   12 PARMS: PARMS COMMA T IDENTIFIER .

    $default  reduce using rule 12 (PARMS)


State 114

    8 function: T IDENTIFIER LEFTBR RIGHTBR LBRACE statements RBRACE .

    $default  reduce using rule 8 (function)


State 115

    3 statements: statements . statement
    7 function: T IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE statements . RBRACE

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    T_VOID      shift, and go to state 5
    ADD         shift, and go to state 6
    SUB         shift, and go to state 7
    LEFTBR      shift, and go to state 8
    RBRACE      shift, and go to state 117
    SEMICOLON   shift, and go to state 9
    IDENTIFIER  shift, and go to state 10
    INTEGER     shift, and go to state 11
    CHAR        shift, and go to state 12
    STRING      shift, and go to state 13

    statement    go to state 26
    function     go to state 17
    declaration  go to state 18
    expr         go to state 19
    T            go to state 20


State 116

    9 function: T_VOID IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE statements RBRACE .

    $default  reduce using rule 9 (function)


State 117

    7 function: T IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE statements RBRACE .

    $default  reduce using rule 7 (function)
