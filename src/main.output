Terminals unused in grammar

    BOOL


Grammar

    0 $accept: program $end

    1 program: units

    2 units: declaration SEMICOLON
    3      | function
    4      | units declaration SEMICOLON
    5      | units function

    6 function: T IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE statements RBRACE
    7         | T IDENTIFIER LEFTBR RIGHTBR LBRACE statements RBRACE

    8 PARMS: T IDENTIFIER
    9      | PARMS COMMA T IDENTIFIER

   10 statements: statement
   11           | statements statement

   12 statement: SEMICOLON
   13          | declaration SEMICOLON
   14          | WHILE LEFTBR expr RIGHTBR LBRACE statements RBRACE
   15          | FOR LEFTBR expr SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE
   16          | FOR LEFTBR for_decl SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE
   17          | IF LEFTBR expr RIGHTBR LBRACE statements RBRACE
   18          | RETURN expr SEMICOLON
   19          | RETURN SEMICOLON
   20          | expr SEMICOLON

   21 for_decl: T IDENTIFIER LOP_ASS expr
   22         | PARMS COMMA T IDENTIFIER LOP_ASS expr

   23 declaration: T IDENTIFIER LOP_ASS expr
   24            | T IDENTIFIERS
   25            | T ARRAY
   26            | CONST T_INT IDENTIFIER LOP_ASS CONST_EXP
   27            | CONST T_CHAR IDENTIFIER LOP_ASS CHAR
   28            | CONST T_BOOL IDENTIFIER LOP_ASS INTEGER

   29 CONST_EXP: INTEGER
   30          | CONST_EXP ADD CONST_EXP
   31          | CONST_EXP SUB CONST_EXP
   32          | CONST_EXP MUL CONST_EXP
   33          | CONST_EXP DIV CONST_EXP
   34          | CONST_EXP LSHIFT CONST_EXP
   35          | SUB CONST_EXP
   36          | LEFTBR CONST_EXP RIGHTBR

   37 ARRAY: IDENTIFIER M_LBR CONST_EXP M_RBR
   38      | ARRAY M_LBR CONST_EXP M_RBR

   39 ARRAY2: IDENTIFIER M_LBR expr M_RBR
   40       | ARRAY2 M_LBR expr M_RBR

   41 LVAL: ARRAY2
   42     | IDENTIFIER

   43 IDENTIFIERS: IDENTIFIER
   44            | IDENTIFIERS COMMA IDENTIFIER

   45 PAS: expr
   46    | PAS COMMA expr

   47 expr: IDENTIFIER
   48     | INTEGER
   49     | HEX_INTEGER
   50     | CHAR
   51     | STRING
   52     | IDENTIFIER LEFTBR PAS RIGHTBR
   53     | IDENTIFIER LEFTBR RIGHTBR
   54     | expr ADD expr
   55     | expr SUB expr
   56     | expr MUL expr
   57     | expr DIV expr
   58     | expr SUR expr
   59     | expr LSHIFT expr
   60     | expr RSHIFT expr
   61     | expr BIT_AND expr
   62     | expr BIT_OR expr
   63     | expr BIT_XOR expr
   64     | expr EQ expr
   65     | expr UEQ expr
   66     | expr LT expr
   67     | expr GT expr
   68     | expr LE expr
   69     | expr GE expr
   70     | expr LOG_AND expr
   71     | expr LOG_OR expr
   72     | LVAL LOP_ASS expr
   73     | LVAL ADD_ASS expr
   74     | LVAL SUB_ASS expr
   75     | LVAL MUL_ASS expr
   76     | LVAL DIV_ASS expr
   77     | LVAL SUR_ASS expr
   78     | LVAL LS_ASS expr
   79     | LVAL RS_ASS expr
   80     | LVAL OR_ASS expr
   81     | LVAL AND_ASS expr
   82     | LVAL XOR_ASS expr
   83     | SUB expr
   84     | ADD expr
   85     | LOG_NOT expr
   86     | BIT_NOT expr
   87     | BIT_AND expr
   88     | INCR expr
   89     | DECR expr
   90     | expr INCR
   91     | expr DECR
   92     | LEFTBR expr RIGHTBR

   93 T: T_INT
   94  | T_CHAR
   95  | T_BOOL
   96  | T_STRING
   97  | T_VOID


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    T_CHAR (258) 27 94
    T_INT (259) 26 93
    T_STRING (260) 96
    T_BOOL (261) 28 95
    T_VOID (262) 97
    LOP_ASS (263) 21 22 23 26 27 28 72
    ADD_ASS (264) 73
    SUB_ASS (265) 74
    MUL_ASS (266) 75
    DIV_ASS (267) 76
    SUR_ASS (268) 77
    LS_ASS (269) 78
    RS_ASS (270) 79
    AND_ASS (271) 81
    OR_ASS (272) 80
    XOR_ASS (273) 82
    LOG_OR (274) 71
    LOG_AND (275) 70
    BIT_OR (276) 62
    BIT_XOR (277) 63
    BIT_AND (278) 61 87
    EQ (279) 64
    UEQ (280) 65
    GT (281) 67
    LT (282) 66
    GE (283) 69
    LE (284) 68
    LSHIFT (285) 34 59
    RSHIFT (286) 60
    ADD (287) 30 54 84
    SUB (288) 31 35 55 83
    MUL (289) 32 56
    DIV (290) 33 57
    SUR (291) 58
    BIT_NOT (292) 86
    LOG_NOT (293) 85
    INCR (294) 88 90
    DECR (295) 89 91
    LEFTBR (296) 6 7 14 15 16 17 36 52 53 92
    RIGHTBR (297) 6 7 14 15 16 17 36 52 53 92
    LBRACE (298) 6 7 14 15 16 17
    RBRACE (299) 6 7 14 15 16 17
    M_LBR (300) 37 38 39 40
    M_RBR (301) 37 38 39 40
    SEMICOLON (302) 2 4 12 13 15 16 18 19 20
    COMMA (303) 9 22 44 46
    IDENTIFIER (304) 6 7 8 9 21 22 23 26 27 28 37 39 42 43 44 47 52 53
    INTEGER (305) 28 29 48
    CHAR (306) 27 50
    BOOL (307)
    STRING (308) 51
    HEX_INTEGER (309) 49
    IF (310) 17
    WHILE (311) 14
    FOR (312) 15 16
    RETURN (313) 18 19
    CONST (314) 26 27 28
    ADDR (315)
    UMINUS (316)
    UADD (317)
    BACK_INCR (318)
    BACK_DECR (319)


Nonterminals, with rules where they appear

    $accept (65)
        on left: 0
    program (66)
        on left: 1
        on right: 0
    units (67)
        on left: 2 3 4 5
        on right: 1 4 5
    function (68)
        on left: 6 7
        on right: 3 5
    PARMS (69)
        on left: 8 9
        on right: 6 9 22
    statements (70)
        on left: 10 11
        on right: 6 7 11 14 15 16 17
    statement (71)
        on left: 12 13 14 15 16 17 18 19 20
        on right: 10 11
    for_decl (72)
        on left: 21 22
        on right: 16
    declaration (73)
        on left: 23 24 25 26 27 28
        on right: 2 4 13
    CONST_EXP (74)
        on left: 29 30 31 32 33 34 35 36
        on right: 26 30 31 32 33 34 35 36 37 38
    ARRAY (75)
        on left: 37 38
        on right: 25 38
    ARRAY2 (76)
        on left: 39 40
        on right: 40 41
    LVAL (77)
        on left: 41 42
        on right: 72 73 74 75 76 77 78 79 80 81 82
    IDENTIFIERS (78)
        on left: 43 44
        on right: 24 44
    PAS (79)
        on left: 45 46
        on right: 46 52
    expr (80)
        on left: 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92
        on right: 14 15 16 17 18 20 21 22 23 39 40 45 46 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92
    T (81)
        on left: 93 94 95 96 97
        on right: 6 7 8 9 21 22 23 24 25


State 0

    0 $accept: . program $end

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    CONST     shift, and go to state 6

    program      go to state 7
    units        go to state 8
    function     go to state 9
    declaration  go to state 10
    T            go to state 11


State 1

   94 T: T_CHAR .

    $default  reduce using rule 94 (T)


State 2

   93 T: T_INT .

    $default  reduce using rule 93 (T)


State 3

   96 T: T_STRING .

    $default  reduce using rule 96 (T)


State 4

   95 T: T_BOOL .

    $default  reduce using rule 95 (T)


State 5

   97 T: T_VOID .

    $default  reduce using rule 97 (T)


State 6

   26 declaration: CONST . T_INT IDENTIFIER LOP_ASS CONST_EXP
   27            | CONST . T_CHAR IDENTIFIER LOP_ASS CHAR
   28            | CONST . T_BOOL IDENTIFIER LOP_ASS INTEGER

    T_CHAR  shift, and go to state 12
    T_INT   shift, and go to state 13
    T_BOOL  shift, and go to state 14


State 7

    0 $accept: program . $end

    $end  shift, and go to state 15


State 8

    1 program: units .
    4 units: units . declaration SEMICOLON
    5      | units . function

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    CONST     shift, and go to state 6

    $default  reduce using rule 1 (program)

    function     go to state 16
    declaration  go to state 17
    T            go to state 11


State 9

    3 units: function .

    $default  reduce using rule 3 (units)


State 10

    2 units: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 18


State 11

    6 function: T . IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE statements RBRACE
    7         | T . IDENTIFIER LEFTBR RIGHTBR LBRACE statements RBRACE
   23 declaration: T . IDENTIFIER LOP_ASS expr
   24            | T . IDENTIFIERS
   25            | T . ARRAY

    IDENTIFIER  shift, and go to state 19

    ARRAY        go to state 20
    IDENTIFIERS  go to state 21


State 12

   27 declaration: CONST T_CHAR . IDENTIFIER LOP_ASS CHAR

    IDENTIFIER  shift, and go to state 22


State 13

   26 declaration: CONST T_INT . IDENTIFIER LOP_ASS CONST_EXP

    IDENTIFIER  shift, and go to state 23


State 14

   28 declaration: CONST T_BOOL . IDENTIFIER LOP_ASS INTEGER

    IDENTIFIER  shift, and go to state 24


State 15

    0 $accept: program $end .

    $default  accept


State 16

    5 units: units function .

    $default  reduce using rule 5 (units)


State 17

    4 units: units declaration . SEMICOLON

    SEMICOLON  shift, and go to state 25


State 18

    2 units: declaration SEMICOLON .

    $default  reduce using rule 2 (units)


State 19

    6 function: T IDENTIFIER . LEFTBR PARMS RIGHTBR LBRACE statements RBRACE
    7         | T IDENTIFIER . LEFTBR RIGHTBR LBRACE statements RBRACE
   23 declaration: T IDENTIFIER . LOP_ASS expr
   37 ARRAY: IDENTIFIER . M_LBR CONST_EXP M_RBR
   43 IDENTIFIERS: IDENTIFIER .

    LOP_ASS  shift, and go to state 26
    LEFTBR   shift, and go to state 27
    M_LBR    shift, and go to state 28

    $default  reduce using rule 43 (IDENTIFIERS)


State 20

   25 declaration: T ARRAY .
   38 ARRAY: ARRAY . M_LBR CONST_EXP M_RBR

    M_LBR  shift, and go to state 29

    $default  reduce using rule 25 (declaration)


State 21

   24 declaration: T IDENTIFIERS .
   44 IDENTIFIERS: IDENTIFIERS . COMMA IDENTIFIER

    COMMA  shift, and go to state 30

    $default  reduce using rule 24 (declaration)


State 22

   27 declaration: CONST T_CHAR IDENTIFIER . LOP_ASS CHAR

    LOP_ASS  shift, and go to state 31


State 23

   26 declaration: CONST T_INT IDENTIFIER . LOP_ASS CONST_EXP

    LOP_ASS  shift, and go to state 32


State 24

   28 declaration: CONST T_BOOL IDENTIFIER . LOP_ASS INTEGER

    LOP_ASS  shift, and go to state 33


State 25

    4 units: units declaration SEMICOLON .

    $default  reduce using rule 4 (units)


State 26

   23 declaration: T IDENTIFIER LOP_ASS . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 49


State 27

    6 function: T IDENTIFIER LEFTBR . PARMS RIGHTBR LBRACE statements RBRACE
    7         | T IDENTIFIER LEFTBR . RIGHTBR LBRACE statements RBRACE

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    RIGHTBR   shift, and go to state 50

    PARMS  go to state 51
    T      go to state 52


State 28

   37 ARRAY: IDENTIFIER M_LBR . CONST_EXP M_RBR

    SUB      shift, and go to state 53
    LEFTBR   shift, and go to state 54
    INTEGER  shift, and go to state 55

    CONST_EXP  go to state 56


State 29

   38 ARRAY: ARRAY M_LBR . CONST_EXP M_RBR

    SUB      shift, and go to state 53
    LEFTBR   shift, and go to state 54
    INTEGER  shift, and go to state 55

    CONST_EXP  go to state 57


State 30

   44 IDENTIFIERS: IDENTIFIERS COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 58


State 31

   27 declaration: CONST T_CHAR IDENTIFIER LOP_ASS . CHAR

    CHAR  shift, and go to state 59


State 32

   26 declaration: CONST T_INT IDENTIFIER LOP_ASS . CONST_EXP

    SUB      shift, and go to state 53
    LEFTBR   shift, and go to state 54
    INTEGER  shift, and go to state 55

    CONST_EXP  go to state 60


State 33

   28 declaration: CONST T_BOOL IDENTIFIER LOP_ASS . INTEGER

    INTEGER  shift, and go to state 61


State 34

   87 expr: BIT_AND . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 62


State 35

   84 expr: ADD . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 63


State 36

   83 expr: SUB . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 64


State 37

   86 expr: BIT_NOT . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 65


State 38

   85 expr: LOG_NOT . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 66


State 39

   88 expr: INCR . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 67


State 40

   89 expr: DECR . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 68


State 41

   92 expr: LEFTBR . expr RIGHTBR

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 69


State 42

   39 ARRAY2: IDENTIFIER . M_LBR expr M_RBR
   42 LVAL: IDENTIFIER .
   47 expr: IDENTIFIER .
   52     | IDENTIFIER . LEFTBR PAS RIGHTBR
   53     | IDENTIFIER . LEFTBR RIGHTBR

    LEFTBR  shift, and go to state 70
    M_LBR   shift, and go to state 71

    LOP_ASS   reduce using rule 42 (LVAL)
    ADD_ASS   reduce using rule 42 (LVAL)
    SUB_ASS   reduce using rule 42 (LVAL)
    MUL_ASS   reduce using rule 42 (LVAL)
    DIV_ASS   reduce using rule 42 (LVAL)
    SUR_ASS   reduce using rule 42 (LVAL)
    LS_ASS    reduce using rule 42 (LVAL)
    RS_ASS    reduce using rule 42 (LVAL)
    AND_ASS   reduce using rule 42 (LVAL)
    OR_ASS    reduce using rule 42 (LVAL)
    XOR_ASS   reduce using rule 42 (LVAL)
    $default  reduce using rule 47 (expr)


State 43

   48 expr: INTEGER .

    $default  reduce using rule 48 (expr)


State 44

   50 expr: CHAR .

    $default  reduce using rule 50 (expr)


State 45

   51 expr: STRING .

    $default  reduce using rule 51 (expr)


State 46

   49 expr: HEX_INTEGER .

    $default  reduce using rule 49 (expr)


State 47

   40 ARRAY2: ARRAY2 . M_LBR expr M_RBR
   41 LVAL: ARRAY2 .

    M_LBR  shift, and go to state 72

    $default  reduce using rule 41 (LVAL)


State 48

   72 expr: LVAL . LOP_ASS expr
   73     | LVAL . ADD_ASS expr
   74     | LVAL . SUB_ASS expr
   75     | LVAL . MUL_ASS expr
   76     | LVAL . DIV_ASS expr
   77     | LVAL . SUR_ASS expr
   78     | LVAL . LS_ASS expr
   79     | LVAL . RS_ASS expr
   80     | LVAL . OR_ASS expr
   81     | LVAL . AND_ASS expr
   82     | LVAL . XOR_ASS expr

    LOP_ASS  shift, and go to state 73
    ADD_ASS  shift, and go to state 74
    SUB_ASS  shift, and go to state 75
    MUL_ASS  shift, and go to state 76
    DIV_ASS  shift, and go to state 77
    SUR_ASS  shift, and go to state 78
    LS_ASS   shift, and go to state 79
    RS_ASS   shift, and go to state 80
    AND_ASS  shift, and go to state 81
    OR_ASS   shift, and go to state 82
    XOR_ASS  shift, and go to state 83


State 49

   23 declaration: T IDENTIFIER LOP_ASS expr .
   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 23 (declaration)


State 50

    7 function: T IDENTIFIER LEFTBR RIGHTBR . LBRACE statements RBRACE

    LBRACE  shift, and go to state 104


State 51

    6 function: T IDENTIFIER LEFTBR PARMS . RIGHTBR LBRACE statements RBRACE
    9 PARMS: PARMS . COMMA T IDENTIFIER

    RIGHTBR  shift, and go to state 105
    COMMA    shift, and go to state 106


State 52

    8 PARMS: T . IDENTIFIER

    IDENTIFIER  shift, and go to state 107


State 53

   35 CONST_EXP: SUB . CONST_EXP

    SUB      shift, and go to state 53
    LEFTBR   shift, and go to state 54
    INTEGER  shift, and go to state 55

    CONST_EXP  go to state 108


State 54

   36 CONST_EXP: LEFTBR . CONST_EXP RIGHTBR

    SUB      shift, and go to state 53
    LEFTBR   shift, and go to state 54
    INTEGER  shift, and go to state 55

    CONST_EXP  go to state 109


State 55

   29 CONST_EXP: INTEGER .

    $default  reduce using rule 29 (CONST_EXP)


State 56

   30 CONST_EXP: CONST_EXP . ADD CONST_EXP
   31          | CONST_EXP . SUB CONST_EXP
   32          | CONST_EXP . MUL CONST_EXP
   33          | CONST_EXP . DIV CONST_EXP
   34          | CONST_EXP . LSHIFT CONST_EXP
   37 ARRAY: IDENTIFIER M_LBR CONST_EXP . M_RBR

    LSHIFT  shift, and go to state 110
    ADD     shift, and go to state 111
    SUB     shift, and go to state 112
    MUL     shift, and go to state 113
    DIV     shift, and go to state 114
    M_RBR   shift, and go to state 115


State 57

   30 CONST_EXP: CONST_EXP . ADD CONST_EXP
   31          | CONST_EXP . SUB CONST_EXP
   32          | CONST_EXP . MUL CONST_EXP
   33          | CONST_EXP . DIV CONST_EXP
   34          | CONST_EXP . LSHIFT CONST_EXP
   38 ARRAY: ARRAY M_LBR CONST_EXP . M_RBR

    LSHIFT  shift, and go to state 110
    ADD     shift, and go to state 111
    SUB     shift, and go to state 112
    MUL     shift, and go to state 113
    DIV     shift, and go to state 114
    M_RBR   shift, and go to state 116


State 58

   44 IDENTIFIERS: IDENTIFIERS COMMA IDENTIFIER .

    $default  reduce using rule 44 (IDENTIFIERS)


State 59

   27 declaration: CONST T_CHAR IDENTIFIER LOP_ASS CHAR .

    $default  reduce using rule 27 (declaration)


State 60

   26 declaration: CONST T_INT IDENTIFIER LOP_ASS CONST_EXP .
   30 CONST_EXP: CONST_EXP . ADD CONST_EXP
   31          | CONST_EXP . SUB CONST_EXP
   32          | CONST_EXP . MUL CONST_EXP
   33          | CONST_EXP . DIV CONST_EXP
   34          | CONST_EXP . LSHIFT CONST_EXP

    LSHIFT  shift, and go to state 110
    ADD     shift, and go to state 111
    SUB     shift, and go to state 112
    MUL     shift, and go to state 113
    DIV     shift, and go to state 114

    $default  reduce using rule 26 (declaration)


State 61

   28 declaration: CONST T_BOOL IDENTIFIER LOP_ASS INTEGER .

    $default  reduce using rule 28 (declaration)


State 62

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   87     | BIT_AND expr .
   90     | expr . INCR
   91     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 87 (expr)


State 63

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   84     | ADD expr .
   90     | expr . INCR
   91     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 84 (expr)


State 64

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   83     | SUB expr .
   90     | expr . INCR
   91     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 83 (expr)


State 65

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   86     | BIT_NOT expr .
   90     | expr . INCR
   91     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 86 (expr)


State 66

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   85     | LOG_NOT expr .
   90     | expr . INCR
   91     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 85 (expr)


State 67

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   88     | INCR expr .
   90     | expr . INCR
   91     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 88 (expr)


State 68

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   89     | DECR expr .
   90     | expr . INCR
   91     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 89 (expr)


State 69

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR
   92     | LEFTBR expr . RIGHTBR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103
    RIGHTBR  shift, and go to state 117


State 70

   52 expr: IDENTIFIER LEFTBR . PAS RIGHTBR
   53     | IDENTIFIER LEFTBR . RIGHTBR

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    RIGHTBR      shift, and go to state 118
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    PAS     go to state 119
    expr    go to state 120


State 71

   39 ARRAY2: IDENTIFIER M_LBR . expr M_RBR

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 121


State 72

   40 ARRAY2: ARRAY2 M_LBR . expr M_RBR

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 122


State 73

   72 expr: LVAL LOP_ASS . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 123


State 74

   73 expr: LVAL ADD_ASS . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 124


State 75

   74 expr: LVAL SUB_ASS . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 125


State 76

   75 expr: LVAL MUL_ASS . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 126


State 77

   76 expr: LVAL DIV_ASS . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 127


State 78

   77 expr: LVAL SUR_ASS . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 128


State 79

   78 expr: LVAL LS_ASS . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 129


State 80

   79 expr: LVAL RS_ASS . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 130


State 81

   81 expr: LVAL AND_ASS . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 131


State 82

   80 expr: LVAL OR_ASS . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 132


State 83

   82 expr: LVAL XOR_ASS . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 133


State 84

   71 expr: expr LOG_OR . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 134


State 85

   70 expr: expr LOG_AND . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 135


State 86

   62 expr: expr BIT_OR . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 136


State 87

   63 expr: expr BIT_XOR . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 137


State 88

   61 expr: expr BIT_AND . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 138


State 89

   64 expr: expr EQ . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 139


State 90

   65 expr: expr UEQ . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 140


State 91

   67 expr: expr GT . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 141


State 92

   66 expr: expr LT . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 142


State 93

   69 expr: expr GE . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 143


State 94

   68 expr: expr LE . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 144


State 95

   59 expr: expr LSHIFT . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 145


State 96

   60 expr: expr RSHIFT . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 146


State 97

   54 expr: expr ADD . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 147


State 98

   55 expr: expr SUB . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 148


State 99

   56 expr: expr MUL . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 149


State 100

   57 expr: expr DIV . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 150


State 101

   58 expr: expr SUR . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 151


State 102

   90 expr: expr INCR .

    $default  reduce using rule 90 (expr)


State 103

   91 expr: expr DECR .

    $default  reduce using rule 91 (expr)


State 104

    7 function: T IDENTIFIER LEFTBR RIGHTBR LBRACE . statements RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    SEMICOLON    shift, and go to state 152
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46
    IF           shift, and go to state 153
    WHILE        shift, and go to state 154
    FOR          shift, and go to state 155
    RETURN       shift, and go to state 156
    CONST        shift, and go to state 6

    statements   go to state 157
    statement    go to state 158
    declaration  go to state 159
    ARRAY2       go to state 47
    LVAL         go to state 48
    expr         go to state 160
    T            go to state 161


State 105

    6 function: T IDENTIFIER LEFTBR PARMS RIGHTBR . LBRACE statements RBRACE

    LBRACE  shift, and go to state 162


State 106

    9 PARMS: PARMS COMMA . T IDENTIFIER

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5

    T  go to state 163


State 107

    8 PARMS: T IDENTIFIER .

    $default  reduce using rule 8 (PARMS)


State 108

   30 CONST_EXP: CONST_EXP . ADD CONST_EXP
   31          | CONST_EXP . SUB CONST_EXP
   32          | CONST_EXP . MUL CONST_EXP
   33          | CONST_EXP . DIV CONST_EXP
   34          | CONST_EXP . LSHIFT CONST_EXP
   35          | SUB CONST_EXP .

    $default  reduce using rule 35 (CONST_EXP)


State 109

   30 CONST_EXP: CONST_EXP . ADD CONST_EXP
   31          | CONST_EXP . SUB CONST_EXP
   32          | CONST_EXP . MUL CONST_EXP
   33          | CONST_EXP . DIV CONST_EXP
   34          | CONST_EXP . LSHIFT CONST_EXP
   36          | LEFTBR CONST_EXP . RIGHTBR

    LSHIFT   shift, and go to state 110
    ADD      shift, and go to state 111
    SUB      shift, and go to state 112
    MUL      shift, and go to state 113
    DIV      shift, and go to state 114
    RIGHTBR  shift, and go to state 164


State 110

   34 CONST_EXP: CONST_EXP LSHIFT . CONST_EXP

    SUB      shift, and go to state 53
    LEFTBR   shift, and go to state 54
    INTEGER  shift, and go to state 55

    CONST_EXP  go to state 165


State 111

   30 CONST_EXP: CONST_EXP ADD . CONST_EXP

    SUB      shift, and go to state 53
    LEFTBR   shift, and go to state 54
    INTEGER  shift, and go to state 55

    CONST_EXP  go to state 166


State 112

   31 CONST_EXP: CONST_EXP SUB . CONST_EXP

    SUB      shift, and go to state 53
    LEFTBR   shift, and go to state 54
    INTEGER  shift, and go to state 55

    CONST_EXP  go to state 167


State 113

   32 CONST_EXP: CONST_EXP MUL . CONST_EXP

    SUB      shift, and go to state 53
    LEFTBR   shift, and go to state 54
    INTEGER  shift, and go to state 55

    CONST_EXP  go to state 168


State 114

   33 CONST_EXP: CONST_EXP DIV . CONST_EXP

    SUB      shift, and go to state 53
    LEFTBR   shift, and go to state 54
    INTEGER  shift, and go to state 55

    CONST_EXP  go to state 169


State 115

   37 ARRAY: IDENTIFIER M_LBR CONST_EXP M_RBR .

    $default  reduce using rule 37 (ARRAY)


State 116

   38 ARRAY: ARRAY M_LBR CONST_EXP M_RBR .

    $default  reduce using rule 38 (ARRAY)


State 117

   92 expr: LEFTBR expr RIGHTBR .

    $default  reduce using rule 92 (expr)


State 118

   53 expr: IDENTIFIER LEFTBR RIGHTBR .

    $default  reduce using rule 53 (expr)


State 119

   46 PAS: PAS . COMMA expr
   52 expr: IDENTIFIER LEFTBR PAS . RIGHTBR

    RIGHTBR  shift, and go to state 170
    COMMA    shift, and go to state 171


State 120

   45 PAS: expr .
   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 45 (PAS)


State 121

   39 ARRAY2: IDENTIFIER M_LBR expr . M_RBR
   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103
    M_RBR    shift, and go to state 172


State 122

   40 ARRAY2: ARRAY2 M_LBR expr . M_RBR
   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103
    M_RBR    shift, and go to state 173


State 123

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   72     | LVAL LOP_ASS expr .
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 72 (expr)


State 124

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   73     | LVAL ADD_ASS expr .
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 73 (expr)


State 125

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   74     | LVAL SUB_ASS expr .
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 74 (expr)


State 126

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   75     | LVAL MUL_ASS expr .
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 75 (expr)


State 127

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   76     | LVAL DIV_ASS expr .
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 76 (expr)


State 128

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   77     | LVAL SUR_ASS expr .
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 77 (expr)


State 129

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   78     | LVAL LS_ASS expr .
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 78 (expr)


State 130

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   79     | LVAL RS_ASS expr .
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 79 (expr)


State 131

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   81     | LVAL AND_ASS expr .
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 81 (expr)


State 132

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   80     | LVAL OR_ASS expr .
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 80 (expr)


State 133

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   82     | LVAL XOR_ASS expr .
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 82 (expr)


State 134

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   71     | expr LOG_OR expr .
   90     | expr . INCR
   91     | expr . DECR

    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 71 (expr)


State 135

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   70     | expr LOG_AND expr .
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 70 (expr)


State 136

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   62     | expr BIT_OR expr .
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 62 (expr)


State 137

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   63     | expr BIT_XOR expr .
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 63 (expr)


State 138

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   61     | expr BIT_AND expr .
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    EQ      shift, and go to state 89
    UEQ     shift, and go to state 90
    GT      shift, and go to state 91
    LT      shift, and go to state 92
    GE      shift, and go to state 93
    LE      shift, and go to state 94
    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 61 (expr)


State 139

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   64     | expr EQ expr .
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    GT      shift, and go to state 91
    LT      shift, and go to state 92
    GE      shift, and go to state 93
    LE      shift, and go to state 94
    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 64 (expr)


State 140

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   65     | expr UEQ expr .
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    GT      shift, and go to state 91
    LT      shift, and go to state 92
    GE      shift, and go to state 93
    LE      shift, and go to state 94
    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 65 (expr)


State 141

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   67     | expr GT expr .
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 67 (expr)


State 142

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   66     | expr LT expr .
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 66 (expr)


State 143

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   69     | expr GE expr .
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 69 (expr)


State 144

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   68     | expr LE expr .
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 68 (expr)


State 145

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   59     | expr LSHIFT expr .
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    ADD   shift, and go to state 97
    SUB   shift, and go to state 98
    MUL   shift, and go to state 99
    DIV   shift, and go to state 100
    SUR   shift, and go to state 101
    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 59 (expr)


State 146

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   60     | expr RSHIFT expr .
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    ADD   shift, and go to state 97
    SUB   shift, and go to state 98
    MUL   shift, and go to state 99
    DIV   shift, and go to state 100
    SUR   shift, and go to state 101
    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 60 (expr)


State 147

   54 expr: expr . ADD expr
   54     | expr ADD expr .
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    MUL   shift, and go to state 99
    DIV   shift, and go to state 100
    SUR   shift, and go to state 101
    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 54 (expr)


State 148

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   55     | expr SUB expr .
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    MUL   shift, and go to state 99
    DIV   shift, and go to state 100
    SUR   shift, and go to state 101
    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 55 (expr)


State 149

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   56     | expr MUL expr .
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 56 (expr)


State 150

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   57     | expr DIV expr .
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 57 (expr)


State 151

   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   58     | expr SUR expr .
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 58 (expr)


State 152

   12 statement: SEMICOLON .

    $default  reduce using rule 12 (statement)


State 153

   17 statement: IF . LEFTBR expr RIGHTBR LBRACE statements RBRACE

    LEFTBR  shift, and go to state 174


State 154

   14 statement: WHILE . LEFTBR expr RIGHTBR LBRACE statements RBRACE

    LEFTBR  shift, and go to state 175


State 155

   15 statement: FOR . LEFTBR expr SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE
   16          | FOR . LEFTBR for_decl SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE

    LEFTBR  shift, and go to state 176


State 156

   18 statement: RETURN . expr SEMICOLON
   19          | RETURN . SEMICOLON

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    SEMICOLON    shift, and go to state 177
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 178


State 157

    7 function: T IDENTIFIER LEFTBR RIGHTBR LBRACE statements . RBRACE
   11 statements: statements . statement

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    RBRACE       shift, and go to state 179
    SEMICOLON    shift, and go to state 152
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46
    IF           shift, and go to state 153
    WHILE        shift, and go to state 154
    FOR          shift, and go to state 155
    RETURN       shift, and go to state 156
    CONST        shift, and go to state 6

    statement    go to state 180
    declaration  go to state 159
    ARRAY2       go to state 47
    LVAL         go to state 48
    expr         go to state 160
    T            go to state 161


State 158

   10 statements: statement .

    $default  reduce using rule 10 (statements)


State 159

   13 statement: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 181


State 160

   20 statement: expr . SEMICOLON
   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR     shift, and go to state 84
    LOG_AND    shift, and go to state 85
    BIT_OR     shift, and go to state 86
    BIT_XOR    shift, and go to state 87
    BIT_AND    shift, and go to state 88
    EQ         shift, and go to state 89
    UEQ        shift, and go to state 90
    GT         shift, and go to state 91
    LT         shift, and go to state 92
    GE         shift, and go to state 93
    LE         shift, and go to state 94
    LSHIFT     shift, and go to state 95
    RSHIFT     shift, and go to state 96
    ADD        shift, and go to state 97
    SUB        shift, and go to state 98
    MUL        shift, and go to state 99
    DIV        shift, and go to state 100
    SUR        shift, and go to state 101
    INCR       shift, and go to state 102
    DECR       shift, and go to state 103
    SEMICOLON  shift, and go to state 182


State 161

   23 declaration: T . IDENTIFIER LOP_ASS expr
   24            | T . IDENTIFIERS
   25            | T . ARRAY

    IDENTIFIER  shift, and go to state 183

    ARRAY        go to state 20
    IDENTIFIERS  go to state 21


State 162

    6 function: T IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE . statements RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    SEMICOLON    shift, and go to state 152
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46
    IF           shift, and go to state 153
    WHILE        shift, and go to state 154
    FOR          shift, and go to state 155
    RETURN       shift, and go to state 156
    CONST        shift, and go to state 6

    statements   go to state 184
    statement    go to state 158
    declaration  go to state 159
    ARRAY2       go to state 47
    LVAL         go to state 48
    expr         go to state 160
    T            go to state 161


State 163

    9 PARMS: PARMS COMMA T . IDENTIFIER

    IDENTIFIER  shift, and go to state 185


State 164

   36 CONST_EXP: LEFTBR CONST_EXP RIGHTBR .

    $default  reduce using rule 36 (CONST_EXP)


State 165

   30 CONST_EXP: CONST_EXP . ADD CONST_EXP
   31          | CONST_EXP . SUB CONST_EXP
   32          | CONST_EXP . MUL CONST_EXP
   33          | CONST_EXP . DIV CONST_EXP
   34          | CONST_EXP . LSHIFT CONST_EXP
   34          | CONST_EXP LSHIFT CONST_EXP .

    ADD  shift, and go to state 111
    SUB  shift, and go to state 112
    MUL  shift, and go to state 113
    DIV  shift, and go to state 114

    $default  reduce using rule 34 (CONST_EXP)


State 166

   30 CONST_EXP: CONST_EXP . ADD CONST_EXP
   30          | CONST_EXP ADD CONST_EXP .
   31          | CONST_EXP . SUB CONST_EXP
   32          | CONST_EXP . MUL CONST_EXP
   33          | CONST_EXP . DIV CONST_EXP
   34          | CONST_EXP . LSHIFT CONST_EXP

    MUL  shift, and go to state 113
    DIV  shift, and go to state 114

    $default  reduce using rule 30 (CONST_EXP)


State 167

   30 CONST_EXP: CONST_EXP . ADD CONST_EXP
   31          | CONST_EXP . SUB CONST_EXP
   31          | CONST_EXP SUB CONST_EXP .
   32          | CONST_EXP . MUL CONST_EXP
   33          | CONST_EXP . DIV CONST_EXP
   34          | CONST_EXP . LSHIFT CONST_EXP

    MUL  shift, and go to state 113
    DIV  shift, and go to state 114

    $default  reduce using rule 31 (CONST_EXP)


State 168

   30 CONST_EXP: CONST_EXP . ADD CONST_EXP
   31          | CONST_EXP . SUB CONST_EXP
   32          | CONST_EXP . MUL CONST_EXP
   32          | CONST_EXP MUL CONST_EXP .
   33          | CONST_EXP . DIV CONST_EXP
   34          | CONST_EXP . LSHIFT CONST_EXP

    $default  reduce using rule 32 (CONST_EXP)


State 169

   30 CONST_EXP: CONST_EXP . ADD CONST_EXP
   31          | CONST_EXP . SUB CONST_EXP
   32          | CONST_EXP . MUL CONST_EXP
   33          | CONST_EXP . DIV CONST_EXP
   33          | CONST_EXP DIV CONST_EXP .
   34          | CONST_EXP . LSHIFT CONST_EXP

    $default  reduce using rule 33 (CONST_EXP)


State 170

   52 expr: IDENTIFIER LEFTBR PAS RIGHTBR .

    $default  reduce using rule 52 (expr)


State 171

   46 PAS: PAS COMMA . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 186


State 172

   39 ARRAY2: IDENTIFIER M_LBR expr M_RBR .

    $default  reduce using rule 39 (ARRAY2)


State 173

   40 ARRAY2: ARRAY2 M_LBR expr M_RBR .

    $default  reduce using rule 40 (ARRAY2)


State 174

   17 statement: IF LEFTBR . expr RIGHTBR LBRACE statements RBRACE

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 187


State 175

   14 statement: WHILE LEFTBR . expr RIGHTBR LBRACE statements RBRACE

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 188


State 176

   15 statement: FOR LEFTBR . expr SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE
   16          | FOR LEFTBR . for_decl SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    PARMS     go to state 189
    for_decl  go to state 190
    ARRAY2    go to state 47
    LVAL      go to state 48
    expr      go to state 191
    T         go to state 192


State 177

   19 statement: RETURN SEMICOLON .

    $default  reduce using rule 19 (statement)


State 178

   18 statement: RETURN expr . SEMICOLON
   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR     shift, and go to state 84
    LOG_AND    shift, and go to state 85
    BIT_OR     shift, and go to state 86
    BIT_XOR    shift, and go to state 87
    BIT_AND    shift, and go to state 88
    EQ         shift, and go to state 89
    UEQ        shift, and go to state 90
    GT         shift, and go to state 91
    LT         shift, and go to state 92
    GE         shift, and go to state 93
    LE         shift, and go to state 94
    LSHIFT     shift, and go to state 95
    RSHIFT     shift, and go to state 96
    ADD        shift, and go to state 97
    SUB        shift, and go to state 98
    MUL        shift, and go to state 99
    DIV        shift, and go to state 100
    SUR        shift, and go to state 101
    INCR       shift, and go to state 102
    DECR       shift, and go to state 103
    SEMICOLON  shift, and go to state 193


State 179

    7 function: T IDENTIFIER LEFTBR RIGHTBR LBRACE statements RBRACE .

    $default  reduce using rule 7 (function)


State 180

   11 statements: statements statement .

    $default  reduce using rule 11 (statements)


State 181

   13 statement: declaration SEMICOLON .

    $default  reduce using rule 13 (statement)


State 182

   20 statement: expr SEMICOLON .

    $default  reduce using rule 20 (statement)


State 183

   23 declaration: T IDENTIFIER . LOP_ASS expr
   37 ARRAY: IDENTIFIER . M_LBR CONST_EXP M_RBR
   43 IDENTIFIERS: IDENTIFIER .

    LOP_ASS  shift, and go to state 26
    M_LBR    shift, and go to state 28

    $default  reduce using rule 43 (IDENTIFIERS)


State 184

    6 function: T IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE statements . RBRACE
   11 statements: statements . statement

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    RBRACE       shift, and go to state 194
    SEMICOLON    shift, and go to state 152
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46
    IF           shift, and go to state 153
    WHILE        shift, and go to state 154
    FOR          shift, and go to state 155
    RETURN       shift, and go to state 156
    CONST        shift, and go to state 6

    statement    go to state 180
    declaration  go to state 159
    ARRAY2       go to state 47
    LVAL         go to state 48
    expr         go to state 160
    T            go to state 161


State 185

    9 PARMS: PARMS COMMA T IDENTIFIER .

    $default  reduce using rule 9 (PARMS)


State 186

   46 PAS: PAS COMMA expr .
   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 46 (PAS)


State 187

   17 statement: IF LEFTBR expr . RIGHTBR LBRACE statements RBRACE
   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103
    RIGHTBR  shift, and go to state 195


State 188

   14 statement: WHILE LEFTBR expr . RIGHTBR LBRACE statements RBRACE
   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103
    RIGHTBR  shift, and go to state 196


State 189

    9 PARMS: PARMS . COMMA T IDENTIFIER
   22 for_decl: PARMS . COMMA T IDENTIFIER LOP_ASS expr

    COMMA  shift, and go to state 197


State 190

   16 statement: FOR LEFTBR for_decl . SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE

    SEMICOLON  shift, and go to state 198


State 191

   15 statement: FOR LEFTBR expr . SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE
   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR     shift, and go to state 84
    LOG_AND    shift, and go to state 85
    BIT_OR     shift, and go to state 86
    BIT_XOR    shift, and go to state 87
    BIT_AND    shift, and go to state 88
    EQ         shift, and go to state 89
    UEQ        shift, and go to state 90
    GT         shift, and go to state 91
    LT         shift, and go to state 92
    GE         shift, and go to state 93
    LE         shift, and go to state 94
    LSHIFT     shift, and go to state 95
    RSHIFT     shift, and go to state 96
    ADD        shift, and go to state 97
    SUB        shift, and go to state 98
    MUL        shift, and go to state 99
    DIV        shift, and go to state 100
    SUR        shift, and go to state 101
    INCR       shift, and go to state 102
    DECR       shift, and go to state 103
    SEMICOLON  shift, and go to state 199


State 192

    8 PARMS: T . IDENTIFIER
   21 for_decl: T . IDENTIFIER LOP_ASS expr

    IDENTIFIER  shift, and go to state 200


State 193

   18 statement: RETURN expr SEMICOLON .

    $default  reduce using rule 18 (statement)


State 194

    6 function: T IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE statements RBRACE .

    $default  reduce using rule 6 (function)


State 195

   17 statement: IF LEFTBR expr RIGHTBR . LBRACE statements RBRACE

    LBRACE  shift, and go to state 201


State 196

   14 statement: WHILE LEFTBR expr RIGHTBR . LBRACE statements RBRACE

    LBRACE  shift, and go to state 202


State 197

    9 PARMS: PARMS COMMA . T IDENTIFIER
   22 for_decl: PARMS COMMA . T IDENTIFIER LOP_ASS expr

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5

    T  go to state 203


State 198

   16 statement: FOR LEFTBR for_decl SEMICOLON . expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 204


State 199

   15 statement: FOR LEFTBR expr SEMICOLON . expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 205


State 200

    8 PARMS: T IDENTIFIER .
   21 for_decl: T IDENTIFIER . LOP_ASS expr

    LOP_ASS  shift, and go to state 206

    $default  reduce using rule 8 (PARMS)


State 201

   17 statement: IF LEFTBR expr RIGHTBR LBRACE . statements RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    SEMICOLON    shift, and go to state 152
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46
    IF           shift, and go to state 153
    WHILE        shift, and go to state 154
    FOR          shift, and go to state 155
    RETURN       shift, and go to state 156
    CONST        shift, and go to state 6

    statements   go to state 207
    statement    go to state 158
    declaration  go to state 159
    ARRAY2       go to state 47
    LVAL         go to state 48
    expr         go to state 160
    T            go to state 161


State 202

   14 statement: WHILE LEFTBR expr RIGHTBR LBRACE . statements RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    SEMICOLON    shift, and go to state 152
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46
    IF           shift, and go to state 153
    WHILE        shift, and go to state 154
    FOR          shift, and go to state 155
    RETURN       shift, and go to state 156
    CONST        shift, and go to state 6

    statements   go to state 208
    statement    go to state 158
    declaration  go to state 159
    ARRAY2       go to state 47
    LVAL         go to state 48
    expr         go to state 160
    T            go to state 161


State 203

    9 PARMS: PARMS COMMA T . IDENTIFIER
   22 for_decl: PARMS COMMA T . IDENTIFIER LOP_ASS expr

    IDENTIFIER  shift, and go to state 209


State 204

   16 statement: FOR LEFTBR for_decl SEMICOLON expr . SEMICOLON expr RIGHTBR LBRACE statements RBRACE
   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR     shift, and go to state 84
    LOG_AND    shift, and go to state 85
    BIT_OR     shift, and go to state 86
    BIT_XOR    shift, and go to state 87
    BIT_AND    shift, and go to state 88
    EQ         shift, and go to state 89
    UEQ        shift, and go to state 90
    GT         shift, and go to state 91
    LT         shift, and go to state 92
    GE         shift, and go to state 93
    LE         shift, and go to state 94
    LSHIFT     shift, and go to state 95
    RSHIFT     shift, and go to state 96
    ADD        shift, and go to state 97
    SUB        shift, and go to state 98
    MUL        shift, and go to state 99
    DIV        shift, and go to state 100
    SUR        shift, and go to state 101
    INCR       shift, and go to state 102
    DECR       shift, and go to state 103
    SEMICOLON  shift, and go to state 210


State 205

   15 statement: FOR LEFTBR expr SEMICOLON expr . SEMICOLON expr RIGHTBR LBRACE statements RBRACE
   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR     shift, and go to state 84
    LOG_AND    shift, and go to state 85
    BIT_OR     shift, and go to state 86
    BIT_XOR    shift, and go to state 87
    BIT_AND    shift, and go to state 88
    EQ         shift, and go to state 89
    UEQ        shift, and go to state 90
    GT         shift, and go to state 91
    LT         shift, and go to state 92
    GE         shift, and go to state 93
    LE         shift, and go to state 94
    LSHIFT     shift, and go to state 95
    RSHIFT     shift, and go to state 96
    ADD        shift, and go to state 97
    SUB        shift, and go to state 98
    MUL        shift, and go to state 99
    DIV        shift, and go to state 100
    SUR        shift, and go to state 101
    INCR       shift, and go to state 102
    DECR       shift, and go to state 103
    SEMICOLON  shift, and go to state 211


State 206

   21 for_decl: T IDENTIFIER LOP_ASS . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 212


State 207

   11 statements: statements . statement
   17 statement: IF LEFTBR expr RIGHTBR LBRACE statements . RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    RBRACE       shift, and go to state 213
    SEMICOLON    shift, and go to state 152
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46
    IF           shift, and go to state 153
    WHILE        shift, and go to state 154
    FOR          shift, and go to state 155
    RETURN       shift, and go to state 156
    CONST        shift, and go to state 6

    statement    go to state 180
    declaration  go to state 159
    ARRAY2       go to state 47
    LVAL         go to state 48
    expr         go to state 160
    T            go to state 161


State 208

   11 statements: statements . statement
   14 statement: WHILE LEFTBR expr RIGHTBR LBRACE statements . RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    RBRACE       shift, and go to state 214
    SEMICOLON    shift, and go to state 152
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46
    IF           shift, and go to state 153
    WHILE        shift, and go to state 154
    FOR          shift, and go to state 155
    RETURN       shift, and go to state 156
    CONST        shift, and go to state 6

    statement    go to state 180
    declaration  go to state 159
    ARRAY2       go to state 47
    LVAL         go to state 48
    expr         go to state 160
    T            go to state 161


State 209

    9 PARMS: PARMS COMMA T IDENTIFIER .
   22 for_decl: PARMS COMMA T IDENTIFIER . LOP_ASS expr

    LOP_ASS  shift, and go to state 215

    $default  reduce using rule 9 (PARMS)


State 210

   16 statement: FOR LEFTBR for_decl SEMICOLON expr SEMICOLON . expr RIGHTBR LBRACE statements RBRACE

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 216


State 211

   15 statement: FOR LEFTBR expr SEMICOLON expr SEMICOLON . expr RIGHTBR LBRACE statements RBRACE

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 217


State 212

   21 for_decl: T IDENTIFIER LOP_ASS expr .
   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 21 (for_decl)


State 213

   17 statement: IF LEFTBR expr RIGHTBR LBRACE statements RBRACE .

    $default  reduce using rule 17 (statement)


State 214

   14 statement: WHILE LEFTBR expr RIGHTBR LBRACE statements RBRACE .

    $default  reduce using rule 14 (statement)


State 215

   22 for_decl: PARMS COMMA T IDENTIFIER LOP_ASS . expr

    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46

    ARRAY2  go to state 47
    LVAL    go to state 48
    expr    go to state 218


State 216

   16 statement: FOR LEFTBR for_decl SEMICOLON expr SEMICOLON expr . RIGHTBR LBRACE statements RBRACE
   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103
    RIGHTBR  shift, and go to state 219


State 217

   15 statement: FOR LEFTBR expr SEMICOLON expr SEMICOLON expr . RIGHTBR LBRACE statements RBRACE
   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103
    RIGHTBR  shift, and go to state 220


State 218

   22 for_decl: PARMS COMMA T IDENTIFIER LOP_ASS expr .
   54 expr: expr . ADD expr
   55     | expr . SUB expr
   56     | expr . MUL expr
   57     | expr . DIV expr
   58     | expr . SUR expr
   59     | expr . LSHIFT expr
   60     | expr . RSHIFT expr
   61     | expr . BIT_AND expr
   62     | expr . BIT_OR expr
   63     | expr . BIT_XOR expr
   64     | expr . EQ expr
   65     | expr . UEQ expr
   66     | expr . LT expr
   67     | expr . GT expr
   68     | expr . LE expr
   69     | expr . GE expr
   70     | expr . LOG_AND expr
   71     | expr . LOG_OR expr
   90     | expr . INCR
   91     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 22 (for_decl)


State 219

   16 statement: FOR LEFTBR for_decl SEMICOLON expr SEMICOLON expr RIGHTBR . LBRACE statements RBRACE

    LBRACE  shift, and go to state 221


State 220

   15 statement: FOR LEFTBR expr SEMICOLON expr SEMICOLON expr RIGHTBR . LBRACE statements RBRACE

    LBRACE  shift, and go to state 222


State 221

   16 statement: FOR LEFTBR for_decl SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE . statements RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    SEMICOLON    shift, and go to state 152
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46
    IF           shift, and go to state 153
    WHILE        shift, and go to state 154
    FOR          shift, and go to state 155
    RETURN       shift, and go to state 156
    CONST        shift, and go to state 6

    statements   go to state 223
    statement    go to state 158
    declaration  go to state 159
    ARRAY2       go to state 47
    LVAL         go to state 48
    expr         go to state 160
    T            go to state 161


State 222

   15 statement: FOR LEFTBR expr SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE . statements RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    SEMICOLON    shift, and go to state 152
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46
    IF           shift, and go to state 153
    WHILE        shift, and go to state 154
    FOR          shift, and go to state 155
    RETURN       shift, and go to state 156
    CONST        shift, and go to state 6

    statements   go to state 224
    statement    go to state 158
    declaration  go to state 159
    ARRAY2       go to state 47
    LVAL         go to state 48
    expr         go to state 160
    T            go to state 161


State 223

   11 statements: statements . statement
   16 statement: FOR LEFTBR for_decl SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements . RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    RBRACE       shift, and go to state 225
    SEMICOLON    shift, and go to state 152
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46
    IF           shift, and go to state 153
    WHILE        shift, and go to state 154
    FOR          shift, and go to state 155
    RETURN       shift, and go to state 156
    CONST        shift, and go to state 6

    statement    go to state 180
    declaration  go to state 159
    ARRAY2       go to state 47
    LVAL         go to state 48
    expr         go to state 160
    T            go to state 161


State 224

   11 statements: statements . statement
   15 statement: FOR LEFTBR expr SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements . RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 34
    ADD          shift, and go to state 35
    SUB          shift, and go to state 36
    BIT_NOT      shift, and go to state 37
    LOG_NOT      shift, and go to state 38
    INCR         shift, and go to state 39
    DECR         shift, and go to state 40
    LEFTBR       shift, and go to state 41
    RBRACE       shift, and go to state 226
    SEMICOLON    shift, and go to state 152
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 43
    CHAR         shift, and go to state 44
    STRING       shift, and go to state 45
    HEX_INTEGER  shift, and go to state 46
    IF           shift, and go to state 153
    WHILE        shift, and go to state 154
    FOR          shift, and go to state 155
    RETURN       shift, and go to state 156
    CONST        shift, and go to state 6

    statement    go to state 180
    declaration  go to state 159
    ARRAY2       go to state 47
    LVAL         go to state 48
    expr         go to state 160
    T            go to state 161


State 225

   16 statement: FOR LEFTBR for_decl SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE .

    $default  reduce using rule 16 (statement)


State 226

   15 statement: FOR LEFTBR expr SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE .

    $default  reduce using rule 15 (statement)
