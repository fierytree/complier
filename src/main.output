Terminals unused in grammar

    BOOL


Grammar

    0 $accept: program $end

    1 program: units

    2 program_unit: function
    3             | declaration SEMICOLON
    4             | struct SEMICOLON

    5 units: program_unit
    6      | units program_unit

    7 struct_items: declaration SEMICOLON
    8             | struct_items declaration SEMICOLON

    9 struct: STRUCT IDENTIFIER LBRACE struct_items RBRACE

   10 function: T IDENTIFIER for_LEFTBR PARMS for_RIGHTBR block

   11 PARMS: T IDENTIFIER
   12      | PARMS COMMA T IDENTIFIER
   13      | %empty

   14 block_item: statement
   15           | declaration SEMICOLON

   16 block_items: %empty
   17            | block_items block_item

   18 block: LBRACE block_items RBRACE

   19 statement: SEMICOLON
   20          | block
   21          | WHILE LEFTBR expr RIGHTBR statement
   22          | FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement
   23          | IF LEFTBR expr RIGHTBR statement
   24          | IF LEFTBR expr RIGHTBR statement ELSE statement
   25          | RETURN expr SEMICOLON
   26          | RETURN SEMICOLON
   27          | BREAK SEMICOLON
   28          | CONTINUE SEMICOLON
   29          | expr SEMICOLON

   30 for_expr: declaration
   31         | expr
   32         | %empty

   33 for_LEFTBR: LEFTBR

   34 for_RIGHTBR: RIGHTBR

   35 declaration: T IDENTIFIERS
   36            | T ARRAY
   37            | CONST T_INT IDENTIFIER LOP_ASS CONST_EXP
   38            | CONST T_CHAR IDENTIFIER LOP_ASS CHAR
   39            | CONST T_BOOL IDENTIFIER LOP_ASS INTEGER

   40 CONST_EXP: INTEGER
   41          | CONST_EXP ADD CONST_EXP
   42          | CONST_EXP SUB CONST_EXP
   43          | CONST_EXP MUL CONST_EXP
   44          | CONST_EXP DIV CONST_EXP
   45          | CONST_EXP LSHIFT CONST_EXP
   46          | SUB CONST_EXP
   47          | LEFTBR CONST_EXP RIGHTBR

   48 ARRAY: IDENTIFIER M_LBR CONST_EXP M_RBR
   49      | ARRAY M_LBR CONST_EXP M_RBR

   50 ARRAY2: IDENTIFIER M_LBR expr M_RBR
   51       | ARRAY2 M_LBR expr M_RBR

   52 struct_mem: IDENTIFIER ST_MB IDENTIFIER
   53           | IDENTIFIER STP_MB IDENTIFIER

   54 LVAL: ARRAY2
   55     | IDENTIFIER
   56     | struct_mem

   57 decl_item: IDENTIFIER
   58          | IDENTIFIER LOP_ASS expr

   59 IDENTIFIERS: decl_item
   60            | IDENTIFIERS COMMA decl_item

   61 PAS: %empty
   62    | PAS COMMA expr
   63    | expr

   64 expr: IDENTIFIER
   65     | INTEGER
   66     | HEX_INTEGER
   67     | CHAR
   68     | STRING
   69     | ARRAY2
   70     | struct_mem
   71     | IDENTIFIER LEFTBR PAS RIGHTBR
   72     | expr ADD expr
   73     | expr SUB expr
   74     | expr MUL expr
   75     | expr DIV expr
   76     | expr SUR expr
   77     | expr LSHIFT expr
   78     | expr RSHIFT expr
   79     | expr BIT_AND expr
   80     | expr BIT_OR expr
   81     | expr BIT_XOR expr
   82     | expr EQ expr
   83     | expr UEQ expr
   84     | expr LT expr
   85     | expr GT expr
   86     | expr LE expr
   87     | expr GE expr
   88     | expr LOG_AND expr
   89     | expr LOG_OR expr
   90     | LVAL LOP_ASS expr
   91     | LVAL ADD_ASS expr
   92     | LVAL SUB_ASS expr
   93     | LVAL MUL_ASS expr
   94     | LVAL DIV_ASS expr
   95     | LVAL SUR_ASS expr
   96     | LVAL LS_ASS expr
   97     | LVAL RS_ASS expr
   98     | LVAL OR_ASS expr
   99     | LVAL AND_ASS expr
  100     | LVAL XOR_ASS expr
  101     | SUB expr
  102     | ADD expr
  103     | LOG_NOT expr
  104     | BIT_NOT expr
  105     | BIT_AND expr
  106     | MUL expr
  107     | INCR expr
  108     | DECR expr
  109     | expr INCR
  110     | expr DECR
  111     | LEFTBR expr RIGHTBR

  112 T: T1
  113  | T1 MUL

  114 T1: T_INT
  115   | T_CHAR
  116   | T_BOOL
  117   | T_STRING
  118   | T_VOID
  119   | STRUCT IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    T_CHAR (258) 38 115
    T_INT (259) 37 114
    T_STRING (260) 117
    T_BOOL (261) 39 116
    T_VOID (262) 118
    LOP_ASS (263) 37 38 39 58 90
    ADD_ASS (264) 91
    SUB_ASS (265) 92
    MUL_ASS (266) 93
    DIV_ASS (267) 94
    SUR_ASS (268) 95
    LS_ASS (269) 96
    RS_ASS (270) 97
    AND_ASS (271) 99
    OR_ASS (272) 98
    XOR_ASS (273) 100
    LOG_OR (274) 89
    LOG_AND (275) 88
    BIT_OR (276) 80
    BIT_XOR (277) 81
    BIT_AND (278) 79 105
    EQ (279) 82
    UEQ (280) 83
    GT (281) 85
    LT (282) 84
    GE (283) 87
    LE (284) 86
    LSHIFT (285) 45 77
    RSHIFT (286) 78
    ADD (287) 41 72 102
    SUB (288) 42 46 73 101
    MUL (289) 43 74 106 113
    DIV (290) 44 75
    SUR (291) 76
    ADDR (292)
    STAR (293)
    LEFTBR (294) 21 23 24 33 47 71 111
    RIGHTBR (295) 21 23 24 34 47 71 111
    LOG_NOT (296) 103
    BIT_NOT (297) 104
    UMINUS (298)
    UADD (299)
    INCR (300) 107 109
    DECR (301) 108 110
    LBRACE (302) 9 18
    RBRACE (303) 9 18
    ST_MB (304) 52
    STP_MB (305) 53
    M_LBR (306) 48 49 50 51
    M_RBR (307) 48 49 50 51
    BACK_INCR (308)
    BACK_DECR (309)
    SEMICOLON (310) 3 4 7 8 15 19 22 25 26 27 28 29
    COMMA (311) 12 60 62
    IDENTIFIER (312) 9 10 11 12 37 38 39 48 50 52 53 55 57 58 64 71 119
    INTEGER (313) 39 40 65
    CHAR (314) 38 67
    BOOL (315)
    STRING (316) 68
    HEX_INTEGER (317) 66
    IF (318) 23 24
    WHILE (319) 21
    FOR (320) 22
    RETURN (321) 25 26
    CONST (322) 37 38 39
    ELSE (323) 24
    BREAK (324) 27
    CONTINUE (325) 28
    STRUCT (326) 9 119


Nonterminals, with rules where they appear

    $accept (72)
        on left: 0
    program (73)
        on left: 1
        on right: 0
    program_unit (74)
        on left: 2 3 4
        on right: 5 6
    units (75)
        on left: 5 6
        on right: 1 6
    struct_items (76)
        on left: 7 8
        on right: 8 9
    struct (77)
        on left: 9
        on right: 4
    function (78)
        on left: 10
        on right: 2
    PARMS (79)
        on left: 11 12 13
        on right: 10 12
    block_item (80)
        on left: 14 15
        on right: 17
    block_items (81)
        on left: 16 17
        on right: 17 18
    block (82)
        on left: 18
        on right: 10 20
    statement (83)
        on left: 19 20 21 22 23 24 25 26 27 28 29
        on right: 14 21 22 23 24
    for_expr (84)
        on left: 30 31 32
        on right: 22
    for_LEFTBR (85)
        on left: 33
        on right: 10 22
    for_RIGHTBR (86)
        on left: 34
        on right: 10 22
    declaration (87)
        on left: 35 36 37 38 39
        on right: 3 7 8 15 30
    CONST_EXP (88)
        on left: 40 41 42 43 44 45 46 47
        on right: 37 41 42 43 44 45 46 47 48 49
    ARRAY (89)
        on left: 48 49
        on right: 36 49
    ARRAY2 (90)
        on left: 50 51
        on right: 51 54 69
    struct_mem (91)
        on left: 52 53
        on right: 56 70
    LVAL (92)
        on left: 54 55 56
        on right: 90 91 92 93 94 95 96 97 98 99 100
    decl_item (93)
        on left: 57 58
        on right: 59 60
    IDENTIFIERS (94)
        on left: 59 60
        on right: 35 60
    PAS (95)
        on left: 61 62 63
        on right: 62 71
    expr (96)
        on left: 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111
        on right: 21 23 24 25 29 31 50 51 58 62 63 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111
    T (97)
        on left: 112 113
        on right: 10 11 12 35 36
    T1 (98)
        on left: 114 115 116 117 118 119
        on right: 112 113


State 0

    0 $accept: . program $end

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    CONST     shift, and go to state 6
    STRUCT    shift, and go to state 7

    program       go to state 8
    program_unit  go to state 9
    units         go to state 10
    struct        go to state 11
    function      go to state 12
    declaration   go to state 13
    T             go to state 14
    T1            go to state 15


State 1

  115 T1: T_CHAR .

    $default  reduce using rule 115 (T1)


State 2

  114 T1: T_INT .

    $default  reduce using rule 114 (T1)


State 3

  117 T1: T_STRING .

    $default  reduce using rule 117 (T1)


State 4

  116 T1: T_BOOL .

    $default  reduce using rule 116 (T1)


State 5

  118 T1: T_VOID .

    $default  reduce using rule 118 (T1)


State 6

   37 declaration: CONST . T_INT IDENTIFIER LOP_ASS CONST_EXP
   38            | CONST . T_CHAR IDENTIFIER LOP_ASS CHAR
   39            | CONST . T_BOOL IDENTIFIER LOP_ASS INTEGER

    T_CHAR  shift, and go to state 16
    T_INT   shift, and go to state 17
    T_BOOL  shift, and go to state 18


State 7

    9 struct: STRUCT . IDENTIFIER LBRACE struct_items RBRACE
  119 T1: STRUCT . IDENTIFIER

    IDENTIFIER  shift, and go to state 19


State 8

    0 $accept: program . $end

    $end  shift, and go to state 20


State 9

    5 units: program_unit .

    $default  reduce using rule 5 (units)


State 10

    1 program: units .
    6 units: units . program_unit

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    CONST     shift, and go to state 6
    STRUCT    shift, and go to state 7

    $default  reduce using rule 1 (program)

    program_unit  go to state 21
    struct        go to state 11
    function      go to state 12
    declaration   go to state 13
    T             go to state 14
    T1            go to state 15


State 11

    4 program_unit: struct . SEMICOLON

    SEMICOLON  shift, and go to state 22


State 12

    2 program_unit: function .

    $default  reduce using rule 2 (program_unit)


State 13

    3 program_unit: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 23


State 14

   10 function: T . IDENTIFIER for_LEFTBR PARMS for_RIGHTBR block
   35 declaration: T . IDENTIFIERS
   36            | T . ARRAY

    IDENTIFIER  shift, and go to state 24

    ARRAY        go to state 25
    decl_item    go to state 26
    IDENTIFIERS  go to state 27


State 15

  112 T: T1 .
  113  | T1 . MUL

    MUL  shift, and go to state 28

    $default  reduce using rule 112 (T)


State 16

   38 declaration: CONST T_CHAR . IDENTIFIER LOP_ASS CHAR

    IDENTIFIER  shift, and go to state 29


State 17

   37 declaration: CONST T_INT . IDENTIFIER LOP_ASS CONST_EXP

    IDENTIFIER  shift, and go to state 30


State 18

   39 declaration: CONST T_BOOL . IDENTIFIER LOP_ASS INTEGER

    IDENTIFIER  shift, and go to state 31


State 19

    9 struct: STRUCT IDENTIFIER . LBRACE struct_items RBRACE
  119 T1: STRUCT IDENTIFIER .

    LBRACE  shift, and go to state 32

    $default  reduce using rule 119 (T1)


State 20

    0 $accept: program $end .

    $default  accept


State 21

    6 units: units program_unit .

    $default  reduce using rule 6 (units)


State 22

    4 program_unit: struct SEMICOLON .

    $default  reduce using rule 4 (program_unit)


State 23

    3 program_unit: declaration SEMICOLON .

    $default  reduce using rule 3 (program_unit)


State 24

   10 function: T IDENTIFIER . for_LEFTBR PARMS for_RIGHTBR block
   48 ARRAY: IDENTIFIER . M_LBR CONST_EXP M_RBR
   57 decl_item: IDENTIFIER .
   58          | IDENTIFIER . LOP_ASS expr

    LOP_ASS  shift, and go to state 33
    LEFTBR   shift, and go to state 34
    M_LBR    shift, and go to state 35

    $default  reduce using rule 57 (decl_item)

    for_LEFTBR  go to state 36


State 25

   36 declaration: T ARRAY .
   49 ARRAY: ARRAY . M_LBR CONST_EXP M_RBR

    M_LBR  shift, and go to state 37

    $default  reduce using rule 36 (declaration)


State 26

   59 IDENTIFIERS: decl_item .

    $default  reduce using rule 59 (IDENTIFIERS)


State 27

   35 declaration: T IDENTIFIERS .
   60 IDENTIFIERS: IDENTIFIERS . COMMA decl_item

    COMMA  shift, and go to state 38

    $default  reduce using rule 35 (declaration)


State 28

  113 T: T1 MUL .

    $default  reduce using rule 113 (T)


State 29

   38 declaration: CONST T_CHAR IDENTIFIER . LOP_ASS CHAR

    LOP_ASS  shift, and go to state 39


State 30

   37 declaration: CONST T_INT IDENTIFIER . LOP_ASS CONST_EXP

    LOP_ASS  shift, and go to state 40


State 31

   39 declaration: CONST T_BOOL IDENTIFIER . LOP_ASS INTEGER

    LOP_ASS  shift, and go to state 41


State 32

    9 struct: STRUCT IDENTIFIER LBRACE . struct_items RBRACE

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    CONST     shift, and go to state 6
    STRUCT    shift, and go to state 42

    struct_items  go to state 43
    declaration   go to state 44
    T             go to state 45
    T1            go to state 15


State 33

   58 decl_item: IDENTIFIER LOP_ASS . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 63


State 34

   33 for_LEFTBR: LEFTBR .

    $default  reduce using rule 33 (for_LEFTBR)


State 35

   48 ARRAY: IDENTIFIER M_LBR . CONST_EXP M_RBR

    SUB      shift, and go to state 64
    LEFTBR   shift, and go to state 65
    INTEGER  shift, and go to state 66

    CONST_EXP  go to state 67


State 36

   10 function: T IDENTIFIER for_LEFTBR . PARMS for_RIGHTBR block

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    STRUCT    shift, and go to state 42

    $default  reduce using rule 13 (PARMS)

    PARMS  go to state 68
    T      go to state 69
    T1     go to state 15


State 37

   49 ARRAY: ARRAY M_LBR . CONST_EXP M_RBR

    SUB      shift, and go to state 64
    LEFTBR   shift, and go to state 65
    INTEGER  shift, and go to state 66

    CONST_EXP  go to state 70


State 38

   60 IDENTIFIERS: IDENTIFIERS COMMA . decl_item

    IDENTIFIER  shift, and go to state 71

    decl_item  go to state 72


State 39

   38 declaration: CONST T_CHAR IDENTIFIER LOP_ASS . CHAR

    CHAR  shift, and go to state 73


State 40

   37 declaration: CONST T_INT IDENTIFIER LOP_ASS . CONST_EXP

    SUB      shift, and go to state 64
    LEFTBR   shift, and go to state 65
    INTEGER  shift, and go to state 66

    CONST_EXP  go to state 74


State 41

   39 declaration: CONST T_BOOL IDENTIFIER LOP_ASS . INTEGER

    INTEGER  shift, and go to state 75


State 42

  119 T1: STRUCT . IDENTIFIER

    IDENTIFIER  shift, and go to state 76


State 43

    8 struct_items: struct_items . declaration SEMICOLON
    9 struct: STRUCT IDENTIFIER LBRACE struct_items . RBRACE

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    RBRACE    shift, and go to state 77
    CONST     shift, and go to state 6
    STRUCT    shift, and go to state 42

    declaration  go to state 78
    T            go to state 45
    T1           go to state 15


State 44

    7 struct_items: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 79


State 45

   35 declaration: T . IDENTIFIERS
   36            | T . ARRAY

    IDENTIFIER  shift, and go to state 80

    ARRAY        go to state 25
    decl_item    go to state 26
    IDENTIFIERS  go to state 27


State 46

  105 expr: BIT_AND . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 81


State 47

  102 expr: ADD . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 82


State 48

  101 expr: SUB . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 83


State 49

  106 expr: MUL . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 84


State 50

  111 expr: LEFTBR . expr RIGHTBR

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 85


State 51

  103 expr: LOG_NOT . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 86


State 52

  104 expr: BIT_NOT . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 87


State 53

  107 expr: INCR . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 88


State 54

  108 expr: DECR . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 89


State 55

   50 ARRAY2: IDENTIFIER . M_LBR expr M_RBR
   52 struct_mem: IDENTIFIER . ST_MB IDENTIFIER
   53           | IDENTIFIER . STP_MB IDENTIFIER
   55 LVAL: IDENTIFIER .
   64 expr: IDENTIFIER .
   71     | IDENTIFIER . LEFTBR PAS RIGHTBR

    LEFTBR  shift, and go to state 90
    ST_MB   shift, and go to state 91
    STP_MB  shift, and go to state 92
    M_LBR   shift, and go to state 93

    LOP_ASS   reduce using rule 55 (LVAL)
    ADD_ASS   reduce using rule 55 (LVAL)
    SUB_ASS   reduce using rule 55 (LVAL)
    MUL_ASS   reduce using rule 55 (LVAL)
    DIV_ASS   reduce using rule 55 (LVAL)
    SUR_ASS   reduce using rule 55 (LVAL)
    LS_ASS    reduce using rule 55 (LVAL)
    RS_ASS    reduce using rule 55 (LVAL)
    AND_ASS   reduce using rule 55 (LVAL)
    OR_ASS    reduce using rule 55 (LVAL)
    XOR_ASS   reduce using rule 55 (LVAL)
    $default  reduce using rule 64 (expr)


State 56

   65 expr: INTEGER .

    $default  reduce using rule 65 (expr)


State 57

   67 expr: CHAR .

    $default  reduce using rule 67 (expr)


State 58

   68 expr: STRING .

    $default  reduce using rule 68 (expr)


State 59

   66 expr: HEX_INTEGER .

    $default  reduce using rule 66 (expr)


State 60

   51 ARRAY2: ARRAY2 . M_LBR expr M_RBR
   54 LVAL: ARRAY2 .
   69 expr: ARRAY2 .

    M_LBR  shift, and go to state 94

    LOP_ASS   reduce using rule 54 (LVAL)
    ADD_ASS   reduce using rule 54 (LVAL)
    SUB_ASS   reduce using rule 54 (LVAL)
    MUL_ASS   reduce using rule 54 (LVAL)
    DIV_ASS   reduce using rule 54 (LVAL)
    SUR_ASS   reduce using rule 54 (LVAL)
    LS_ASS    reduce using rule 54 (LVAL)
    RS_ASS    reduce using rule 54 (LVAL)
    AND_ASS   reduce using rule 54 (LVAL)
    OR_ASS    reduce using rule 54 (LVAL)
    XOR_ASS   reduce using rule 54 (LVAL)
    $default  reduce using rule 69 (expr)


State 61

   56 LVAL: struct_mem .
   70 expr: struct_mem .

    LOP_ASS   reduce using rule 56 (LVAL)
    ADD_ASS   reduce using rule 56 (LVAL)
    SUB_ASS   reduce using rule 56 (LVAL)
    MUL_ASS   reduce using rule 56 (LVAL)
    DIV_ASS   reduce using rule 56 (LVAL)
    SUR_ASS   reduce using rule 56 (LVAL)
    LS_ASS    reduce using rule 56 (LVAL)
    RS_ASS    reduce using rule 56 (LVAL)
    AND_ASS   reduce using rule 56 (LVAL)
    OR_ASS    reduce using rule 56 (LVAL)
    XOR_ASS   reduce using rule 56 (LVAL)
    $default  reduce using rule 70 (expr)


State 62

   90 expr: LVAL . LOP_ASS expr
   91     | LVAL . ADD_ASS expr
   92     | LVAL . SUB_ASS expr
   93     | LVAL . MUL_ASS expr
   94     | LVAL . DIV_ASS expr
   95     | LVAL . SUR_ASS expr
   96     | LVAL . LS_ASS expr
   97     | LVAL . RS_ASS expr
   98     | LVAL . OR_ASS expr
   99     | LVAL . AND_ASS expr
  100     | LVAL . XOR_ASS expr

    LOP_ASS  shift, and go to state 95
    ADD_ASS  shift, and go to state 96
    SUB_ASS  shift, and go to state 97
    MUL_ASS  shift, and go to state 98
    DIV_ASS  shift, and go to state 99
    SUR_ASS  shift, and go to state 100
    LS_ASS   shift, and go to state 101
    RS_ASS   shift, and go to state 102
    AND_ASS  shift, and go to state 103
    OR_ASS   shift, and go to state 104
    XOR_ASS  shift, and go to state 105


State 63

   58 decl_item: IDENTIFIER LOP_ASS expr .
   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125

    $default  reduce using rule 58 (decl_item)


State 64

   46 CONST_EXP: SUB . CONST_EXP

    SUB      shift, and go to state 64
    LEFTBR   shift, and go to state 65
    INTEGER  shift, and go to state 66

    CONST_EXP  go to state 126


State 65

   47 CONST_EXP: LEFTBR . CONST_EXP RIGHTBR

    SUB      shift, and go to state 64
    LEFTBR   shift, and go to state 65
    INTEGER  shift, and go to state 66

    CONST_EXP  go to state 127


State 66

   40 CONST_EXP: INTEGER .

    $default  reduce using rule 40 (CONST_EXP)


State 67

   41 CONST_EXP: CONST_EXP . ADD CONST_EXP
   42          | CONST_EXP . SUB CONST_EXP
   43          | CONST_EXP . MUL CONST_EXP
   44          | CONST_EXP . DIV CONST_EXP
   45          | CONST_EXP . LSHIFT CONST_EXP
   48 ARRAY: IDENTIFIER M_LBR CONST_EXP . M_RBR

    LSHIFT  shift, and go to state 128
    ADD     shift, and go to state 129
    SUB     shift, and go to state 130
    MUL     shift, and go to state 131
    DIV     shift, and go to state 132
    M_RBR   shift, and go to state 133


State 68

   10 function: T IDENTIFIER for_LEFTBR PARMS . for_RIGHTBR block
   12 PARMS: PARMS . COMMA T IDENTIFIER

    RIGHTBR  shift, and go to state 134
    COMMA    shift, and go to state 135

    for_RIGHTBR  go to state 136


State 69

   11 PARMS: T . IDENTIFIER

    IDENTIFIER  shift, and go to state 137


State 70

   41 CONST_EXP: CONST_EXP . ADD CONST_EXP
   42          | CONST_EXP . SUB CONST_EXP
   43          | CONST_EXP . MUL CONST_EXP
   44          | CONST_EXP . DIV CONST_EXP
   45          | CONST_EXP . LSHIFT CONST_EXP
   49 ARRAY: ARRAY M_LBR CONST_EXP . M_RBR

    LSHIFT  shift, and go to state 128
    ADD     shift, and go to state 129
    SUB     shift, and go to state 130
    MUL     shift, and go to state 131
    DIV     shift, and go to state 132
    M_RBR   shift, and go to state 138


State 71

   57 decl_item: IDENTIFIER .
   58          | IDENTIFIER . LOP_ASS expr

    LOP_ASS  shift, and go to state 33

    $default  reduce using rule 57 (decl_item)


State 72

   60 IDENTIFIERS: IDENTIFIERS COMMA decl_item .

    $default  reduce using rule 60 (IDENTIFIERS)


State 73

   38 declaration: CONST T_CHAR IDENTIFIER LOP_ASS CHAR .

    $default  reduce using rule 38 (declaration)


State 74

   37 declaration: CONST T_INT IDENTIFIER LOP_ASS CONST_EXP .
   41 CONST_EXP: CONST_EXP . ADD CONST_EXP
   42          | CONST_EXP . SUB CONST_EXP
   43          | CONST_EXP . MUL CONST_EXP
   44          | CONST_EXP . DIV CONST_EXP
   45          | CONST_EXP . LSHIFT CONST_EXP

    LSHIFT  shift, and go to state 128
    ADD     shift, and go to state 129
    SUB     shift, and go to state 130
    MUL     shift, and go to state 131
    DIV     shift, and go to state 132

    $default  reduce using rule 37 (declaration)


State 75

   39 declaration: CONST T_BOOL IDENTIFIER LOP_ASS INTEGER .

    $default  reduce using rule 39 (declaration)


State 76

  119 T1: STRUCT IDENTIFIER .

    $default  reduce using rule 119 (T1)


State 77

    9 struct: STRUCT IDENTIFIER LBRACE struct_items RBRACE .

    $default  reduce using rule 9 (struct)


State 78

    8 struct_items: struct_items declaration . SEMICOLON

    SEMICOLON  shift, and go to state 139


State 79

    7 struct_items: declaration SEMICOLON .

    $default  reduce using rule 7 (struct_items)


State 80

   48 ARRAY: IDENTIFIER . M_LBR CONST_EXP M_RBR
   57 decl_item: IDENTIFIER .
   58          | IDENTIFIER . LOP_ASS expr

    LOP_ASS  shift, and go to state 33
    M_LBR    shift, and go to state 35

    $default  reduce using rule 57 (decl_item)


State 81

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  105     | BIT_AND expr .
  109     | expr . INCR
  110     | expr . DECR

    INCR  shift, and go to state 124
    DECR  shift, and go to state 125

    $default  reduce using rule 105 (expr)


State 82

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  102     | ADD expr .
  109     | expr . INCR
  110     | expr . DECR

    INCR  shift, and go to state 124
    DECR  shift, and go to state 125

    $default  reduce using rule 102 (expr)


State 83

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  101     | SUB expr .
  109     | expr . INCR
  110     | expr . DECR

    INCR  shift, and go to state 124
    DECR  shift, and go to state 125

    $default  reduce using rule 101 (expr)


State 84

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  106     | MUL expr .
  109     | expr . INCR
  110     | expr . DECR

    INCR  shift, and go to state 124
    DECR  shift, and go to state 125

    $default  reduce using rule 106 (expr)


State 85

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR
  111     | LEFTBR expr . RIGHTBR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    RIGHTBR  shift, and go to state 140
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125


State 86

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  103     | LOG_NOT expr .
  109     | expr . INCR
  110     | expr . DECR

    INCR  shift, and go to state 124
    DECR  shift, and go to state 125

    $default  reduce using rule 103 (expr)


State 87

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  104     | BIT_NOT expr .
  109     | expr . INCR
  110     | expr . DECR

    INCR  shift, and go to state 124
    DECR  shift, and go to state 125

    $default  reduce using rule 104 (expr)


State 88

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  107     | INCR expr .
  109     | expr . INCR
  110     | expr . DECR

    INCR  shift, and go to state 124
    DECR  shift, and go to state 125

    $default  reduce using rule 107 (expr)


State 89

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  108     | DECR expr .
  109     | expr . INCR
  110     | expr . DECR

    INCR  shift, and go to state 124
    DECR  shift, and go to state 125

    $default  reduce using rule 108 (expr)


State 90

   71 expr: IDENTIFIER LEFTBR . PAS RIGHTBR

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    $default  reduce using rule 61 (PAS)

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    PAS         go to state 141
    expr        go to state 142


State 91

   52 struct_mem: IDENTIFIER ST_MB . IDENTIFIER

    IDENTIFIER  shift, and go to state 143


State 92

   53 struct_mem: IDENTIFIER STP_MB . IDENTIFIER

    IDENTIFIER  shift, and go to state 144


State 93

   50 ARRAY2: IDENTIFIER M_LBR . expr M_RBR

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 145


State 94

   51 ARRAY2: ARRAY2 M_LBR . expr M_RBR

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 146


State 95

   90 expr: LVAL LOP_ASS . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 147


State 96

   91 expr: LVAL ADD_ASS . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 148


State 97

   92 expr: LVAL SUB_ASS . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 149


State 98

   93 expr: LVAL MUL_ASS . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 150


State 99

   94 expr: LVAL DIV_ASS . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 151


State 100

   95 expr: LVAL SUR_ASS . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 152


State 101

   96 expr: LVAL LS_ASS . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 153


State 102

   97 expr: LVAL RS_ASS . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 154


State 103

   99 expr: LVAL AND_ASS . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 155


State 104

   98 expr: LVAL OR_ASS . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 156


State 105

  100 expr: LVAL XOR_ASS . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 157


State 106

   89 expr: expr LOG_OR . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 158


State 107

   88 expr: expr LOG_AND . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 159


State 108

   80 expr: expr BIT_OR . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 160


State 109

   81 expr: expr BIT_XOR . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 161


State 110

   79 expr: expr BIT_AND . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 162


State 111

   82 expr: expr EQ . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 163


State 112

   83 expr: expr UEQ . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 164


State 113

   85 expr: expr GT . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 165


State 114

   84 expr: expr LT . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 166


State 115

   87 expr: expr GE . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 167


State 116

   86 expr: expr LE . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 168


State 117

   77 expr: expr LSHIFT . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 169


State 118

   78 expr: expr RSHIFT . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 170


State 119

   72 expr: expr ADD . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 171


State 120

   73 expr: expr SUB . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 172


State 121

   74 expr: expr MUL . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 173


State 122

   75 expr: expr DIV . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 174


State 123

   76 expr: expr SUR . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 175


State 124

  109 expr: expr INCR .

    $default  reduce using rule 109 (expr)


State 125

  110 expr: expr DECR .

    $default  reduce using rule 110 (expr)


State 126

   41 CONST_EXP: CONST_EXP . ADD CONST_EXP
   42          | CONST_EXP . SUB CONST_EXP
   43          | CONST_EXP . MUL CONST_EXP
   44          | CONST_EXP . DIV CONST_EXP
   45          | CONST_EXP . LSHIFT CONST_EXP
   46          | SUB CONST_EXP .

    $default  reduce using rule 46 (CONST_EXP)


State 127

   41 CONST_EXP: CONST_EXP . ADD CONST_EXP
   42          | CONST_EXP . SUB CONST_EXP
   43          | CONST_EXP . MUL CONST_EXP
   44          | CONST_EXP . DIV CONST_EXP
   45          | CONST_EXP . LSHIFT CONST_EXP
   47          | LEFTBR CONST_EXP . RIGHTBR

    LSHIFT   shift, and go to state 128
    ADD      shift, and go to state 129
    SUB      shift, and go to state 130
    MUL      shift, and go to state 131
    DIV      shift, and go to state 132
    RIGHTBR  shift, and go to state 176


State 128

   45 CONST_EXP: CONST_EXP LSHIFT . CONST_EXP

    SUB      shift, and go to state 64
    LEFTBR   shift, and go to state 65
    INTEGER  shift, and go to state 66

    CONST_EXP  go to state 177


State 129

   41 CONST_EXP: CONST_EXP ADD . CONST_EXP

    SUB      shift, and go to state 64
    LEFTBR   shift, and go to state 65
    INTEGER  shift, and go to state 66

    CONST_EXP  go to state 178


State 130

   42 CONST_EXP: CONST_EXP SUB . CONST_EXP

    SUB      shift, and go to state 64
    LEFTBR   shift, and go to state 65
    INTEGER  shift, and go to state 66

    CONST_EXP  go to state 179


State 131

   43 CONST_EXP: CONST_EXP MUL . CONST_EXP

    SUB      shift, and go to state 64
    LEFTBR   shift, and go to state 65
    INTEGER  shift, and go to state 66

    CONST_EXP  go to state 180


State 132

   44 CONST_EXP: CONST_EXP DIV . CONST_EXP

    SUB      shift, and go to state 64
    LEFTBR   shift, and go to state 65
    INTEGER  shift, and go to state 66

    CONST_EXP  go to state 181


State 133

   48 ARRAY: IDENTIFIER M_LBR CONST_EXP M_RBR .

    $default  reduce using rule 48 (ARRAY)


State 134

   34 for_RIGHTBR: RIGHTBR .

    $default  reduce using rule 34 (for_RIGHTBR)


State 135

   12 PARMS: PARMS COMMA . T IDENTIFIER

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    STRUCT    shift, and go to state 42

    T   go to state 182
    T1  go to state 15


State 136

   10 function: T IDENTIFIER for_LEFTBR PARMS for_RIGHTBR . block

    LBRACE  shift, and go to state 183

    block  go to state 184


State 137

   11 PARMS: T IDENTIFIER .

    $default  reduce using rule 11 (PARMS)


State 138

   49 ARRAY: ARRAY M_LBR CONST_EXP M_RBR .

    $default  reduce using rule 49 (ARRAY)


State 139

    8 struct_items: struct_items declaration SEMICOLON .

    $default  reduce using rule 8 (struct_items)


State 140

  111 expr: LEFTBR expr RIGHTBR .

    $default  reduce using rule 111 (expr)


State 141

   62 PAS: PAS . COMMA expr
   71 expr: IDENTIFIER LEFTBR PAS . RIGHTBR

    RIGHTBR  shift, and go to state 185
    COMMA    shift, and go to state 186


State 142

   63 PAS: expr .
   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125

    $default  reduce using rule 63 (PAS)


State 143

   52 struct_mem: IDENTIFIER ST_MB IDENTIFIER .

    $default  reduce using rule 52 (struct_mem)


State 144

   53 struct_mem: IDENTIFIER STP_MB IDENTIFIER .

    $default  reduce using rule 53 (struct_mem)


State 145

   50 ARRAY2: IDENTIFIER M_LBR expr . M_RBR
   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125
    M_RBR    shift, and go to state 187


State 146

   51 ARRAY2: ARRAY2 M_LBR expr . M_RBR
   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125
    M_RBR    shift, and go to state 188


State 147

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
   90     | LVAL LOP_ASS expr .
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125

    $default  reduce using rule 90 (expr)


State 148

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
   91     | LVAL ADD_ASS expr .
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125

    $default  reduce using rule 91 (expr)


State 149

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
   92     | LVAL SUB_ASS expr .
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125

    $default  reduce using rule 92 (expr)


State 150

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
   93     | LVAL MUL_ASS expr .
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125

    $default  reduce using rule 93 (expr)


State 151

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
   94     | LVAL DIV_ASS expr .
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125

    $default  reduce using rule 94 (expr)


State 152

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
   95     | LVAL SUR_ASS expr .
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125

    $default  reduce using rule 95 (expr)


State 153

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
   96     | LVAL LS_ASS expr .
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125

    $default  reduce using rule 96 (expr)


State 154

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
   97     | LVAL RS_ASS expr .
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125

    $default  reduce using rule 97 (expr)


State 155

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
   99     | LVAL AND_ASS expr .
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125

    $default  reduce using rule 99 (expr)


State 156

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
   98     | LVAL OR_ASS expr .
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125

    $default  reduce using rule 98 (expr)


State 157

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  100     | LVAL XOR_ASS expr .
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125

    $default  reduce using rule 100 (expr)


State 158

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
   89     | expr LOG_OR expr .
  109     | expr . INCR
  110     | expr . DECR

    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125

    $default  reduce using rule 89 (expr)


State 159

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   88     | expr LOG_AND expr .
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125

    $default  reduce using rule 88 (expr)


State 160

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   80     | expr BIT_OR expr .
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125

    $default  reduce using rule 80 (expr)


State 161

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   81     | expr BIT_XOR expr .
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125

    $default  reduce using rule 81 (expr)


State 162

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   79     | expr BIT_AND expr .
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    EQ      shift, and go to state 111
    UEQ     shift, and go to state 112
    GT      shift, and go to state 113
    LT      shift, and go to state 114
    GE      shift, and go to state 115
    LE      shift, and go to state 116
    LSHIFT  shift, and go to state 117
    RSHIFT  shift, and go to state 118
    ADD     shift, and go to state 119
    SUB     shift, and go to state 120
    MUL     shift, and go to state 121
    DIV     shift, and go to state 122
    SUR     shift, and go to state 123
    INCR    shift, and go to state 124
    DECR    shift, and go to state 125

    $default  reduce using rule 79 (expr)


State 163

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   82     | expr EQ expr .
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    GT      shift, and go to state 113
    LT      shift, and go to state 114
    GE      shift, and go to state 115
    LE      shift, and go to state 116
    LSHIFT  shift, and go to state 117
    RSHIFT  shift, and go to state 118
    ADD     shift, and go to state 119
    SUB     shift, and go to state 120
    MUL     shift, and go to state 121
    DIV     shift, and go to state 122
    SUR     shift, and go to state 123
    INCR    shift, and go to state 124
    DECR    shift, and go to state 125

    $default  reduce using rule 82 (expr)


State 164

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   83     | expr UEQ expr .
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    GT      shift, and go to state 113
    LT      shift, and go to state 114
    GE      shift, and go to state 115
    LE      shift, and go to state 116
    LSHIFT  shift, and go to state 117
    RSHIFT  shift, and go to state 118
    ADD     shift, and go to state 119
    SUB     shift, and go to state 120
    MUL     shift, and go to state 121
    DIV     shift, and go to state 122
    SUR     shift, and go to state 123
    INCR    shift, and go to state 124
    DECR    shift, and go to state 125

    $default  reduce using rule 83 (expr)


State 165

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   85     | expr GT expr .
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    LSHIFT  shift, and go to state 117
    RSHIFT  shift, and go to state 118
    ADD     shift, and go to state 119
    SUB     shift, and go to state 120
    MUL     shift, and go to state 121
    DIV     shift, and go to state 122
    SUR     shift, and go to state 123
    INCR    shift, and go to state 124
    DECR    shift, and go to state 125

    $default  reduce using rule 85 (expr)


State 166

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   84     | expr LT expr .
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    LSHIFT  shift, and go to state 117
    RSHIFT  shift, and go to state 118
    ADD     shift, and go to state 119
    SUB     shift, and go to state 120
    MUL     shift, and go to state 121
    DIV     shift, and go to state 122
    SUR     shift, and go to state 123
    INCR    shift, and go to state 124
    DECR    shift, and go to state 125

    $default  reduce using rule 84 (expr)


State 167

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   87     | expr GE expr .
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    LSHIFT  shift, and go to state 117
    RSHIFT  shift, and go to state 118
    ADD     shift, and go to state 119
    SUB     shift, and go to state 120
    MUL     shift, and go to state 121
    DIV     shift, and go to state 122
    SUR     shift, and go to state 123
    INCR    shift, and go to state 124
    DECR    shift, and go to state 125

    $default  reduce using rule 87 (expr)


State 168

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   86     | expr LE expr .
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    LSHIFT  shift, and go to state 117
    RSHIFT  shift, and go to state 118
    ADD     shift, and go to state 119
    SUB     shift, and go to state 120
    MUL     shift, and go to state 121
    DIV     shift, and go to state 122
    SUR     shift, and go to state 123
    INCR    shift, and go to state 124
    DECR    shift, and go to state 125

    $default  reduce using rule 86 (expr)


State 169

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   77     | expr LSHIFT expr .
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    ADD   shift, and go to state 119
    SUB   shift, and go to state 120
    MUL   shift, and go to state 121
    DIV   shift, and go to state 122
    SUR   shift, and go to state 123
    INCR  shift, and go to state 124
    DECR  shift, and go to state 125

    $default  reduce using rule 77 (expr)


State 170

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   78     | expr RSHIFT expr .
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    ADD   shift, and go to state 119
    SUB   shift, and go to state 120
    MUL   shift, and go to state 121
    DIV   shift, and go to state 122
    SUR   shift, and go to state 123
    INCR  shift, and go to state 124
    DECR  shift, and go to state 125

    $default  reduce using rule 78 (expr)


State 171

   72 expr: expr . ADD expr
   72     | expr ADD expr .
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    MUL   shift, and go to state 121
    DIV   shift, and go to state 122
    SUR   shift, and go to state 123
    INCR  shift, and go to state 124
    DECR  shift, and go to state 125

    $default  reduce using rule 72 (expr)


State 172

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   73     | expr SUB expr .
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    MUL   shift, and go to state 121
    DIV   shift, and go to state 122
    SUR   shift, and go to state 123
    INCR  shift, and go to state 124
    DECR  shift, and go to state 125

    $default  reduce using rule 73 (expr)


State 173

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   74     | expr MUL expr .
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    INCR  shift, and go to state 124
    DECR  shift, and go to state 125

    $default  reduce using rule 74 (expr)


State 174

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   75     | expr DIV expr .
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    INCR  shift, and go to state 124
    DECR  shift, and go to state 125

    $default  reduce using rule 75 (expr)


State 175

   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   76     | expr SUR expr .
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    INCR  shift, and go to state 124
    DECR  shift, and go to state 125

    $default  reduce using rule 76 (expr)


State 176

   47 CONST_EXP: LEFTBR CONST_EXP RIGHTBR .

    $default  reduce using rule 47 (CONST_EXP)


State 177

   41 CONST_EXP: CONST_EXP . ADD CONST_EXP
   42          | CONST_EXP . SUB CONST_EXP
   43          | CONST_EXP . MUL CONST_EXP
   44          | CONST_EXP . DIV CONST_EXP
   45          | CONST_EXP . LSHIFT CONST_EXP
   45          | CONST_EXP LSHIFT CONST_EXP .

    ADD  shift, and go to state 129
    SUB  shift, and go to state 130
    MUL  shift, and go to state 131
    DIV  shift, and go to state 132

    $default  reduce using rule 45 (CONST_EXP)


State 178

   41 CONST_EXP: CONST_EXP . ADD CONST_EXP
   41          | CONST_EXP ADD CONST_EXP .
   42          | CONST_EXP . SUB CONST_EXP
   43          | CONST_EXP . MUL CONST_EXP
   44          | CONST_EXP . DIV CONST_EXP
   45          | CONST_EXP . LSHIFT CONST_EXP

    MUL  shift, and go to state 131
    DIV  shift, and go to state 132

    $default  reduce using rule 41 (CONST_EXP)


State 179

   41 CONST_EXP: CONST_EXP . ADD CONST_EXP
   42          | CONST_EXP . SUB CONST_EXP
   42          | CONST_EXP SUB CONST_EXP .
   43          | CONST_EXP . MUL CONST_EXP
   44          | CONST_EXP . DIV CONST_EXP
   45          | CONST_EXP . LSHIFT CONST_EXP

    MUL  shift, and go to state 131
    DIV  shift, and go to state 132

    $default  reduce using rule 42 (CONST_EXP)


State 180

   41 CONST_EXP: CONST_EXP . ADD CONST_EXP
   42          | CONST_EXP . SUB CONST_EXP
   43          | CONST_EXP . MUL CONST_EXP
   43          | CONST_EXP MUL CONST_EXP .
   44          | CONST_EXP . DIV CONST_EXP
   45          | CONST_EXP . LSHIFT CONST_EXP

    $default  reduce using rule 43 (CONST_EXP)


State 181

   41 CONST_EXP: CONST_EXP . ADD CONST_EXP
   42          | CONST_EXP . SUB CONST_EXP
   43          | CONST_EXP . MUL CONST_EXP
   44          | CONST_EXP . DIV CONST_EXP
   44          | CONST_EXP DIV CONST_EXP .
   45          | CONST_EXP . LSHIFT CONST_EXP

    $default  reduce using rule 44 (CONST_EXP)


State 182

   12 PARMS: PARMS COMMA T . IDENTIFIER

    IDENTIFIER  shift, and go to state 189


State 183

   18 block: LBRACE . block_items RBRACE

    $default  reduce using rule 16 (block_items)

    block_items  go to state 190


State 184

   10 function: T IDENTIFIER for_LEFTBR PARMS for_RIGHTBR block .

    $default  reduce using rule 10 (function)


State 185

   71 expr: IDENTIFIER LEFTBR PAS RIGHTBR .

    $default  reduce using rule 71 (expr)


State 186

   62 PAS: PAS COMMA . expr

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 191


State 187

   50 ARRAY2: IDENTIFIER M_LBR expr M_RBR .

    $default  reduce using rule 50 (ARRAY2)


State 188

   51 ARRAY2: ARRAY2 M_LBR expr M_RBR .

    $default  reduce using rule 51 (ARRAY2)


State 189

   12 PARMS: PARMS COMMA T IDENTIFIER .

    $default  reduce using rule 12 (PARMS)


State 190

   17 block_items: block_items . block_item
   18 block: LBRACE block_items . RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    LBRACE       shift, and go to state 183
    RBRACE       shift, and go to state 192
    SEMICOLON    shift, and go to state 193
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59
    IF           shift, and go to state 194
    WHILE        shift, and go to state 195
    FOR          shift, and go to state 196
    RETURN       shift, and go to state 197
    CONST        shift, and go to state 6
    BREAK        shift, and go to state 198
    CONTINUE     shift, and go to state 199
    STRUCT       shift, and go to state 42

    block_item   go to state 200
    block        go to state 201
    statement    go to state 202
    declaration  go to state 203
    ARRAY2       go to state 60
    struct_mem   go to state 61
    LVAL         go to state 62
    expr         go to state 204
    T            go to state 45
    T1           go to state 15


State 191

   62 PAS: PAS COMMA expr .
   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125

    $default  reduce using rule 62 (PAS)


State 192

   18 block: LBRACE block_items RBRACE .

    $default  reduce using rule 18 (block)


State 193

   19 statement: SEMICOLON .

    $default  reduce using rule 19 (statement)


State 194

   23 statement: IF . LEFTBR expr RIGHTBR statement
   24          | IF . LEFTBR expr RIGHTBR statement ELSE statement

    LEFTBR  shift, and go to state 205


State 195

   21 statement: WHILE . LEFTBR expr RIGHTBR statement

    LEFTBR  shift, and go to state 206


State 196

   22 statement: FOR . for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement

    LEFTBR  shift, and go to state 34

    for_LEFTBR  go to state 207


State 197

   25 statement: RETURN . expr SEMICOLON
   26          | RETURN . SEMICOLON

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    SEMICOLON    shift, and go to state 208
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 209


State 198

   27 statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 210


State 199

   28 statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 211


State 200

   17 block_items: block_items block_item .

    $default  reduce using rule 17 (block_items)


State 201

   20 statement: block .

    $default  reduce using rule 20 (statement)


State 202

   14 block_item: statement .

    $default  reduce using rule 14 (block_item)


State 203

   15 block_item: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 212


State 204

   29 statement: expr . SEMICOLON
   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR     shift, and go to state 106
    LOG_AND    shift, and go to state 107
    BIT_OR     shift, and go to state 108
    BIT_XOR    shift, and go to state 109
    BIT_AND    shift, and go to state 110
    EQ         shift, and go to state 111
    UEQ        shift, and go to state 112
    GT         shift, and go to state 113
    LT         shift, and go to state 114
    GE         shift, and go to state 115
    LE         shift, and go to state 116
    LSHIFT     shift, and go to state 117
    RSHIFT     shift, and go to state 118
    ADD        shift, and go to state 119
    SUB        shift, and go to state 120
    MUL        shift, and go to state 121
    DIV        shift, and go to state 122
    SUR        shift, and go to state 123
    INCR       shift, and go to state 124
    DECR       shift, and go to state 125
    SEMICOLON  shift, and go to state 213


State 205

   23 statement: IF LEFTBR . expr RIGHTBR statement
   24          | IF LEFTBR . expr RIGHTBR statement ELSE statement

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 214


State 206

   21 statement: WHILE LEFTBR . expr RIGHTBR statement

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59

    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 215


State 207

   22 statement: FOR for_LEFTBR . for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59
    CONST        shift, and go to state 6
    STRUCT       shift, and go to state 42

    $default  reduce using rule 32 (for_expr)

    for_expr     go to state 216
    declaration  go to state 217
    ARRAY2       go to state 60
    struct_mem   go to state 61
    LVAL         go to state 62
    expr         go to state 218
    T            go to state 45
    T1           go to state 15


State 208

   26 statement: RETURN SEMICOLON .

    $default  reduce using rule 26 (statement)


State 209

   25 statement: RETURN expr . SEMICOLON
   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR     shift, and go to state 106
    LOG_AND    shift, and go to state 107
    BIT_OR     shift, and go to state 108
    BIT_XOR    shift, and go to state 109
    BIT_AND    shift, and go to state 110
    EQ         shift, and go to state 111
    UEQ        shift, and go to state 112
    GT         shift, and go to state 113
    LT         shift, and go to state 114
    GE         shift, and go to state 115
    LE         shift, and go to state 116
    LSHIFT     shift, and go to state 117
    RSHIFT     shift, and go to state 118
    ADD        shift, and go to state 119
    SUB        shift, and go to state 120
    MUL        shift, and go to state 121
    DIV        shift, and go to state 122
    SUR        shift, and go to state 123
    INCR       shift, and go to state 124
    DECR       shift, and go to state 125
    SEMICOLON  shift, and go to state 219


State 210

   27 statement: BREAK SEMICOLON .

    $default  reduce using rule 27 (statement)


State 211

   28 statement: CONTINUE SEMICOLON .

    $default  reduce using rule 28 (statement)


State 212

   15 block_item: declaration SEMICOLON .

    $default  reduce using rule 15 (block_item)


State 213

   29 statement: expr SEMICOLON .

    $default  reduce using rule 29 (statement)


State 214

   23 statement: IF LEFTBR expr . RIGHTBR statement
   24          | IF LEFTBR expr . RIGHTBR statement ELSE statement
   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    RIGHTBR  shift, and go to state 220
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125


State 215

   21 statement: WHILE LEFTBR expr . RIGHTBR statement
   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    RIGHTBR  shift, and go to state 221
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125


State 216

   22 statement: FOR for_LEFTBR for_expr . SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement

    SEMICOLON  shift, and go to state 222


State 217

   30 for_expr: declaration .

    $default  reduce using rule 30 (for_expr)


State 218

   31 for_expr: expr .
   72 expr: expr . ADD expr
   73     | expr . SUB expr
   74     | expr . MUL expr
   75     | expr . DIV expr
   76     | expr . SUR expr
   77     | expr . LSHIFT expr
   78     | expr . RSHIFT expr
   79     | expr . BIT_AND expr
   80     | expr . BIT_OR expr
   81     | expr . BIT_XOR expr
   82     | expr . EQ expr
   83     | expr . UEQ expr
   84     | expr . LT expr
   85     | expr . GT expr
   86     | expr . LE expr
   87     | expr . GE expr
   88     | expr . LOG_AND expr
   89     | expr . LOG_OR expr
  109     | expr . INCR
  110     | expr . DECR

    LOG_OR   shift, and go to state 106
    LOG_AND  shift, and go to state 107
    BIT_OR   shift, and go to state 108
    BIT_XOR  shift, and go to state 109
    BIT_AND  shift, and go to state 110
    EQ       shift, and go to state 111
    UEQ      shift, and go to state 112
    GT       shift, and go to state 113
    LT       shift, and go to state 114
    GE       shift, and go to state 115
    LE       shift, and go to state 116
    LSHIFT   shift, and go to state 117
    RSHIFT   shift, and go to state 118
    ADD      shift, and go to state 119
    SUB      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    SUR      shift, and go to state 123
    INCR     shift, and go to state 124
    DECR     shift, and go to state 125

    $default  reduce using rule 31 (for_expr)


State 219

   25 statement: RETURN expr SEMICOLON .

    $default  reduce using rule 25 (statement)


State 220

   23 statement: IF LEFTBR expr RIGHTBR . statement
   24          | IF LEFTBR expr RIGHTBR . statement ELSE statement

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    LBRACE       shift, and go to state 183
    SEMICOLON    shift, and go to state 193
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59
    IF           shift, and go to state 194
    WHILE        shift, and go to state 195
    FOR          shift, and go to state 196
    RETURN       shift, and go to state 197
    BREAK        shift, and go to state 198
    CONTINUE     shift, and go to state 199

    block       go to state 201
    statement   go to state 223
    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 204


State 221

   21 statement: WHILE LEFTBR expr RIGHTBR . statement

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    LBRACE       shift, and go to state 183
    SEMICOLON    shift, and go to state 193
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59
    IF           shift, and go to state 194
    WHILE        shift, and go to state 195
    FOR          shift, and go to state 196
    RETURN       shift, and go to state 197
    BREAK        shift, and go to state 198
    CONTINUE     shift, and go to state 199

    block       go to state 201
    statement   go to state 224
    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 204


State 222

   22 statement: FOR for_LEFTBR for_expr SEMICOLON . for_expr SEMICOLON for_expr for_RIGHTBR statement

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59
    CONST        shift, and go to state 6
    STRUCT       shift, and go to state 42

    $default  reduce using rule 32 (for_expr)

    for_expr     go to state 225
    declaration  go to state 217
    ARRAY2       go to state 60
    struct_mem   go to state 61
    LVAL         go to state 62
    expr         go to state 218
    T            go to state 45
    T1           go to state 15


State 223

   23 statement: IF LEFTBR expr RIGHTBR statement .
   24          | IF LEFTBR expr RIGHTBR statement . ELSE statement

    ELSE  shift, and go to state 226

    $default  reduce using rule 23 (statement)


State 224

   21 statement: WHILE LEFTBR expr RIGHTBR statement .

    $default  reduce using rule 21 (statement)


State 225

   22 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr . SEMICOLON for_expr for_RIGHTBR statement

    SEMICOLON  shift, and go to state 227


State 226

   24 statement: IF LEFTBR expr RIGHTBR statement ELSE . statement

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    LBRACE       shift, and go to state 183
    SEMICOLON    shift, and go to state 193
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59
    IF           shift, and go to state 194
    WHILE        shift, and go to state 195
    FOR          shift, and go to state 196
    RETURN       shift, and go to state 197
    BREAK        shift, and go to state 198
    CONTINUE     shift, and go to state 199

    block       go to state 201
    statement   go to state 228
    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 204


State 227

   22 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON . for_expr for_RIGHTBR statement

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59
    CONST        shift, and go to state 6
    STRUCT       shift, and go to state 42

    $default  reduce using rule 32 (for_expr)

    for_expr     go to state 229
    declaration  go to state 217
    ARRAY2       go to state 60
    struct_mem   go to state 61
    LVAL         go to state 62
    expr         go to state 218
    T            go to state 45
    T1           go to state 15


State 228

   24 statement: IF LEFTBR expr RIGHTBR statement ELSE statement .

    $default  reduce using rule 24 (statement)


State 229

   22 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr . for_RIGHTBR statement

    RIGHTBR  shift, and go to state 134

    for_RIGHTBR  go to state 230


State 230

   22 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR . statement

    BIT_AND      shift, and go to state 46
    ADD          shift, and go to state 47
    SUB          shift, and go to state 48
    MUL          shift, and go to state 49
    LEFTBR       shift, and go to state 50
    LOG_NOT      shift, and go to state 51
    BIT_NOT      shift, and go to state 52
    INCR         shift, and go to state 53
    DECR         shift, and go to state 54
    LBRACE       shift, and go to state 183
    SEMICOLON    shift, and go to state 193
    IDENTIFIER   shift, and go to state 55
    INTEGER      shift, and go to state 56
    CHAR         shift, and go to state 57
    STRING       shift, and go to state 58
    HEX_INTEGER  shift, and go to state 59
    IF           shift, and go to state 194
    WHILE        shift, and go to state 195
    FOR          shift, and go to state 196
    RETURN       shift, and go to state 197
    BREAK        shift, and go to state 198
    CONTINUE     shift, and go to state 199

    block       go to state 201
    statement   go to state 231
    ARRAY2      go to state 60
    struct_mem  go to state 61
    LVAL        go to state 62
    expr        go to state 204


State 231

   22 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement .

    $default  reduce using rule 22 (statement)
