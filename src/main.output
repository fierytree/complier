Terminals unused in grammar

    BOOL


Grammar

    0 $accept: program $end

    1 program: units

    2 units: declaration SEMICOLON
    3      | function
    4      | units declaration SEMICOLON
    5      | units function

    6 function: T IDENTIFIER for_LEFTBR PARMS for_RIGHTBR block

    7 PARMS: T IDENTIFIER
    8      | PARMS COMMA T IDENTIFIER
    9      | %empty

   10 block_item: statement
   11           | declaration SEMICOLON

   12 block_items: block_item
   13            | block_items block_item

   14 block: LBRACE block_items RBRACE

   15 statement: SEMICOLON
   16          | block
   17          | WHILE LEFTBR expr RIGHTBR statement
   18          | FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement
   19          | IF LEFTBR expr RIGHTBR statement
   20          | RETURN expr SEMICOLON
   21          | RETURN SEMICOLON
   22          | expr SEMICOLON

   23 for_expr: declaration
   24         | expr
   25         | %empty

   26 for_LEFTBR: LEFTBR

   27 for_RIGHTBR: RIGHTBR

   28 declaration: T IDENTIFIER LOP_ASS expr
   29            | T IDENTIFIERS
   30            | T ARRAY
   31            | CONST T_INT IDENTIFIER LOP_ASS CONST_EXP
   32            | CONST T_CHAR IDENTIFIER LOP_ASS CHAR
   33            | CONST T_BOOL IDENTIFIER LOP_ASS INTEGER

   34 CONST_EXP: INTEGER
   35          | CONST_EXP ADD CONST_EXP
   36          | CONST_EXP SUB CONST_EXP
   37          | CONST_EXP MUL CONST_EXP
   38          | CONST_EXP DIV CONST_EXP
   39          | CONST_EXP LSHIFT CONST_EXP
   40          | SUB CONST_EXP
   41          | LEFTBR CONST_EXP RIGHTBR

   42 ARRAY: IDENTIFIER M_LBR CONST_EXP M_RBR
   43      | ARRAY M_LBR CONST_EXP M_RBR

   44 ARRAY2: IDENTIFIER M_LBR expr M_RBR
   45       | ARRAY2 M_LBR expr M_RBR

   46 LVAL: ARRAY2
   47     | IDENTIFIER

   48 IDENTIFIERS: IDENTIFIER
   49            | IDENTIFIERS COMMA IDENTIFIER

   50 PAS: expr
   51    | PAS COMMA expr

   52 expr: IDENTIFIER
   53     | INTEGER
   54     | HEX_INTEGER
   55     | CHAR
   56     | STRING
   57     | IDENTIFIER LEFTBR PAS RIGHTBR
   58     | IDENTIFIER LEFTBR RIGHTBR
   59     | expr ADD expr
   60     | expr SUB expr
   61     | expr MUL expr
   62     | expr DIV expr
   63     | expr SUR expr
   64     | expr LSHIFT expr
   65     | expr RSHIFT expr
   66     | expr BIT_AND expr
   67     | expr BIT_OR expr
   68     | expr BIT_XOR expr
   69     | expr EQ expr
   70     | expr UEQ expr
   71     | expr LT expr
   72     | expr GT expr
   73     | expr LE expr
   74     | expr GE expr
   75     | expr LOG_AND expr
   76     | expr LOG_OR expr
   77     | LVAL LOP_ASS expr
   78     | LVAL ADD_ASS expr
   79     | LVAL SUB_ASS expr
   80     | LVAL MUL_ASS expr
   81     | LVAL DIV_ASS expr
   82     | LVAL SUR_ASS expr
   83     | LVAL LS_ASS expr
   84     | LVAL RS_ASS expr
   85     | LVAL OR_ASS expr
   86     | LVAL AND_ASS expr
   87     | LVAL XOR_ASS expr
   88     | SUB expr
   89     | ADD expr
   90     | LOG_NOT expr
   91     | BIT_NOT expr
   92     | BIT_AND expr
   93     | INCR expr
   94     | DECR expr
   95     | expr INCR
   96     | expr DECR
   97     | LEFTBR expr RIGHTBR

   98 T: T_INT
   99  | T_CHAR
  100  | T_BOOL
  101  | T_STRING
  102  | T_VOID


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    T_CHAR (258) 32 99
    T_INT (259) 31 98
    T_STRING (260) 101
    T_BOOL (261) 33 100
    T_VOID (262) 102
    LOP_ASS (263) 28 31 32 33 77
    ADD_ASS (264) 78
    SUB_ASS (265) 79
    MUL_ASS (266) 80
    DIV_ASS (267) 81
    SUR_ASS (268) 82
    LS_ASS (269) 83
    RS_ASS (270) 84
    AND_ASS (271) 86
    OR_ASS (272) 85
    XOR_ASS (273) 87
    LOG_OR (274) 76
    LOG_AND (275) 75
    BIT_OR (276) 67
    BIT_XOR (277) 68
    BIT_AND (278) 66 92
    EQ (279) 69
    UEQ (280) 70
    GT (281) 72
    LT (282) 71
    GE (283) 74
    LE (284) 73
    LSHIFT (285) 39 64
    RSHIFT (286) 65
    ADD (287) 35 59 89
    SUB (288) 36 40 60 88
    MUL (289) 37 61
    DIV (290) 38 62
    SUR (291) 63
    BIT_NOT (292) 91
    LOG_NOT (293) 90
    INCR (294) 93 95
    DECR (295) 94 96
    LEFTBR (296) 17 19 26 41 57 58 97
    RIGHTBR (297) 17 19 27 41 57 58 97
    LBRACE (298) 14
    RBRACE (299) 14
    M_LBR (300) 42 43 44 45
    M_RBR (301) 42 43 44 45
    SEMICOLON (302) 2 4 11 15 18 20 21 22
    COMMA (303) 8 49 51
    IDENTIFIER (304) 6 7 8 28 31 32 33 42 44 47 48 49 52 57 58
    INTEGER (305) 33 34 53
    CHAR (306) 32 55
    BOOL (307)
    STRING (308) 56
    HEX_INTEGER (309) 54
    IF (310) 19
    WHILE (311) 17
    FOR (312) 18
    RETURN (313) 20 21
    CONST (314) 31 32 33
    ADDR (315)
    UMINUS (316)
    UADD (317)
    BACK_INCR (318)
    BACK_DECR (319)


Nonterminals, with rules where they appear

    $accept (65)
        on left: 0
    program (66)
        on left: 1
        on right: 0
    units (67)
        on left: 2 3 4 5
        on right: 1 4 5
    function (68)
        on left: 6
        on right: 3 5
    PARMS (69)
        on left: 7 8 9
        on right: 6 8
    block_item (70)
        on left: 10 11
        on right: 12 13
    block_items (71)
        on left: 12 13
        on right: 13 14
    block (72)
        on left: 14
        on right: 6 16
    statement (73)
        on left: 15 16 17 18 19 20 21 22
        on right: 10 17 18 19
    for_expr (74)
        on left: 23 24 25
        on right: 18
    for_LEFTBR (75)
        on left: 26
        on right: 6 18
    for_RIGHTBR (76)
        on left: 27
        on right: 6 18
    declaration (77)
        on left: 28 29 30 31 32 33
        on right: 2 4 11 23
    CONST_EXP (78)
        on left: 34 35 36 37 38 39 40 41
        on right: 31 35 36 37 38 39 40 41 42 43
    ARRAY (79)
        on left: 42 43
        on right: 30 43
    ARRAY2 (80)
        on left: 44 45
        on right: 45 46
    LVAL (81)
        on left: 46 47
        on right: 77 78 79 80 81 82 83 84 85 86 87
    IDENTIFIERS (82)
        on left: 48 49
        on right: 29 49
    PAS (83)
        on left: 50 51
        on right: 51 57
    expr (84)
        on left: 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97
        on right: 17 19 20 22 24 28 44 45 50 51 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97
    T (85)
        on left: 98 99 100 101 102
        on right: 6 7 8 28 29 30


State 0

    0 $accept: . program $end

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    CONST     shift, and go to state 6

    program      go to state 7
    units        go to state 8
    function     go to state 9
    declaration  go to state 10
    T            go to state 11


State 1

   99 T: T_CHAR .

    $default  reduce using rule 99 (T)


State 2

   98 T: T_INT .

    $default  reduce using rule 98 (T)


State 3

  101 T: T_STRING .

    $default  reduce using rule 101 (T)


State 4

  100 T: T_BOOL .

    $default  reduce using rule 100 (T)


State 5

  102 T: T_VOID .

    $default  reduce using rule 102 (T)


State 6

   31 declaration: CONST . T_INT IDENTIFIER LOP_ASS CONST_EXP
   32            | CONST . T_CHAR IDENTIFIER LOP_ASS CHAR
   33            | CONST . T_BOOL IDENTIFIER LOP_ASS INTEGER

    T_CHAR  shift, and go to state 12
    T_INT   shift, and go to state 13
    T_BOOL  shift, and go to state 14


State 7

    0 $accept: program . $end

    $end  shift, and go to state 15


State 8

    1 program: units .
    4 units: units . declaration SEMICOLON
    5      | units . function

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    CONST     shift, and go to state 6

    $default  reduce using rule 1 (program)

    function     go to state 16
    declaration  go to state 17
    T            go to state 11


State 9

    3 units: function .

    $default  reduce using rule 3 (units)


State 10

    2 units: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 18


State 11

    6 function: T . IDENTIFIER for_LEFTBR PARMS for_RIGHTBR block
   28 declaration: T . IDENTIFIER LOP_ASS expr
   29            | T . IDENTIFIERS
   30            | T . ARRAY

    IDENTIFIER  shift, and go to state 19

    ARRAY        go to state 20
    IDENTIFIERS  go to state 21


State 12

   32 declaration: CONST T_CHAR . IDENTIFIER LOP_ASS CHAR

    IDENTIFIER  shift, and go to state 22


State 13

   31 declaration: CONST T_INT . IDENTIFIER LOP_ASS CONST_EXP

    IDENTIFIER  shift, and go to state 23


State 14

   33 declaration: CONST T_BOOL . IDENTIFIER LOP_ASS INTEGER

    IDENTIFIER  shift, and go to state 24


State 15

    0 $accept: program $end .

    $default  accept


State 16

    5 units: units function .

    $default  reduce using rule 5 (units)


State 17

    4 units: units declaration . SEMICOLON

    SEMICOLON  shift, and go to state 25


State 18

    2 units: declaration SEMICOLON .

    $default  reduce using rule 2 (units)


State 19

    6 function: T IDENTIFIER . for_LEFTBR PARMS for_RIGHTBR block
   28 declaration: T IDENTIFIER . LOP_ASS expr
   42 ARRAY: IDENTIFIER . M_LBR CONST_EXP M_RBR
   48 IDENTIFIERS: IDENTIFIER .

    LOP_ASS  shift, and go to state 26
    LEFTBR   shift, and go to state 27
    M_LBR    shift, and go to state 28

    $default  reduce using rule 48 (IDENTIFIERS)

    for_LEFTBR  go to state 29


State 20

   30 declaration: T ARRAY .
   43 ARRAY: ARRAY . M_LBR CONST_EXP M_RBR

    M_LBR  shift, and go to state 30

    $default  reduce using rule 30 (declaration)


State 21

   29 declaration: T IDENTIFIERS .
   49 IDENTIFIERS: IDENTIFIERS . COMMA IDENTIFIER

    COMMA  shift, and go to state 31

    $default  reduce using rule 29 (declaration)


State 22

   32 declaration: CONST T_CHAR IDENTIFIER . LOP_ASS CHAR

    LOP_ASS  shift, and go to state 32


State 23

   31 declaration: CONST T_INT IDENTIFIER . LOP_ASS CONST_EXP

    LOP_ASS  shift, and go to state 33


State 24

   33 declaration: CONST T_BOOL IDENTIFIER . LOP_ASS INTEGER

    LOP_ASS  shift, and go to state 34


State 25

    4 units: units declaration SEMICOLON .

    $default  reduce using rule 4 (units)


State 26

   28 declaration: T IDENTIFIER LOP_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 50


State 27

   26 for_LEFTBR: LEFTBR .

    $default  reduce using rule 26 (for_LEFTBR)


State 28

   42 ARRAY: IDENTIFIER M_LBR . CONST_EXP M_RBR

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 54


State 29

    6 function: T IDENTIFIER for_LEFTBR . PARMS for_RIGHTBR block

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5

    $default  reduce using rule 9 (PARMS)

    PARMS  go to state 55
    T      go to state 56


State 30

   43 ARRAY: ARRAY M_LBR . CONST_EXP M_RBR

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 57


State 31

   49 IDENTIFIERS: IDENTIFIERS COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 58


State 32

   32 declaration: CONST T_CHAR IDENTIFIER LOP_ASS . CHAR

    CHAR  shift, and go to state 59


State 33

   31 declaration: CONST T_INT IDENTIFIER LOP_ASS . CONST_EXP

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 60


State 34

   33 declaration: CONST T_BOOL IDENTIFIER LOP_ASS . INTEGER

    INTEGER  shift, and go to state 61


State 35

   92 expr: BIT_AND . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 62


State 36

   89 expr: ADD . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 63


State 37

   88 expr: SUB . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 64


State 38

   91 expr: BIT_NOT . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 65


State 39

   90 expr: LOG_NOT . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 66


State 40

   93 expr: INCR . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 67


State 41

   94 expr: DECR . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 68


State 42

   97 expr: LEFTBR . expr RIGHTBR

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 69


State 43

   44 ARRAY2: IDENTIFIER . M_LBR expr M_RBR
   47 LVAL: IDENTIFIER .
   52 expr: IDENTIFIER .
   57     | IDENTIFIER . LEFTBR PAS RIGHTBR
   58     | IDENTIFIER . LEFTBR RIGHTBR

    LEFTBR  shift, and go to state 70
    M_LBR   shift, and go to state 71

    LOP_ASS   reduce using rule 47 (LVAL)
    ADD_ASS   reduce using rule 47 (LVAL)
    SUB_ASS   reduce using rule 47 (LVAL)
    MUL_ASS   reduce using rule 47 (LVAL)
    DIV_ASS   reduce using rule 47 (LVAL)
    SUR_ASS   reduce using rule 47 (LVAL)
    LS_ASS    reduce using rule 47 (LVAL)
    RS_ASS    reduce using rule 47 (LVAL)
    AND_ASS   reduce using rule 47 (LVAL)
    OR_ASS    reduce using rule 47 (LVAL)
    XOR_ASS   reduce using rule 47 (LVAL)
    $default  reduce using rule 52 (expr)


State 44

   53 expr: INTEGER .

    $default  reduce using rule 53 (expr)


State 45

   55 expr: CHAR .

    $default  reduce using rule 55 (expr)


State 46

   56 expr: STRING .

    $default  reduce using rule 56 (expr)


State 47

   54 expr: HEX_INTEGER .

    $default  reduce using rule 54 (expr)


State 48

   45 ARRAY2: ARRAY2 . M_LBR expr M_RBR
   46 LVAL: ARRAY2 .

    M_LBR  shift, and go to state 72

    $default  reduce using rule 46 (LVAL)


State 49

   77 expr: LVAL . LOP_ASS expr
   78     | LVAL . ADD_ASS expr
   79     | LVAL . SUB_ASS expr
   80     | LVAL . MUL_ASS expr
   81     | LVAL . DIV_ASS expr
   82     | LVAL . SUR_ASS expr
   83     | LVAL . LS_ASS expr
   84     | LVAL . RS_ASS expr
   85     | LVAL . OR_ASS expr
   86     | LVAL . AND_ASS expr
   87     | LVAL . XOR_ASS expr

    LOP_ASS  shift, and go to state 73
    ADD_ASS  shift, and go to state 74
    SUB_ASS  shift, and go to state 75
    MUL_ASS  shift, and go to state 76
    DIV_ASS  shift, and go to state 77
    SUR_ASS  shift, and go to state 78
    LS_ASS   shift, and go to state 79
    RS_ASS   shift, and go to state 80
    AND_ASS  shift, and go to state 81
    OR_ASS   shift, and go to state 82
    XOR_ASS  shift, and go to state 83


State 50

   28 declaration: T IDENTIFIER LOP_ASS expr .
   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 28 (declaration)


State 51

   40 CONST_EXP: SUB . CONST_EXP

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 104


State 52

   41 CONST_EXP: LEFTBR . CONST_EXP RIGHTBR

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 105


State 53

   34 CONST_EXP: INTEGER .

    $default  reduce using rule 34 (CONST_EXP)


State 54

   35 CONST_EXP: CONST_EXP . ADD CONST_EXP
   36          | CONST_EXP . SUB CONST_EXP
   37          | CONST_EXP . MUL CONST_EXP
   38          | CONST_EXP . DIV CONST_EXP
   39          | CONST_EXP . LSHIFT CONST_EXP
   42 ARRAY: IDENTIFIER M_LBR CONST_EXP . M_RBR

    LSHIFT  shift, and go to state 106
    ADD     shift, and go to state 107
    SUB     shift, and go to state 108
    MUL     shift, and go to state 109
    DIV     shift, and go to state 110
    M_RBR   shift, and go to state 111


State 55

    6 function: T IDENTIFIER for_LEFTBR PARMS . for_RIGHTBR block
    8 PARMS: PARMS . COMMA T IDENTIFIER

    RIGHTBR  shift, and go to state 112
    COMMA    shift, and go to state 113

    for_RIGHTBR  go to state 114


State 56

    7 PARMS: T . IDENTIFIER

    IDENTIFIER  shift, and go to state 115


State 57

   35 CONST_EXP: CONST_EXP . ADD CONST_EXP
   36          | CONST_EXP . SUB CONST_EXP
   37          | CONST_EXP . MUL CONST_EXP
   38          | CONST_EXP . DIV CONST_EXP
   39          | CONST_EXP . LSHIFT CONST_EXP
   43 ARRAY: ARRAY M_LBR CONST_EXP . M_RBR

    LSHIFT  shift, and go to state 106
    ADD     shift, and go to state 107
    SUB     shift, and go to state 108
    MUL     shift, and go to state 109
    DIV     shift, and go to state 110
    M_RBR   shift, and go to state 116


State 58

   49 IDENTIFIERS: IDENTIFIERS COMMA IDENTIFIER .

    $default  reduce using rule 49 (IDENTIFIERS)


State 59

   32 declaration: CONST T_CHAR IDENTIFIER LOP_ASS CHAR .

    $default  reduce using rule 32 (declaration)


State 60

   31 declaration: CONST T_INT IDENTIFIER LOP_ASS CONST_EXP .
   35 CONST_EXP: CONST_EXP . ADD CONST_EXP
   36          | CONST_EXP . SUB CONST_EXP
   37          | CONST_EXP . MUL CONST_EXP
   38          | CONST_EXP . DIV CONST_EXP
   39          | CONST_EXP . LSHIFT CONST_EXP

    LSHIFT  shift, and go to state 106
    ADD     shift, and go to state 107
    SUB     shift, and go to state 108
    MUL     shift, and go to state 109
    DIV     shift, and go to state 110

    $default  reduce using rule 31 (declaration)


State 61

   33 declaration: CONST T_BOOL IDENTIFIER LOP_ASS INTEGER .

    $default  reduce using rule 33 (declaration)


State 62

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   92     | BIT_AND expr .
   95     | expr . INCR
   96     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 92 (expr)


State 63

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   89     | ADD expr .
   95     | expr . INCR
   96     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 89 (expr)


State 64

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   88     | SUB expr .
   95     | expr . INCR
   96     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 88 (expr)


State 65

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   91     | BIT_NOT expr .
   95     | expr . INCR
   96     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 91 (expr)


State 66

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   90     | LOG_NOT expr .
   95     | expr . INCR
   96     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 90 (expr)


State 67

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   93     | INCR expr .
   95     | expr . INCR
   96     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 93 (expr)


State 68

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   94     | DECR expr .
   95     | expr . INCR
   96     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 94 (expr)


State 69

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR
   97     | LEFTBR expr . RIGHTBR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103
    RIGHTBR  shift, and go to state 117


State 70

   57 expr: IDENTIFIER LEFTBR . PAS RIGHTBR
   58     | IDENTIFIER LEFTBR . RIGHTBR

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    RIGHTBR      shift, and go to state 118
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    PAS     go to state 119
    expr    go to state 120


State 71

   44 ARRAY2: IDENTIFIER M_LBR . expr M_RBR

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 121


State 72

   45 ARRAY2: ARRAY2 M_LBR . expr M_RBR

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 122


State 73

   77 expr: LVAL LOP_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 123


State 74

   78 expr: LVAL ADD_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 124


State 75

   79 expr: LVAL SUB_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 125


State 76

   80 expr: LVAL MUL_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 126


State 77

   81 expr: LVAL DIV_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 127


State 78

   82 expr: LVAL SUR_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 128


State 79

   83 expr: LVAL LS_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 129


State 80

   84 expr: LVAL RS_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 130


State 81

   86 expr: LVAL AND_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 131


State 82

   85 expr: LVAL OR_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 132


State 83

   87 expr: LVAL XOR_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 133


State 84

   76 expr: expr LOG_OR . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 134


State 85

   75 expr: expr LOG_AND . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 135


State 86

   67 expr: expr BIT_OR . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 136


State 87

   68 expr: expr BIT_XOR . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 137


State 88

   66 expr: expr BIT_AND . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 138


State 89

   69 expr: expr EQ . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 139


State 90

   70 expr: expr UEQ . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 140


State 91

   72 expr: expr GT . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 141


State 92

   71 expr: expr LT . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 142


State 93

   74 expr: expr GE . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 143


State 94

   73 expr: expr LE . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 144


State 95

   64 expr: expr LSHIFT . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 145


State 96

   65 expr: expr RSHIFT . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 146


State 97

   59 expr: expr ADD . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 147


State 98

   60 expr: expr SUB . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 148


State 99

   61 expr: expr MUL . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 149


State 100

   62 expr: expr DIV . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 150


State 101

   63 expr: expr SUR . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 151


State 102

   95 expr: expr INCR .

    $default  reduce using rule 95 (expr)


State 103

   96 expr: expr DECR .

    $default  reduce using rule 96 (expr)


State 104

   35 CONST_EXP: CONST_EXP . ADD CONST_EXP
   36          | CONST_EXP . SUB CONST_EXP
   37          | CONST_EXP . MUL CONST_EXP
   38          | CONST_EXP . DIV CONST_EXP
   39          | CONST_EXP . LSHIFT CONST_EXP
   40          | SUB CONST_EXP .

    $default  reduce using rule 40 (CONST_EXP)


State 105

   35 CONST_EXP: CONST_EXP . ADD CONST_EXP
   36          | CONST_EXP . SUB CONST_EXP
   37          | CONST_EXP . MUL CONST_EXP
   38          | CONST_EXP . DIV CONST_EXP
   39          | CONST_EXP . LSHIFT CONST_EXP
   41          | LEFTBR CONST_EXP . RIGHTBR

    LSHIFT   shift, and go to state 106
    ADD      shift, and go to state 107
    SUB      shift, and go to state 108
    MUL      shift, and go to state 109
    DIV      shift, and go to state 110
    RIGHTBR  shift, and go to state 152


State 106

   39 CONST_EXP: CONST_EXP LSHIFT . CONST_EXP

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 153


State 107

   35 CONST_EXP: CONST_EXP ADD . CONST_EXP

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 154


State 108

   36 CONST_EXP: CONST_EXP SUB . CONST_EXP

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 155


State 109

   37 CONST_EXP: CONST_EXP MUL . CONST_EXP

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 156


State 110

   38 CONST_EXP: CONST_EXP DIV . CONST_EXP

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 157


State 111

   42 ARRAY: IDENTIFIER M_LBR CONST_EXP M_RBR .

    $default  reduce using rule 42 (ARRAY)


State 112

   27 for_RIGHTBR: RIGHTBR .

    $default  reduce using rule 27 (for_RIGHTBR)


State 113

    8 PARMS: PARMS COMMA . T IDENTIFIER

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5

    T  go to state 158


State 114

    6 function: T IDENTIFIER for_LEFTBR PARMS for_RIGHTBR . block

    LBRACE  shift, and go to state 159

    block  go to state 160


State 115

    7 PARMS: T IDENTIFIER .

    $default  reduce using rule 7 (PARMS)


State 116

   43 ARRAY: ARRAY M_LBR CONST_EXP M_RBR .

    $default  reduce using rule 43 (ARRAY)


State 117

   97 expr: LEFTBR expr RIGHTBR .

    $default  reduce using rule 97 (expr)


State 118

   58 expr: IDENTIFIER LEFTBR RIGHTBR .

    $default  reduce using rule 58 (expr)


State 119

   51 PAS: PAS . COMMA expr
   57 expr: IDENTIFIER LEFTBR PAS . RIGHTBR

    RIGHTBR  shift, and go to state 161
    COMMA    shift, and go to state 162


State 120

   50 PAS: expr .
   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 50 (PAS)


State 121

   44 ARRAY2: IDENTIFIER M_LBR expr . M_RBR
   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103
    M_RBR    shift, and go to state 163


State 122

   45 ARRAY2: ARRAY2 M_LBR expr . M_RBR
   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103
    M_RBR    shift, and go to state 164


State 123

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   77     | LVAL LOP_ASS expr .
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 77 (expr)


State 124

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   78     | LVAL ADD_ASS expr .
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 78 (expr)


State 125

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   79     | LVAL SUB_ASS expr .
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 79 (expr)


State 126

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   80     | LVAL MUL_ASS expr .
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 80 (expr)


State 127

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   81     | LVAL DIV_ASS expr .
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 81 (expr)


State 128

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   82     | LVAL SUR_ASS expr .
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 82 (expr)


State 129

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   83     | LVAL LS_ASS expr .
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 83 (expr)


State 130

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   84     | LVAL RS_ASS expr .
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 84 (expr)


State 131

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   86     | LVAL AND_ASS expr .
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 86 (expr)


State 132

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   85     | LVAL OR_ASS expr .
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 85 (expr)


State 133

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   87     | LVAL XOR_ASS expr .
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 87 (expr)


State 134

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   76     | expr LOG_OR expr .
   95     | expr . INCR
   96     | expr . DECR

    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 76 (expr)


State 135

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   75     | expr LOG_AND expr .
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 75 (expr)


State 136

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   67     | expr BIT_OR expr .
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 67 (expr)


State 137

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   68     | expr BIT_XOR expr .
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 68 (expr)


State 138

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   66     | expr BIT_AND expr .
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    EQ      shift, and go to state 89
    UEQ     shift, and go to state 90
    GT      shift, and go to state 91
    LT      shift, and go to state 92
    GE      shift, and go to state 93
    LE      shift, and go to state 94
    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 66 (expr)


State 139

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   69     | expr EQ expr .
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    GT      shift, and go to state 91
    LT      shift, and go to state 92
    GE      shift, and go to state 93
    LE      shift, and go to state 94
    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 69 (expr)


State 140

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   70     | expr UEQ expr .
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    GT      shift, and go to state 91
    LT      shift, and go to state 92
    GE      shift, and go to state 93
    LE      shift, and go to state 94
    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 70 (expr)


State 141

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   72     | expr GT expr .
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 72 (expr)


State 142

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   71     | expr LT expr .
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 71 (expr)


State 143

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   74     | expr GE expr .
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 74 (expr)


State 144

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   73     | expr LE expr .
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 73 (expr)


State 145

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   64     | expr LSHIFT expr .
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    ADD   shift, and go to state 97
    SUB   shift, and go to state 98
    MUL   shift, and go to state 99
    DIV   shift, and go to state 100
    SUR   shift, and go to state 101
    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 64 (expr)


State 146

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   65     | expr RSHIFT expr .
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    ADD   shift, and go to state 97
    SUB   shift, and go to state 98
    MUL   shift, and go to state 99
    DIV   shift, and go to state 100
    SUR   shift, and go to state 101
    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 65 (expr)


State 147

   59 expr: expr . ADD expr
   59     | expr ADD expr .
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    MUL   shift, and go to state 99
    DIV   shift, and go to state 100
    SUR   shift, and go to state 101
    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 59 (expr)


State 148

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   60     | expr SUB expr .
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    MUL   shift, and go to state 99
    DIV   shift, and go to state 100
    SUR   shift, and go to state 101
    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 60 (expr)


State 149

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   61     | expr MUL expr .
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 61 (expr)


State 150

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   62     | expr DIV expr .
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 62 (expr)


State 151

   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   63     | expr SUR expr .
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 63 (expr)


State 152

   41 CONST_EXP: LEFTBR CONST_EXP RIGHTBR .

    $default  reduce using rule 41 (CONST_EXP)


State 153

   35 CONST_EXP: CONST_EXP . ADD CONST_EXP
   36          | CONST_EXP . SUB CONST_EXP
   37          | CONST_EXP . MUL CONST_EXP
   38          | CONST_EXP . DIV CONST_EXP
   39          | CONST_EXP . LSHIFT CONST_EXP
   39          | CONST_EXP LSHIFT CONST_EXP .

    ADD  shift, and go to state 107
    SUB  shift, and go to state 108
    MUL  shift, and go to state 109
    DIV  shift, and go to state 110

    $default  reduce using rule 39 (CONST_EXP)


State 154

   35 CONST_EXP: CONST_EXP . ADD CONST_EXP
   35          | CONST_EXP ADD CONST_EXP .
   36          | CONST_EXP . SUB CONST_EXP
   37          | CONST_EXP . MUL CONST_EXP
   38          | CONST_EXP . DIV CONST_EXP
   39          | CONST_EXP . LSHIFT CONST_EXP

    MUL  shift, and go to state 109
    DIV  shift, and go to state 110

    $default  reduce using rule 35 (CONST_EXP)


State 155

   35 CONST_EXP: CONST_EXP . ADD CONST_EXP
   36          | CONST_EXP . SUB CONST_EXP
   36          | CONST_EXP SUB CONST_EXP .
   37          | CONST_EXP . MUL CONST_EXP
   38          | CONST_EXP . DIV CONST_EXP
   39          | CONST_EXP . LSHIFT CONST_EXP

    MUL  shift, and go to state 109
    DIV  shift, and go to state 110

    $default  reduce using rule 36 (CONST_EXP)


State 156

   35 CONST_EXP: CONST_EXP . ADD CONST_EXP
   36          | CONST_EXP . SUB CONST_EXP
   37          | CONST_EXP . MUL CONST_EXP
   37          | CONST_EXP MUL CONST_EXP .
   38          | CONST_EXP . DIV CONST_EXP
   39          | CONST_EXP . LSHIFT CONST_EXP

    $default  reduce using rule 37 (CONST_EXP)


State 157

   35 CONST_EXP: CONST_EXP . ADD CONST_EXP
   36          | CONST_EXP . SUB CONST_EXP
   37          | CONST_EXP . MUL CONST_EXP
   38          | CONST_EXP . DIV CONST_EXP
   38          | CONST_EXP DIV CONST_EXP .
   39          | CONST_EXP . LSHIFT CONST_EXP

    $default  reduce using rule 38 (CONST_EXP)


State 158

    8 PARMS: PARMS COMMA T . IDENTIFIER

    IDENTIFIER  shift, and go to state 165


State 159

   14 block: LBRACE . block_items RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LBRACE       shift, and go to state 159
    SEMICOLON    shift, and go to state 166
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47
    IF           shift, and go to state 167
    WHILE        shift, and go to state 168
    FOR          shift, and go to state 169
    RETURN       shift, and go to state 170
    CONST        shift, and go to state 6

    block_item   go to state 171
    block_items  go to state 172
    block        go to state 173
    statement    go to state 174
    declaration  go to state 175
    ARRAY2       go to state 48
    LVAL         go to state 49
    expr         go to state 176
    T            go to state 177


State 160

    6 function: T IDENTIFIER for_LEFTBR PARMS for_RIGHTBR block .

    $default  reduce using rule 6 (function)


State 161

   57 expr: IDENTIFIER LEFTBR PAS RIGHTBR .

    $default  reduce using rule 57 (expr)


State 162

   51 PAS: PAS COMMA . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 178


State 163

   44 ARRAY2: IDENTIFIER M_LBR expr M_RBR .

    $default  reduce using rule 44 (ARRAY2)


State 164

   45 ARRAY2: ARRAY2 M_LBR expr M_RBR .

    $default  reduce using rule 45 (ARRAY2)


State 165

    8 PARMS: PARMS COMMA T IDENTIFIER .

    $default  reduce using rule 8 (PARMS)


State 166

   15 statement: SEMICOLON .

    $default  reduce using rule 15 (statement)


State 167

   19 statement: IF . LEFTBR expr RIGHTBR statement

    LEFTBR  shift, and go to state 179


State 168

   17 statement: WHILE . LEFTBR expr RIGHTBR statement

    LEFTBR  shift, and go to state 180


State 169

   18 statement: FOR . for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement

    LEFTBR  shift, and go to state 27

    for_LEFTBR  go to state 181


State 170

   20 statement: RETURN . expr SEMICOLON
   21          | RETURN . SEMICOLON

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    SEMICOLON    shift, and go to state 182
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 183


State 171

   12 block_items: block_item .

    $default  reduce using rule 12 (block_items)


State 172

   13 block_items: block_items . block_item
   14 block: LBRACE block_items . RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LBRACE       shift, and go to state 159
    RBRACE       shift, and go to state 184
    SEMICOLON    shift, and go to state 166
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47
    IF           shift, and go to state 167
    WHILE        shift, and go to state 168
    FOR          shift, and go to state 169
    RETURN       shift, and go to state 170
    CONST        shift, and go to state 6

    block_item   go to state 185
    block        go to state 173
    statement    go to state 174
    declaration  go to state 175
    ARRAY2       go to state 48
    LVAL         go to state 49
    expr         go to state 176
    T            go to state 177


State 173

   16 statement: block .

    $default  reduce using rule 16 (statement)


State 174

   10 block_item: statement .

    $default  reduce using rule 10 (block_item)


State 175

   11 block_item: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 186


State 176

   22 statement: expr . SEMICOLON
   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR     shift, and go to state 84
    LOG_AND    shift, and go to state 85
    BIT_OR     shift, and go to state 86
    BIT_XOR    shift, and go to state 87
    BIT_AND    shift, and go to state 88
    EQ         shift, and go to state 89
    UEQ        shift, and go to state 90
    GT         shift, and go to state 91
    LT         shift, and go to state 92
    GE         shift, and go to state 93
    LE         shift, and go to state 94
    LSHIFT     shift, and go to state 95
    RSHIFT     shift, and go to state 96
    ADD        shift, and go to state 97
    SUB        shift, and go to state 98
    MUL        shift, and go to state 99
    DIV        shift, and go to state 100
    SUR        shift, and go to state 101
    INCR       shift, and go to state 102
    DECR       shift, and go to state 103
    SEMICOLON  shift, and go to state 187


State 177

   28 declaration: T . IDENTIFIER LOP_ASS expr
   29            | T . IDENTIFIERS
   30            | T . ARRAY

    IDENTIFIER  shift, and go to state 188

    ARRAY        go to state 20
    IDENTIFIERS  go to state 21


State 178

   51 PAS: PAS COMMA expr .
   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 51 (PAS)


State 179

   19 statement: IF LEFTBR . expr RIGHTBR statement

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 189


State 180

   17 statement: WHILE LEFTBR . expr RIGHTBR statement

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 190


State 181

   18 statement: FOR for_LEFTBR . for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47
    CONST        shift, and go to state 6

    $default  reduce using rule 25 (for_expr)

    for_expr     go to state 191
    declaration  go to state 192
    ARRAY2       go to state 48
    LVAL         go to state 49
    expr         go to state 193
    T            go to state 177


State 182

   21 statement: RETURN SEMICOLON .

    $default  reduce using rule 21 (statement)


State 183

   20 statement: RETURN expr . SEMICOLON
   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR     shift, and go to state 84
    LOG_AND    shift, and go to state 85
    BIT_OR     shift, and go to state 86
    BIT_XOR    shift, and go to state 87
    BIT_AND    shift, and go to state 88
    EQ         shift, and go to state 89
    UEQ        shift, and go to state 90
    GT         shift, and go to state 91
    LT         shift, and go to state 92
    GE         shift, and go to state 93
    LE         shift, and go to state 94
    LSHIFT     shift, and go to state 95
    RSHIFT     shift, and go to state 96
    ADD        shift, and go to state 97
    SUB        shift, and go to state 98
    MUL        shift, and go to state 99
    DIV        shift, and go to state 100
    SUR        shift, and go to state 101
    INCR       shift, and go to state 102
    DECR       shift, and go to state 103
    SEMICOLON  shift, and go to state 194


State 184

   14 block: LBRACE block_items RBRACE .

    $default  reduce using rule 14 (block)


State 185

   13 block_items: block_items block_item .

    $default  reduce using rule 13 (block_items)


State 186

   11 block_item: declaration SEMICOLON .

    $default  reduce using rule 11 (block_item)


State 187

   22 statement: expr SEMICOLON .

    $default  reduce using rule 22 (statement)


State 188

   28 declaration: T IDENTIFIER . LOP_ASS expr
   42 ARRAY: IDENTIFIER . M_LBR CONST_EXP M_RBR
   48 IDENTIFIERS: IDENTIFIER .

    LOP_ASS  shift, and go to state 26
    M_LBR    shift, and go to state 28

    $default  reduce using rule 48 (IDENTIFIERS)


State 189

   19 statement: IF LEFTBR expr . RIGHTBR statement
   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103
    RIGHTBR  shift, and go to state 195


State 190

   17 statement: WHILE LEFTBR expr . RIGHTBR statement
   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103
    RIGHTBR  shift, and go to state 196


State 191

   18 statement: FOR for_LEFTBR for_expr . SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement

    SEMICOLON  shift, and go to state 197


State 192

   23 for_expr: declaration .

    $default  reduce using rule 23 (for_expr)


State 193

   24 for_expr: expr .
   59 expr: expr . ADD expr
   60     | expr . SUB expr
   61     | expr . MUL expr
   62     | expr . DIV expr
   63     | expr . SUR expr
   64     | expr . LSHIFT expr
   65     | expr . RSHIFT expr
   66     | expr . BIT_AND expr
   67     | expr . BIT_OR expr
   68     | expr . BIT_XOR expr
   69     | expr . EQ expr
   70     | expr . UEQ expr
   71     | expr . LT expr
   72     | expr . GT expr
   73     | expr . LE expr
   74     | expr . GE expr
   75     | expr . LOG_AND expr
   76     | expr . LOG_OR expr
   95     | expr . INCR
   96     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 24 (for_expr)


State 194

   20 statement: RETURN expr SEMICOLON .

    $default  reduce using rule 20 (statement)


State 195

   19 statement: IF LEFTBR expr RIGHTBR . statement

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LBRACE       shift, and go to state 159
    SEMICOLON    shift, and go to state 166
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47
    IF           shift, and go to state 167
    WHILE        shift, and go to state 168
    FOR          shift, and go to state 169
    RETURN       shift, and go to state 170

    block      go to state 173
    statement  go to state 198
    ARRAY2     go to state 48
    LVAL       go to state 49
    expr       go to state 176


State 196

   17 statement: WHILE LEFTBR expr RIGHTBR . statement

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LBRACE       shift, and go to state 159
    SEMICOLON    shift, and go to state 166
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47
    IF           shift, and go to state 167
    WHILE        shift, and go to state 168
    FOR          shift, and go to state 169
    RETURN       shift, and go to state 170

    block      go to state 173
    statement  go to state 199
    ARRAY2     go to state 48
    LVAL       go to state 49
    expr       go to state 176


State 197

   18 statement: FOR for_LEFTBR for_expr SEMICOLON . for_expr SEMICOLON for_expr for_RIGHTBR statement

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47
    CONST        shift, and go to state 6

    $default  reduce using rule 25 (for_expr)

    for_expr     go to state 200
    declaration  go to state 192
    ARRAY2       go to state 48
    LVAL         go to state 49
    expr         go to state 193
    T            go to state 177


State 198

   19 statement: IF LEFTBR expr RIGHTBR statement .

    $default  reduce using rule 19 (statement)


State 199

   17 statement: WHILE LEFTBR expr RIGHTBR statement .

    $default  reduce using rule 17 (statement)


State 200

   18 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr . SEMICOLON for_expr for_RIGHTBR statement

    SEMICOLON  shift, and go to state 201


State 201

   18 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON . for_expr for_RIGHTBR statement

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47
    CONST        shift, and go to state 6

    $default  reduce using rule 25 (for_expr)

    for_expr     go to state 202
    declaration  go to state 192
    ARRAY2       go to state 48
    LVAL         go to state 49
    expr         go to state 193
    T            go to state 177


State 202

   18 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr . for_RIGHTBR statement

    RIGHTBR  shift, and go to state 112

    for_RIGHTBR  go to state 203


State 203

   18 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR . statement

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LBRACE       shift, and go to state 159
    SEMICOLON    shift, and go to state 166
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47
    IF           shift, and go to state 167
    WHILE        shift, and go to state 168
    FOR          shift, and go to state 169
    RETURN       shift, and go to state 170

    block      go to state 173
    statement  go to state 204
    ARRAY2     go to state 48
    LVAL       go to state 49
    expr       go to state 176


State 204

   18 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement .

    $default  reduce using rule 18 (statement)
