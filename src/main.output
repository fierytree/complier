Terminals unused in grammar

    BOOL


Grammar

    0 $accept: program $end

    1 program: units

    2 units: declaration SEMICOLON
    3      | function
    4      | units declaration SEMICOLON
    5      | units function

    6 function: T IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE statements RBRACE
    7         | T IDENTIFIER LEFTBR RIGHTBR LBRACE statements RBRACE

    8 PARMS: T IDENTIFIER
    9      | PARMS COMMA T IDENTIFIER

   10 statements: statement
   11           | statements statement

   12 statement: SEMICOLON
   13          | declaration SEMICOLON
   14          | WHILE LEFTBR expr RIGHTBR LBRACE statements RBRACE
   15          | FOR LEFTBR expr SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE
   16          | FOR LEFTBR for_decl SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE
   17          | IF LEFTBR expr RIGHTBR LBRACE statements RBRACE
   18          | RETURN expr SEMICOLON
   19          | RETURN SEMICOLON
   20          | expr SEMICOLON

   21 for_decl: T IDENTIFIER LOP_ASS expr
   22         | PARMS COMMA T IDENTIFIER LOP_ASS expr

   23 declaration: T IDENTIFIER LOP_ASS expr
   24            | T IDENTIFIERS
   25            | CONST T_INT IDENTIFIER LOP_ASS CONST_EXP
   26            | CONST T_CHAR IDENTIFIER LOP_ASS CHAR
   27            | CONST T_BOOL IDENTIFIER LOP_ASS INTEGER

   28 CONST_EXP: INTEGER
   29          | CONST_EXP ADD CONST_EXP
   30          | CONST_EXP SUB CONST_EXP
   31          | CONST_EXP MUL CONST_EXP
   32          | CONST_EXP DIV CONST_EXP
   33          | CONST_EXP LSHIFT CONST_EXP
   34          | SUB CONST_EXP
   35          | LEFTBR CONST_EXP RIGHTBR

   36 IDENTIFIERS: IDENTIFIER
   37            | IDENTIFIERS COMMA IDENTIFIER

   38 PAS: expr
   39    | PAS COMMA expr

   40 expr: IDENTIFIER
   41     | INTEGER
   42     | HEX_INTEGER
   43     | CHAR
   44     | STRING
   45     | IDENTIFIER LEFTBR PAS RIGHTBR
   46     | IDENTIFIER LEFTBR RIGHTBR
   47     | expr ADD expr
   48     | expr SUB expr
   49     | expr MUL expr
   50     | expr DIV expr
   51     | expr SUR expr
   52     | expr LSHIFT expr
   53     | expr RSHIFT expr
   54     | expr BIT_AND expr
   55     | expr BIT_OR expr
   56     | expr BIT_XOR expr
   57     | expr EQ expr
   58     | expr UEQ expr
   59     | expr LT expr
   60     | expr GT expr
   61     | expr LE expr
   62     | expr GE expr
   63     | expr LOG_AND expr
   64     | expr LOG_OR expr
   65     | expr LOP_ASS expr
   66     | expr ADD_ASS expr
   67     | expr SUB_ASS expr
   68     | expr MUL_ASS expr
   69     | expr DIV_ASS expr
   70     | expr SUR_ASS expr
   71     | expr LS_ASS expr
   72     | expr RS_ASS expr
   73     | expr OR_ASS expr
   74     | expr AND_ASS expr
   75     | expr XOR_ASS expr
   76     | SUB expr
   77     | ADD expr
   78     | LOG_NOT expr
   79     | BIT_NOT expr
   80     | BIT_AND expr
   81     | INCR expr
   82     | DECR expr
   83     | expr INCR
   84     | expr DECR
   85     | LEFTBR expr RIGHTBR

   86 T: T_INT
   87  | T_CHAR
   88  | T_BOOL
   89  | T_STRING
   90  | T_VOID


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    T_CHAR (258) 26 87
    T_INT (259) 25 86
    T_STRING (260) 89
    T_BOOL (261) 27 88
    T_VOID (262) 90
    LOP_ASS (263) 21 22 23 25 26 27 65
    ADD_ASS (264) 66
    SUB_ASS (265) 67
    MUL_ASS (266) 68
    DIV_ASS (267) 69
    SUR_ASS (268) 70
    LS_ASS (269) 71
    RS_ASS (270) 72
    AND_ASS (271) 74
    OR_ASS (272) 73
    XOR_ASS (273) 75
    LOG_OR (274) 64
    LOG_AND (275) 63
    BIT_OR (276) 55
    BIT_XOR (277) 56
    BIT_AND (278) 54 80
    EQ (279) 57
    UEQ (280) 58
    GT (281) 60
    LT (282) 59
    GE (283) 62
    LE (284) 61
    LSHIFT (285) 33 52
    RSHIFT (286) 53
    ADD (287) 29 47 77
    SUB (288) 30 34 48 76
    MUL (289) 31 49
    DIV (290) 32 50
    SUR (291) 51
    BIT_NOT (292) 79
    LOG_NOT (293) 78
    INCR (294) 81 83
    DECR (295) 82 84
    LEFTBR (296) 6 7 14 15 16 17 35 45 46 85
    RIGHTBR (297) 6 7 14 15 16 17 35 45 46 85
    LBRACE (298) 6 7 14 15 16 17
    RBRACE (299) 6 7 14 15 16 17
    SEMICOLON (300) 2 4 12 13 15 16 18 19 20
    COMMA (301) 9 22 37 39
    IDENTIFIER (302) 6 7 8 9 21 22 23 25 26 27 36 37 40 45 46
    INTEGER (303) 27 28 41
    CHAR (304) 26 43
    BOOL (305)
    STRING (306) 44
    HEX_INTEGER (307) 42
    IF (308) 17
    WHILE (309) 14
    FOR (310) 15 16
    RETURN (311) 18 19
    CONST (312) 25 26 27
    ADDR (313)
    UMINUS (314)
    UADD (315)
    BACK_INCR (316)
    BACK_DECR (317)


Nonterminals, with rules where they appear

    $accept (63)
        on left: 0
    program (64)
        on left: 1
        on right: 0
    units (65)
        on left: 2 3 4 5
        on right: 1 4 5
    function (66)
        on left: 6 7
        on right: 3 5
    PARMS (67)
        on left: 8 9
        on right: 6 9 22
    statements (68)
        on left: 10 11
        on right: 6 7 11 14 15 16 17
    statement (69)
        on left: 12 13 14 15 16 17 18 19 20
        on right: 10 11
    for_decl (70)
        on left: 21 22
        on right: 16
    declaration (71)
        on left: 23 24 25 26 27
        on right: 2 4 13
    CONST_EXP (72)
        on left: 28 29 30 31 32 33 34 35
        on right: 25 29 30 31 32 33 34 35
    IDENTIFIERS (73)
        on left: 36 37
        on right: 24 37
    PAS (74)
        on left: 38 39
        on right: 39 45
    expr (75)
        on left: 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85
        on right: 14 15 16 17 18 20 21 22 23 38 39 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85
    T (76)
        on left: 86 87 88 89 90
        on right: 6 7 8 9 21 22 23 24


State 0

    0 $accept: . program $end

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    CONST     shift, and go to state 6

    program      go to state 7
    units        go to state 8
    function     go to state 9
    declaration  go to state 10
    T            go to state 11


State 1

   87 T: T_CHAR .

    $default  reduce using rule 87 (T)


State 2

   86 T: T_INT .

    $default  reduce using rule 86 (T)


State 3

   89 T: T_STRING .

    $default  reduce using rule 89 (T)


State 4

   88 T: T_BOOL .

    $default  reduce using rule 88 (T)


State 5

   90 T: T_VOID .

    $default  reduce using rule 90 (T)


State 6

   25 declaration: CONST . T_INT IDENTIFIER LOP_ASS CONST_EXP
   26            | CONST . T_CHAR IDENTIFIER LOP_ASS CHAR
   27            | CONST . T_BOOL IDENTIFIER LOP_ASS INTEGER

    T_CHAR  shift, and go to state 12
    T_INT   shift, and go to state 13
    T_BOOL  shift, and go to state 14


State 7

    0 $accept: program . $end

    $end  shift, and go to state 15


State 8

    1 program: units .
    4 units: units . declaration SEMICOLON
    5      | units . function

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    CONST     shift, and go to state 6

    $default  reduce using rule 1 (program)

    function     go to state 16
    declaration  go to state 17
    T            go to state 11


State 9

    3 units: function .

    $default  reduce using rule 3 (units)


State 10

    2 units: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 18


State 11

    6 function: T . IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE statements RBRACE
    7         | T . IDENTIFIER LEFTBR RIGHTBR LBRACE statements RBRACE
   23 declaration: T . IDENTIFIER LOP_ASS expr
   24            | T . IDENTIFIERS

    IDENTIFIER  shift, and go to state 19

    IDENTIFIERS  go to state 20


State 12

   26 declaration: CONST T_CHAR . IDENTIFIER LOP_ASS CHAR

    IDENTIFIER  shift, and go to state 21


State 13

   25 declaration: CONST T_INT . IDENTIFIER LOP_ASS CONST_EXP

    IDENTIFIER  shift, and go to state 22


State 14

   27 declaration: CONST T_BOOL . IDENTIFIER LOP_ASS INTEGER

    IDENTIFIER  shift, and go to state 23


State 15

    0 $accept: program $end .

    $default  accept


State 16

    5 units: units function .

    $default  reduce using rule 5 (units)


State 17

    4 units: units declaration . SEMICOLON

    SEMICOLON  shift, and go to state 24


State 18

    2 units: declaration SEMICOLON .

    $default  reduce using rule 2 (units)


State 19

    6 function: T IDENTIFIER . LEFTBR PARMS RIGHTBR LBRACE statements RBRACE
    7         | T IDENTIFIER . LEFTBR RIGHTBR LBRACE statements RBRACE
   23 declaration: T IDENTIFIER . LOP_ASS expr
   36 IDENTIFIERS: IDENTIFIER .

    LOP_ASS  shift, and go to state 25
    LEFTBR   shift, and go to state 26

    $default  reduce using rule 36 (IDENTIFIERS)


State 20

   24 declaration: T IDENTIFIERS .
   37 IDENTIFIERS: IDENTIFIERS . COMMA IDENTIFIER

    COMMA  shift, and go to state 27

    $default  reduce using rule 24 (declaration)


State 21

   26 declaration: CONST T_CHAR IDENTIFIER . LOP_ASS CHAR

    LOP_ASS  shift, and go to state 28


State 22

   25 declaration: CONST T_INT IDENTIFIER . LOP_ASS CONST_EXP

    LOP_ASS  shift, and go to state 29


State 23

   27 declaration: CONST T_BOOL IDENTIFIER . LOP_ASS INTEGER

    LOP_ASS  shift, and go to state 30


State 24

    4 units: units declaration SEMICOLON .

    $default  reduce using rule 4 (units)


State 25

   23 declaration: T IDENTIFIER LOP_ASS . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 44


State 26

    6 function: T IDENTIFIER LEFTBR . PARMS RIGHTBR LBRACE statements RBRACE
    7         | T IDENTIFIER LEFTBR . RIGHTBR LBRACE statements RBRACE

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    RIGHTBR   shift, and go to state 45

    PARMS  go to state 46
    T      go to state 47


State 27

   37 IDENTIFIERS: IDENTIFIERS COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 48


State 28

   26 declaration: CONST T_CHAR IDENTIFIER LOP_ASS . CHAR

    CHAR  shift, and go to state 49


State 29

   25 declaration: CONST T_INT IDENTIFIER LOP_ASS . CONST_EXP

    SUB      shift, and go to state 50
    LEFTBR   shift, and go to state 51
    INTEGER  shift, and go to state 52

    CONST_EXP  go to state 53


State 30

   27 declaration: CONST T_BOOL IDENTIFIER LOP_ASS . INTEGER

    INTEGER  shift, and go to state 54


State 31

   80 expr: BIT_AND . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 55


State 32

   77 expr: ADD . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 56


State 33

   76 expr: SUB . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 57


State 34

   79 expr: BIT_NOT . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 58


State 35

   78 expr: LOG_NOT . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 59


State 36

   81 expr: INCR . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 60


State 37

   82 expr: DECR . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 61


State 38

   85 expr: LEFTBR . expr RIGHTBR

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 62


State 39

   40 expr: IDENTIFIER .
   45     | IDENTIFIER . LEFTBR PAS RIGHTBR
   46     | IDENTIFIER . LEFTBR RIGHTBR

    LEFTBR  shift, and go to state 63

    $default  reduce using rule 40 (expr)


State 40

   41 expr: INTEGER .

    $default  reduce using rule 41 (expr)


State 41

   43 expr: CHAR .

    $default  reduce using rule 43 (expr)


State 42

   44 expr: STRING .

    $default  reduce using rule 44 (expr)


State 43

   42 expr: HEX_INTEGER .

    $default  reduce using rule 42 (expr)


State 44

   23 declaration: T IDENTIFIER LOP_ASS expr .
   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 23 (declaration)


State 45

    7 function: T IDENTIFIER LEFTBR RIGHTBR . LBRACE statements RBRACE

    LBRACE  shift, and go to state 95


State 46

    6 function: T IDENTIFIER LEFTBR PARMS . RIGHTBR LBRACE statements RBRACE
    9 PARMS: PARMS . COMMA T IDENTIFIER

    RIGHTBR  shift, and go to state 96
    COMMA    shift, and go to state 97


State 47

    8 PARMS: T . IDENTIFIER

    IDENTIFIER  shift, and go to state 98


State 48

   37 IDENTIFIERS: IDENTIFIERS COMMA IDENTIFIER .

    $default  reduce using rule 37 (IDENTIFIERS)


State 49

   26 declaration: CONST T_CHAR IDENTIFIER LOP_ASS CHAR .

    $default  reduce using rule 26 (declaration)


State 50

   34 CONST_EXP: SUB . CONST_EXP

    SUB      shift, and go to state 50
    LEFTBR   shift, and go to state 51
    INTEGER  shift, and go to state 52

    CONST_EXP  go to state 99


State 51

   35 CONST_EXP: LEFTBR . CONST_EXP RIGHTBR

    SUB      shift, and go to state 50
    LEFTBR   shift, and go to state 51
    INTEGER  shift, and go to state 52

    CONST_EXP  go to state 100


State 52

   28 CONST_EXP: INTEGER .

    $default  reduce using rule 28 (CONST_EXP)


State 53

   25 declaration: CONST T_INT IDENTIFIER LOP_ASS CONST_EXP .
   29 CONST_EXP: CONST_EXP . ADD CONST_EXP
   30          | CONST_EXP . SUB CONST_EXP
   31          | CONST_EXP . MUL CONST_EXP
   32          | CONST_EXP . DIV CONST_EXP
   33          | CONST_EXP . LSHIFT CONST_EXP

    LSHIFT  shift, and go to state 101
    ADD     shift, and go to state 102
    SUB     shift, and go to state 103
    MUL     shift, and go to state 104
    DIV     shift, and go to state 105

    $default  reduce using rule 25 (declaration)


State 54

   27 declaration: CONST T_BOOL IDENTIFIER LOP_ASS INTEGER .

    $default  reduce using rule 27 (declaration)


State 55

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   80     | BIT_AND expr .
   83     | expr . INCR
   84     | expr . DECR

    INCR  shift, and go to state 93
    DECR  shift, and go to state 94

    $default  reduce using rule 80 (expr)


State 56

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   77     | ADD expr .
   83     | expr . INCR
   84     | expr . DECR

    INCR  shift, and go to state 93
    DECR  shift, and go to state 94

    $default  reduce using rule 77 (expr)


State 57

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   76     | SUB expr .
   83     | expr . INCR
   84     | expr . DECR

    INCR  shift, and go to state 93
    DECR  shift, and go to state 94

    $default  reduce using rule 76 (expr)


State 58

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   79     | BIT_NOT expr .
   83     | expr . INCR
   84     | expr . DECR

    INCR  shift, and go to state 93
    DECR  shift, and go to state 94

    $default  reduce using rule 79 (expr)


State 59

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   78     | LOG_NOT expr .
   83     | expr . INCR
   84     | expr . DECR

    INCR  shift, and go to state 93
    DECR  shift, and go to state 94

    $default  reduce using rule 78 (expr)


State 60

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   81     | INCR expr .
   83     | expr . INCR
   84     | expr . DECR

    INCR  shift, and go to state 93
    DECR  shift, and go to state 94

    $default  reduce using rule 81 (expr)


State 61

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   82     | DECR expr .
   83     | expr . INCR
   84     | expr . DECR

    INCR  shift, and go to state 93
    DECR  shift, and go to state 94

    $default  reduce using rule 82 (expr)


State 62

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR
   85     | LEFTBR expr . RIGHTBR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94
    RIGHTBR  shift, and go to state 106


State 63

   45 expr: IDENTIFIER LEFTBR . PAS RIGHTBR
   46     | IDENTIFIER LEFTBR . RIGHTBR

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    RIGHTBR      shift, and go to state 107
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    PAS   go to state 108
    expr  go to state 109


State 64

   65 expr: expr LOP_ASS . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 110


State 65

   66 expr: expr ADD_ASS . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 111


State 66

   67 expr: expr SUB_ASS . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 112


State 67

   68 expr: expr MUL_ASS . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 113


State 68

   69 expr: expr DIV_ASS . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 114


State 69

   70 expr: expr SUR_ASS . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 115


State 70

   71 expr: expr LS_ASS . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 116


State 71

   72 expr: expr RS_ASS . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 117


State 72

   74 expr: expr AND_ASS . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 118


State 73

   73 expr: expr OR_ASS . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 119


State 74

   75 expr: expr XOR_ASS . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 120


State 75

   64 expr: expr LOG_OR . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 121


State 76

   63 expr: expr LOG_AND . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 122


State 77

   55 expr: expr BIT_OR . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 123


State 78

   56 expr: expr BIT_XOR . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 124


State 79

   54 expr: expr BIT_AND . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 125


State 80

   57 expr: expr EQ . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 126


State 81

   58 expr: expr UEQ . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 127


State 82

   60 expr: expr GT . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 128


State 83

   59 expr: expr LT . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 129


State 84

   62 expr: expr GE . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 130


State 85

   61 expr: expr LE . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 131


State 86

   52 expr: expr LSHIFT . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 132


State 87

   53 expr: expr RSHIFT . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 133


State 88

   47 expr: expr ADD . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 134


State 89

   48 expr: expr SUB . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 135


State 90

   49 expr: expr MUL . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 136


State 91

   50 expr: expr DIV . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 137


State 92

   51 expr: expr SUR . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 138


State 93

   83 expr: expr INCR .

    $default  reduce using rule 83 (expr)


State 94

   84 expr: expr DECR .

    $default  reduce using rule 84 (expr)


State 95

    7 function: T IDENTIFIER LEFTBR RIGHTBR LBRACE . statements RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    SEMICOLON    shift, and go to state 139
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43
    IF           shift, and go to state 140
    WHILE        shift, and go to state 141
    FOR          shift, and go to state 142
    RETURN       shift, and go to state 143
    CONST        shift, and go to state 6

    statements   go to state 144
    statement    go to state 145
    declaration  go to state 146
    expr         go to state 147
    T            go to state 148


State 96

    6 function: T IDENTIFIER LEFTBR PARMS RIGHTBR . LBRACE statements RBRACE

    LBRACE  shift, and go to state 149


State 97

    9 PARMS: PARMS COMMA . T IDENTIFIER

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5

    T  go to state 150


State 98

    8 PARMS: T IDENTIFIER .

    $default  reduce using rule 8 (PARMS)


State 99

   29 CONST_EXP: CONST_EXP . ADD CONST_EXP
   30          | CONST_EXP . SUB CONST_EXP
   31          | CONST_EXP . MUL CONST_EXP
   32          | CONST_EXP . DIV CONST_EXP
   33          | CONST_EXP . LSHIFT CONST_EXP
   34          | SUB CONST_EXP .

    $default  reduce using rule 34 (CONST_EXP)


State 100

   29 CONST_EXP: CONST_EXP . ADD CONST_EXP
   30          | CONST_EXP . SUB CONST_EXP
   31          | CONST_EXP . MUL CONST_EXP
   32          | CONST_EXP . DIV CONST_EXP
   33          | CONST_EXP . LSHIFT CONST_EXP
   35          | LEFTBR CONST_EXP . RIGHTBR

    LSHIFT   shift, and go to state 101
    ADD      shift, and go to state 102
    SUB      shift, and go to state 103
    MUL      shift, and go to state 104
    DIV      shift, and go to state 105
    RIGHTBR  shift, and go to state 151


State 101

   33 CONST_EXP: CONST_EXP LSHIFT . CONST_EXP

    SUB      shift, and go to state 50
    LEFTBR   shift, and go to state 51
    INTEGER  shift, and go to state 52

    CONST_EXP  go to state 152


State 102

   29 CONST_EXP: CONST_EXP ADD . CONST_EXP

    SUB      shift, and go to state 50
    LEFTBR   shift, and go to state 51
    INTEGER  shift, and go to state 52

    CONST_EXP  go to state 153


State 103

   30 CONST_EXP: CONST_EXP SUB . CONST_EXP

    SUB      shift, and go to state 50
    LEFTBR   shift, and go to state 51
    INTEGER  shift, and go to state 52

    CONST_EXP  go to state 154


State 104

   31 CONST_EXP: CONST_EXP MUL . CONST_EXP

    SUB      shift, and go to state 50
    LEFTBR   shift, and go to state 51
    INTEGER  shift, and go to state 52

    CONST_EXP  go to state 155


State 105

   32 CONST_EXP: CONST_EXP DIV . CONST_EXP

    SUB      shift, and go to state 50
    LEFTBR   shift, and go to state 51
    INTEGER  shift, and go to state 52

    CONST_EXP  go to state 156


State 106

   85 expr: LEFTBR expr RIGHTBR .

    $default  reduce using rule 85 (expr)


State 107

   46 expr: IDENTIFIER LEFTBR RIGHTBR .

    $default  reduce using rule 46 (expr)


State 108

   39 PAS: PAS . COMMA expr
   45 expr: IDENTIFIER LEFTBR PAS . RIGHTBR

    RIGHTBR  shift, and go to state 157
    COMMA    shift, and go to state 158


State 109

   38 PAS: expr .
   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 38 (PAS)


State 110

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   65     | expr LOP_ASS expr .
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 65 (expr)


State 111

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   66     | expr ADD_ASS expr .
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 66 (expr)


State 112

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   67     | expr SUB_ASS expr .
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 67 (expr)


State 113

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   68     | expr MUL_ASS expr .
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 68 (expr)


State 114

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   69     | expr DIV_ASS expr .
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 69 (expr)


State 115

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   70     | expr SUR_ASS expr .
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 70 (expr)


State 116

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   71     | expr LS_ASS expr .
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 71 (expr)


State 117

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   72     | expr RS_ASS expr .
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 72 (expr)


State 118

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   74     | expr AND_ASS expr .
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 74 (expr)


State 119

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   73     | expr OR_ASS expr .
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 73 (expr)


State 120

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   75     | expr XOR_ASS expr .
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 75 (expr)


State 121

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   64     | expr LOG_OR expr .
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 64 (expr)


State 122

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   63     | expr LOG_AND expr .
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 63 (expr)


State 123

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   55     | expr BIT_OR expr .
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 55 (expr)


State 124

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   56     | expr BIT_XOR expr .
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 56 (expr)


State 125

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   54     | expr BIT_AND expr .
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    EQ      shift, and go to state 80
    UEQ     shift, and go to state 81
    GT      shift, and go to state 82
    LT      shift, and go to state 83
    GE      shift, and go to state 84
    LE      shift, and go to state 85
    LSHIFT  shift, and go to state 86
    RSHIFT  shift, and go to state 87
    ADD     shift, and go to state 88
    SUB     shift, and go to state 89
    MUL     shift, and go to state 90
    DIV     shift, and go to state 91
    SUR     shift, and go to state 92
    INCR    shift, and go to state 93
    DECR    shift, and go to state 94

    $default  reduce using rule 54 (expr)


State 126

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   57     | expr EQ expr .
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    GT      shift, and go to state 82
    LT      shift, and go to state 83
    GE      shift, and go to state 84
    LE      shift, and go to state 85
    LSHIFT  shift, and go to state 86
    RSHIFT  shift, and go to state 87
    ADD     shift, and go to state 88
    SUB     shift, and go to state 89
    MUL     shift, and go to state 90
    DIV     shift, and go to state 91
    SUR     shift, and go to state 92
    INCR    shift, and go to state 93
    DECR    shift, and go to state 94

    $default  reduce using rule 57 (expr)


State 127

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   58     | expr UEQ expr .
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    GT      shift, and go to state 82
    LT      shift, and go to state 83
    GE      shift, and go to state 84
    LE      shift, and go to state 85
    LSHIFT  shift, and go to state 86
    RSHIFT  shift, and go to state 87
    ADD     shift, and go to state 88
    SUB     shift, and go to state 89
    MUL     shift, and go to state 90
    DIV     shift, and go to state 91
    SUR     shift, and go to state 92
    INCR    shift, and go to state 93
    DECR    shift, and go to state 94

    $default  reduce using rule 58 (expr)


State 128

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   60     | expr GT expr .
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LSHIFT  shift, and go to state 86
    RSHIFT  shift, and go to state 87
    ADD     shift, and go to state 88
    SUB     shift, and go to state 89
    MUL     shift, and go to state 90
    DIV     shift, and go to state 91
    SUR     shift, and go to state 92
    INCR    shift, and go to state 93
    DECR    shift, and go to state 94

    $default  reduce using rule 60 (expr)


State 129

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   59     | expr LT expr .
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LSHIFT  shift, and go to state 86
    RSHIFT  shift, and go to state 87
    ADD     shift, and go to state 88
    SUB     shift, and go to state 89
    MUL     shift, and go to state 90
    DIV     shift, and go to state 91
    SUR     shift, and go to state 92
    INCR    shift, and go to state 93
    DECR    shift, and go to state 94

    $default  reduce using rule 59 (expr)


State 130

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   62     | expr GE expr .
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LSHIFT  shift, and go to state 86
    RSHIFT  shift, and go to state 87
    ADD     shift, and go to state 88
    SUB     shift, and go to state 89
    MUL     shift, and go to state 90
    DIV     shift, and go to state 91
    SUR     shift, and go to state 92
    INCR    shift, and go to state 93
    DECR    shift, and go to state 94

    $default  reduce using rule 62 (expr)


State 131

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   61     | expr LE expr .
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LSHIFT  shift, and go to state 86
    RSHIFT  shift, and go to state 87
    ADD     shift, and go to state 88
    SUB     shift, and go to state 89
    MUL     shift, and go to state 90
    DIV     shift, and go to state 91
    SUR     shift, and go to state 92
    INCR    shift, and go to state 93
    DECR    shift, and go to state 94

    $default  reduce using rule 61 (expr)


State 132

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   52     | expr LSHIFT expr .
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    ADD   shift, and go to state 88
    SUB   shift, and go to state 89
    MUL   shift, and go to state 90
    DIV   shift, and go to state 91
    SUR   shift, and go to state 92
    INCR  shift, and go to state 93
    DECR  shift, and go to state 94

    $default  reduce using rule 52 (expr)


State 133

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   53     | expr RSHIFT expr .
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    ADD   shift, and go to state 88
    SUB   shift, and go to state 89
    MUL   shift, and go to state 90
    DIV   shift, and go to state 91
    SUR   shift, and go to state 92
    INCR  shift, and go to state 93
    DECR  shift, and go to state 94

    $default  reduce using rule 53 (expr)


State 134

   47 expr: expr . ADD expr
   47     | expr ADD expr .
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    MUL   shift, and go to state 90
    DIV   shift, and go to state 91
    SUR   shift, and go to state 92
    INCR  shift, and go to state 93
    DECR  shift, and go to state 94

    $default  reduce using rule 47 (expr)


State 135

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   48     | expr SUB expr .
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    MUL   shift, and go to state 90
    DIV   shift, and go to state 91
    SUR   shift, and go to state 92
    INCR  shift, and go to state 93
    DECR  shift, and go to state 94

    $default  reduce using rule 48 (expr)


State 136

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   49     | expr MUL expr .
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    INCR  shift, and go to state 93
    DECR  shift, and go to state 94

    $default  reduce using rule 49 (expr)


State 137

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   50     | expr DIV expr .
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    INCR  shift, and go to state 93
    DECR  shift, and go to state 94

    $default  reduce using rule 50 (expr)


State 138

   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   51     | expr SUR expr .
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    INCR  shift, and go to state 93
    DECR  shift, and go to state 94

    $default  reduce using rule 51 (expr)


State 139

   12 statement: SEMICOLON .

    $default  reduce using rule 12 (statement)


State 140

   17 statement: IF . LEFTBR expr RIGHTBR LBRACE statements RBRACE

    LEFTBR  shift, and go to state 159


State 141

   14 statement: WHILE . LEFTBR expr RIGHTBR LBRACE statements RBRACE

    LEFTBR  shift, and go to state 160


State 142

   15 statement: FOR . LEFTBR expr SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE
   16          | FOR . LEFTBR for_decl SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE

    LEFTBR  shift, and go to state 161


State 143

   18 statement: RETURN . expr SEMICOLON
   19          | RETURN . SEMICOLON

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    SEMICOLON    shift, and go to state 162
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 163


State 144

    7 function: T IDENTIFIER LEFTBR RIGHTBR LBRACE statements . RBRACE
   11 statements: statements . statement

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    RBRACE       shift, and go to state 164
    SEMICOLON    shift, and go to state 139
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43
    IF           shift, and go to state 140
    WHILE        shift, and go to state 141
    FOR          shift, and go to state 142
    RETURN       shift, and go to state 143
    CONST        shift, and go to state 6

    statement    go to state 165
    declaration  go to state 146
    expr         go to state 147
    T            go to state 148


State 145

   10 statements: statement .

    $default  reduce using rule 10 (statements)


State 146

   13 statement: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 166


State 147

   20 statement: expr . SEMICOLON
   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS    shift, and go to state 64
    ADD_ASS    shift, and go to state 65
    SUB_ASS    shift, and go to state 66
    MUL_ASS    shift, and go to state 67
    DIV_ASS    shift, and go to state 68
    SUR_ASS    shift, and go to state 69
    LS_ASS     shift, and go to state 70
    RS_ASS     shift, and go to state 71
    AND_ASS    shift, and go to state 72
    OR_ASS     shift, and go to state 73
    XOR_ASS    shift, and go to state 74
    LOG_OR     shift, and go to state 75
    LOG_AND    shift, and go to state 76
    BIT_OR     shift, and go to state 77
    BIT_XOR    shift, and go to state 78
    BIT_AND    shift, and go to state 79
    EQ         shift, and go to state 80
    UEQ        shift, and go to state 81
    GT         shift, and go to state 82
    LT         shift, and go to state 83
    GE         shift, and go to state 84
    LE         shift, and go to state 85
    LSHIFT     shift, and go to state 86
    RSHIFT     shift, and go to state 87
    ADD        shift, and go to state 88
    SUB        shift, and go to state 89
    MUL        shift, and go to state 90
    DIV        shift, and go to state 91
    SUR        shift, and go to state 92
    INCR       shift, and go to state 93
    DECR       shift, and go to state 94
    SEMICOLON  shift, and go to state 167


State 148

   23 declaration: T . IDENTIFIER LOP_ASS expr
   24            | T . IDENTIFIERS

    IDENTIFIER  shift, and go to state 168

    IDENTIFIERS  go to state 20


State 149

    6 function: T IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE . statements RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    SEMICOLON    shift, and go to state 139
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43
    IF           shift, and go to state 140
    WHILE        shift, and go to state 141
    FOR          shift, and go to state 142
    RETURN       shift, and go to state 143
    CONST        shift, and go to state 6

    statements   go to state 169
    statement    go to state 145
    declaration  go to state 146
    expr         go to state 147
    T            go to state 148


State 150

    9 PARMS: PARMS COMMA T . IDENTIFIER

    IDENTIFIER  shift, and go to state 170


State 151

   35 CONST_EXP: LEFTBR CONST_EXP RIGHTBR .

    $default  reduce using rule 35 (CONST_EXP)


State 152

   29 CONST_EXP: CONST_EXP . ADD CONST_EXP
   30          | CONST_EXP . SUB CONST_EXP
   31          | CONST_EXP . MUL CONST_EXP
   32          | CONST_EXP . DIV CONST_EXP
   33          | CONST_EXP . LSHIFT CONST_EXP
   33          | CONST_EXP LSHIFT CONST_EXP .

    ADD  shift, and go to state 102
    SUB  shift, and go to state 103
    MUL  shift, and go to state 104
    DIV  shift, and go to state 105

    $default  reduce using rule 33 (CONST_EXP)


State 153

   29 CONST_EXP: CONST_EXP . ADD CONST_EXP
   29          | CONST_EXP ADD CONST_EXP .
   30          | CONST_EXP . SUB CONST_EXP
   31          | CONST_EXP . MUL CONST_EXP
   32          | CONST_EXP . DIV CONST_EXP
   33          | CONST_EXP . LSHIFT CONST_EXP

    MUL  shift, and go to state 104
    DIV  shift, and go to state 105

    $default  reduce using rule 29 (CONST_EXP)


State 154

   29 CONST_EXP: CONST_EXP . ADD CONST_EXP
   30          | CONST_EXP . SUB CONST_EXP
   30          | CONST_EXP SUB CONST_EXP .
   31          | CONST_EXP . MUL CONST_EXP
   32          | CONST_EXP . DIV CONST_EXP
   33          | CONST_EXP . LSHIFT CONST_EXP

    MUL  shift, and go to state 104
    DIV  shift, and go to state 105

    $default  reduce using rule 30 (CONST_EXP)


State 155

   29 CONST_EXP: CONST_EXP . ADD CONST_EXP
   30          | CONST_EXP . SUB CONST_EXP
   31          | CONST_EXP . MUL CONST_EXP
   31          | CONST_EXP MUL CONST_EXP .
   32          | CONST_EXP . DIV CONST_EXP
   33          | CONST_EXP . LSHIFT CONST_EXP

    $default  reduce using rule 31 (CONST_EXP)


State 156

   29 CONST_EXP: CONST_EXP . ADD CONST_EXP
   30          | CONST_EXP . SUB CONST_EXP
   31          | CONST_EXP . MUL CONST_EXP
   32          | CONST_EXP . DIV CONST_EXP
   32          | CONST_EXP DIV CONST_EXP .
   33          | CONST_EXP . LSHIFT CONST_EXP

    $default  reduce using rule 32 (CONST_EXP)


State 157

   45 expr: IDENTIFIER LEFTBR PAS RIGHTBR .

    $default  reduce using rule 45 (expr)


State 158

   39 PAS: PAS COMMA . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 171


State 159

   17 statement: IF LEFTBR . expr RIGHTBR LBRACE statements RBRACE

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 172


State 160

   14 statement: WHILE LEFTBR . expr RIGHTBR LBRACE statements RBRACE

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 173


State 161

   15 statement: FOR LEFTBR . expr SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE
   16          | FOR LEFTBR . for_decl SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    PARMS     go to state 174
    for_decl  go to state 175
    expr      go to state 176
    T         go to state 177


State 162

   19 statement: RETURN SEMICOLON .

    $default  reduce using rule 19 (statement)


State 163

   18 statement: RETURN expr . SEMICOLON
   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS    shift, and go to state 64
    ADD_ASS    shift, and go to state 65
    SUB_ASS    shift, and go to state 66
    MUL_ASS    shift, and go to state 67
    DIV_ASS    shift, and go to state 68
    SUR_ASS    shift, and go to state 69
    LS_ASS     shift, and go to state 70
    RS_ASS     shift, and go to state 71
    AND_ASS    shift, and go to state 72
    OR_ASS     shift, and go to state 73
    XOR_ASS    shift, and go to state 74
    LOG_OR     shift, and go to state 75
    LOG_AND    shift, and go to state 76
    BIT_OR     shift, and go to state 77
    BIT_XOR    shift, and go to state 78
    BIT_AND    shift, and go to state 79
    EQ         shift, and go to state 80
    UEQ        shift, and go to state 81
    GT         shift, and go to state 82
    LT         shift, and go to state 83
    GE         shift, and go to state 84
    LE         shift, and go to state 85
    LSHIFT     shift, and go to state 86
    RSHIFT     shift, and go to state 87
    ADD        shift, and go to state 88
    SUB        shift, and go to state 89
    MUL        shift, and go to state 90
    DIV        shift, and go to state 91
    SUR        shift, and go to state 92
    INCR       shift, and go to state 93
    DECR       shift, and go to state 94
    SEMICOLON  shift, and go to state 178


State 164

    7 function: T IDENTIFIER LEFTBR RIGHTBR LBRACE statements RBRACE .

    $default  reduce using rule 7 (function)


State 165

   11 statements: statements statement .

    $default  reduce using rule 11 (statements)


State 166

   13 statement: declaration SEMICOLON .

    $default  reduce using rule 13 (statement)


State 167

   20 statement: expr SEMICOLON .

    $default  reduce using rule 20 (statement)


State 168

   23 declaration: T IDENTIFIER . LOP_ASS expr
   36 IDENTIFIERS: IDENTIFIER .

    LOP_ASS  shift, and go to state 25

    $default  reduce using rule 36 (IDENTIFIERS)


State 169

    6 function: T IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE statements . RBRACE
   11 statements: statements . statement

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    RBRACE       shift, and go to state 179
    SEMICOLON    shift, and go to state 139
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43
    IF           shift, and go to state 140
    WHILE        shift, and go to state 141
    FOR          shift, and go to state 142
    RETURN       shift, and go to state 143
    CONST        shift, and go to state 6

    statement    go to state 165
    declaration  go to state 146
    expr         go to state 147
    T            go to state 148


State 170

    9 PARMS: PARMS COMMA T IDENTIFIER .

    $default  reduce using rule 9 (PARMS)


State 171

   39 PAS: PAS COMMA expr .
   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 39 (PAS)


State 172

   17 statement: IF LEFTBR expr . RIGHTBR LBRACE statements RBRACE
   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94
    RIGHTBR  shift, and go to state 180


State 173

   14 statement: WHILE LEFTBR expr . RIGHTBR LBRACE statements RBRACE
   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94
    RIGHTBR  shift, and go to state 181


State 174

    9 PARMS: PARMS . COMMA T IDENTIFIER
   22 for_decl: PARMS . COMMA T IDENTIFIER LOP_ASS expr

    COMMA  shift, and go to state 182


State 175

   16 statement: FOR LEFTBR for_decl . SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE

    SEMICOLON  shift, and go to state 183


State 176

   15 statement: FOR LEFTBR expr . SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE
   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS    shift, and go to state 64
    ADD_ASS    shift, and go to state 65
    SUB_ASS    shift, and go to state 66
    MUL_ASS    shift, and go to state 67
    DIV_ASS    shift, and go to state 68
    SUR_ASS    shift, and go to state 69
    LS_ASS     shift, and go to state 70
    RS_ASS     shift, and go to state 71
    AND_ASS    shift, and go to state 72
    OR_ASS     shift, and go to state 73
    XOR_ASS    shift, and go to state 74
    LOG_OR     shift, and go to state 75
    LOG_AND    shift, and go to state 76
    BIT_OR     shift, and go to state 77
    BIT_XOR    shift, and go to state 78
    BIT_AND    shift, and go to state 79
    EQ         shift, and go to state 80
    UEQ        shift, and go to state 81
    GT         shift, and go to state 82
    LT         shift, and go to state 83
    GE         shift, and go to state 84
    LE         shift, and go to state 85
    LSHIFT     shift, and go to state 86
    RSHIFT     shift, and go to state 87
    ADD        shift, and go to state 88
    SUB        shift, and go to state 89
    MUL        shift, and go to state 90
    DIV        shift, and go to state 91
    SUR        shift, and go to state 92
    INCR       shift, and go to state 93
    DECR       shift, and go to state 94
    SEMICOLON  shift, and go to state 184


State 177

    8 PARMS: T . IDENTIFIER
   21 for_decl: T . IDENTIFIER LOP_ASS expr

    IDENTIFIER  shift, and go to state 185


State 178

   18 statement: RETURN expr SEMICOLON .

    $default  reduce using rule 18 (statement)


State 179

    6 function: T IDENTIFIER LEFTBR PARMS RIGHTBR LBRACE statements RBRACE .

    $default  reduce using rule 6 (function)


State 180

   17 statement: IF LEFTBR expr RIGHTBR . LBRACE statements RBRACE

    LBRACE  shift, and go to state 186


State 181

   14 statement: WHILE LEFTBR expr RIGHTBR . LBRACE statements RBRACE

    LBRACE  shift, and go to state 187


State 182

    9 PARMS: PARMS COMMA . T IDENTIFIER
   22 for_decl: PARMS COMMA . T IDENTIFIER LOP_ASS expr

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5

    T  go to state 188


State 183

   16 statement: FOR LEFTBR for_decl SEMICOLON . expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 189


State 184

   15 statement: FOR LEFTBR expr SEMICOLON . expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 190


State 185

    8 PARMS: T IDENTIFIER .
   21 for_decl: T IDENTIFIER . LOP_ASS expr

    LOP_ASS  shift, and go to state 191

    $default  reduce using rule 8 (PARMS)


State 186

   17 statement: IF LEFTBR expr RIGHTBR LBRACE . statements RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    SEMICOLON    shift, and go to state 139
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43
    IF           shift, and go to state 140
    WHILE        shift, and go to state 141
    FOR          shift, and go to state 142
    RETURN       shift, and go to state 143
    CONST        shift, and go to state 6

    statements   go to state 192
    statement    go to state 145
    declaration  go to state 146
    expr         go to state 147
    T            go to state 148


State 187

   14 statement: WHILE LEFTBR expr RIGHTBR LBRACE . statements RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    SEMICOLON    shift, and go to state 139
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43
    IF           shift, and go to state 140
    WHILE        shift, and go to state 141
    FOR          shift, and go to state 142
    RETURN       shift, and go to state 143
    CONST        shift, and go to state 6

    statements   go to state 193
    statement    go to state 145
    declaration  go to state 146
    expr         go to state 147
    T            go to state 148


State 188

    9 PARMS: PARMS COMMA T . IDENTIFIER
   22 for_decl: PARMS COMMA T . IDENTIFIER LOP_ASS expr

    IDENTIFIER  shift, and go to state 194


State 189

   16 statement: FOR LEFTBR for_decl SEMICOLON expr . SEMICOLON expr RIGHTBR LBRACE statements RBRACE
   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS    shift, and go to state 64
    ADD_ASS    shift, and go to state 65
    SUB_ASS    shift, and go to state 66
    MUL_ASS    shift, and go to state 67
    DIV_ASS    shift, and go to state 68
    SUR_ASS    shift, and go to state 69
    LS_ASS     shift, and go to state 70
    RS_ASS     shift, and go to state 71
    AND_ASS    shift, and go to state 72
    OR_ASS     shift, and go to state 73
    XOR_ASS    shift, and go to state 74
    LOG_OR     shift, and go to state 75
    LOG_AND    shift, and go to state 76
    BIT_OR     shift, and go to state 77
    BIT_XOR    shift, and go to state 78
    BIT_AND    shift, and go to state 79
    EQ         shift, and go to state 80
    UEQ        shift, and go to state 81
    GT         shift, and go to state 82
    LT         shift, and go to state 83
    GE         shift, and go to state 84
    LE         shift, and go to state 85
    LSHIFT     shift, and go to state 86
    RSHIFT     shift, and go to state 87
    ADD        shift, and go to state 88
    SUB        shift, and go to state 89
    MUL        shift, and go to state 90
    DIV        shift, and go to state 91
    SUR        shift, and go to state 92
    INCR       shift, and go to state 93
    DECR       shift, and go to state 94
    SEMICOLON  shift, and go to state 195


State 190

   15 statement: FOR LEFTBR expr SEMICOLON expr . SEMICOLON expr RIGHTBR LBRACE statements RBRACE
   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS    shift, and go to state 64
    ADD_ASS    shift, and go to state 65
    SUB_ASS    shift, and go to state 66
    MUL_ASS    shift, and go to state 67
    DIV_ASS    shift, and go to state 68
    SUR_ASS    shift, and go to state 69
    LS_ASS     shift, and go to state 70
    RS_ASS     shift, and go to state 71
    AND_ASS    shift, and go to state 72
    OR_ASS     shift, and go to state 73
    XOR_ASS    shift, and go to state 74
    LOG_OR     shift, and go to state 75
    LOG_AND    shift, and go to state 76
    BIT_OR     shift, and go to state 77
    BIT_XOR    shift, and go to state 78
    BIT_AND    shift, and go to state 79
    EQ         shift, and go to state 80
    UEQ        shift, and go to state 81
    GT         shift, and go to state 82
    LT         shift, and go to state 83
    GE         shift, and go to state 84
    LE         shift, and go to state 85
    LSHIFT     shift, and go to state 86
    RSHIFT     shift, and go to state 87
    ADD        shift, and go to state 88
    SUB        shift, and go to state 89
    MUL        shift, and go to state 90
    DIV        shift, and go to state 91
    SUR        shift, and go to state 92
    INCR       shift, and go to state 93
    DECR       shift, and go to state 94
    SEMICOLON  shift, and go to state 196


State 191

   21 for_decl: T IDENTIFIER LOP_ASS . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 197


State 192

   11 statements: statements . statement
   17 statement: IF LEFTBR expr RIGHTBR LBRACE statements . RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    RBRACE       shift, and go to state 198
    SEMICOLON    shift, and go to state 139
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43
    IF           shift, and go to state 140
    WHILE        shift, and go to state 141
    FOR          shift, and go to state 142
    RETURN       shift, and go to state 143
    CONST        shift, and go to state 6

    statement    go to state 165
    declaration  go to state 146
    expr         go to state 147
    T            go to state 148


State 193

   11 statements: statements . statement
   14 statement: WHILE LEFTBR expr RIGHTBR LBRACE statements . RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    RBRACE       shift, and go to state 199
    SEMICOLON    shift, and go to state 139
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43
    IF           shift, and go to state 140
    WHILE        shift, and go to state 141
    FOR          shift, and go to state 142
    RETURN       shift, and go to state 143
    CONST        shift, and go to state 6

    statement    go to state 165
    declaration  go to state 146
    expr         go to state 147
    T            go to state 148


State 194

    9 PARMS: PARMS COMMA T IDENTIFIER .
   22 for_decl: PARMS COMMA T IDENTIFIER . LOP_ASS expr

    LOP_ASS  shift, and go to state 200

    $default  reduce using rule 9 (PARMS)


State 195

   16 statement: FOR LEFTBR for_decl SEMICOLON expr SEMICOLON . expr RIGHTBR LBRACE statements RBRACE

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 201


State 196

   15 statement: FOR LEFTBR expr SEMICOLON expr SEMICOLON . expr RIGHTBR LBRACE statements RBRACE

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 202


State 197

   21 for_decl: T IDENTIFIER LOP_ASS expr .
   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 21 (for_decl)


State 198

   17 statement: IF LEFTBR expr RIGHTBR LBRACE statements RBRACE .

    $default  reduce using rule 17 (statement)


State 199

   14 statement: WHILE LEFTBR expr RIGHTBR LBRACE statements RBRACE .

    $default  reduce using rule 14 (statement)


State 200

   22 for_decl: PARMS COMMA T IDENTIFIER LOP_ASS . expr

    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43

    expr  go to state 203


State 201

   16 statement: FOR LEFTBR for_decl SEMICOLON expr SEMICOLON expr . RIGHTBR LBRACE statements RBRACE
   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94
    RIGHTBR  shift, and go to state 204


State 202

   15 statement: FOR LEFTBR expr SEMICOLON expr SEMICOLON expr . RIGHTBR LBRACE statements RBRACE
   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94
    RIGHTBR  shift, and go to state 205


State 203

   22 for_decl: PARMS COMMA T IDENTIFIER LOP_ASS expr .
   47 expr: expr . ADD expr
   48     | expr . SUB expr
   49     | expr . MUL expr
   50     | expr . DIV expr
   51     | expr . SUR expr
   52     | expr . LSHIFT expr
   53     | expr . RSHIFT expr
   54     | expr . BIT_AND expr
   55     | expr . BIT_OR expr
   56     | expr . BIT_XOR expr
   57     | expr . EQ expr
   58     | expr . UEQ expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOG_AND expr
   64     | expr . LOG_OR expr
   65     | expr . LOP_ASS expr
   66     | expr . ADD_ASS expr
   67     | expr . SUB_ASS expr
   68     | expr . MUL_ASS expr
   69     | expr . DIV_ASS expr
   70     | expr . SUR_ASS expr
   71     | expr . LS_ASS expr
   72     | expr . RS_ASS expr
   73     | expr . OR_ASS expr
   74     | expr . AND_ASS expr
   75     | expr . XOR_ASS expr
   83     | expr . INCR
   84     | expr . DECR

    LOP_ASS  shift, and go to state 64
    ADD_ASS  shift, and go to state 65
    SUB_ASS  shift, and go to state 66
    MUL_ASS  shift, and go to state 67
    DIV_ASS  shift, and go to state 68
    SUR_ASS  shift, and go to state 69
    LS_ASS   shift, and go to state 70
    RS_ASS   shift, and go to state 71
    AND_ASS  shift, and go to state 72
    OR_ASS   shift, and go to state 73
    XOR_ASS  shift, and go to state 74
    LOG_OR   shift, and go to state 75
    LOG_AND  shift, and go to state 76
    BIT_OR   shift, and go to state 77
    BIT_XOR  shift, and go to state 78
    BIT_AND  shift, and go to state 79
    EQ       shift, and go to state 80
    UEQ      shift, and go to state 81
    GT       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    LE       shift, and go to state 85
    LSHIFT   shift, and go to state 86
    RSHIFT   shift, and go to state 87
    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    SUR      shift, and go to state 92
    INCR     shift, and go to state 93
    DECR     shift, and go to state 94

    $default  reduce using rule 22 (for_decl)


State 204

   16 statement: FOR LEFTBR for_decl SEMICOLON expr SEMICOLON expr RIGHTBR . LBRACE statements RBRACE

    LBRACE  shift, and go to state 206


State 205

   15 statement: FOR LEFTBR expr SEMICOLON expr SEMICOLON expr RIGHTBR . LBRACE statements RBRACE

    LBRACE  shift, and go to state 207


State 206

   16 statement: FOR LEFTBR for_decl SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE . statements RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    SEMICOLON    shift, and go to state 139
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43
    IF           shift, and go to state 140
    WHILE        shift, and go to state 141
    FOR          shift, and go to state 142
    RETURN       shift, and go to state 143
    CONST        shift, and go to state 6

    statements   go to state 208
    statement    go to state 145
    declaration  go to state 146
    expr         go to state 147
    T            go to state 148


State 207

   15 statement: FOR LEFTBR expr SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE . statements RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    SEMICOLON    shift, and go to state 139
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43
    IF           shift, and go to state 140
    WHILE        shift, and go to state 141
    FOR          shift, and go to state 142
    RETURN       shift, and go to state 143
    CONST        shift, and go to state 6

    statements   go to state 209
    statement    go to state 145
    declaration  go to state 146
    expr         go to state 147
    T            go to state 148


State 208

   11 statements: statements . statement
   16 statement: FOR LEFTBR for_decl SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements . RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    RBRACE       shift, and go to state 210
    SEMICOLON    shift, and go to state 139
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43
    IF           shift, and go to state 140
    WHILE        shift, and go to state 141
    FOR          shift, and go to state 142
    RETURN       shift, and go to state 143
    CONST        shift, and go to state 6

    statement    go to state 165
    declaration  go to state 146
    expr         go to state 147
    T            go to state 148


State 209

   11 statements: statements . statement
   15 statement: FOR LEFTBR expr SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements . RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 31
    ADD          shift, and go to state 32
    SUB          shift, and go to state 33
    BIT_NOT      shift, and go to state 34
    LOG_NOT      shift, and go to state 35
    INCR         shift, and go to state 36
    DECR         shift, and go to state 37
    LEFTBR       shift, and go to state 38
    RBRACE       shift, and go to state 211
    SEMICOLON    shift, and go to state 139
    IDENTIFIER   shift, and go to state 39
    INTEGER      shift, and go to state 40
    CHAR         shift, and go to state 41
    STRING       shift, and go to state 42
    HEX_INTEGER  shift, and go to state 43
    IF           shift, and go to state 140
    WHILE        shift, and go to state 141
    FOR          shift, and go to state 142
    RETURN       shift, and go to state 143
    CONST        shift, and go to state 6

    statement    go to state 165
    declaration  go to state 146
    expr         go to state 147
    T            go to state 148


State 210

   16 statement: FOR LEFTBR for_decl SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE .

    $default  reduce using rule 16 (statement)


State 211

   15 statement: FOR LEFTBR expr SEMICOLON expr SEMICOLON expr RIGHTBR LBRACE statements RBRACE .

    $default  reduce using rule 15 (statement)
