Terminals unused in grammar

    BOOL


Grammar

    0 $accept: program $end

    1 program: units

    2 units: declaration SEMICOLON
    3      | function
    4      | units declaration SEMICOLON
    5      | units function

    6 function: T IDENTIFIER for_LEFTBR PARMS for_RIGHTBR block

    7 PARMS: T IDENTIFIER
    8      | PARMS COMMA T IDENTIFIER
    9      | %empty

   10 block_item: statement
   11           | declaration SEMICOLON

   12 block_items: %empty
   13            | block_items block_item

   14 block: LBRACE block_items RBRACE

   15 statement: SEMICOLON
   16          | block
   17          | WHILE LEFTBR expr RIGHTBR statement
   18          | FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement
   19          | IF LEFTBR expr RIGHTBR statement
   20          | IF LEFTBR expr RIGHTBR statement ELSE statement
   21          | RETURN expr SEMICOLON
   22          | RETURN SEMICOLON
   23          | BREAK SEMICOLON
   24          | CONTINUE SEMICOLON
   25          | expr SEMICOLON

   26 for_expr: declaration
   27         | expr
   28         | %empty

   29 for_LEFTBR: LEFTBR

   30 for_RIGHTBR: RIGHTBR

   31 declaration: T IDENTIFIERS
   32            | T ARRAY
   33            | CONST T_INT IDENTIFIER LOP_ASS CONST_EXP
   34            | CONST T_CHAR IDENTIFIER LOP_ASS CHAR
   35            | CONST T_BOOL IDENTIFIER LOP_ASS INTEGER

   36 CONST_EXP: INTEGER
   37          | CONST_EXP ADD CONST_EXP
   38          | CONST_EXP SUB CONST_EXP
   39          | CONST_EXP MUL CONST_EXP
   40          | CONST_EXP DIV CONST_EXP
   41          | CONST_EXP LSHIFT CONST_EXP
   42          | SUB CONST_EXP
   43          | LEFTBR CONST_EXP RIGHTBR

   44 ARRAY: IDENTIFIER M_LBR CONST_EXP M_RBR
   45      | ARRAY M_LBR CONST_EXP M_RBR

   46 ARRAY2: IDENTIFIER M_LBR expr M_RBR
   47       | ARRAY2 M_LBR expr M_RBR

   48 LVAL: ARRAY2
   49     | IDENTIFIER

   50 decl_item: IDENTIFIER
   51          | IDENTIFIER LOP_ASS expr

   52 IDENTIFIERS: decl_item
   53            | IDENTIFIERS COMMA decl_item

   54 PAS: %empty
   55    | PAS COMMA expr
   56    | expr

   57 expr: IDENTIFIER
   58     | INTEGER
   59     | HEX_INTEGER
   60     | CHAR
   61     | STRING
   62     | ARRAY2
   63     | IDENTIFIER LEFTBR PAS RIGHTBR
   64     | expr ADD expr
   65     | expr SUB expr
   66     | expr MUL expr
   67     | expr DIV expr
   68     | expr SUR expr
   69     | expr LSHIFT expr
   70     | expr RSHIFT expr
   71     | expr BIT_AND expr
   72     | expr BIT_OR expr
   73     | expr BIT_XOR expr
   74     | expr EQ expr
   75     | expr UEQ expr
   76     | expr LT expr
   77     | expr GT expr
   78     | expr LE expr
   79     | expr GE expr
   80     | expr LOG_AND expr
   81     | expr LOG_OR expr
   82     | LVAL LOP_ASS expr
   83     | LVAL ADD_ASS expr
   84     | LVAL SUB_ASS expr
   85     | LVAL MUL_ASS expr
   86     | LVAL DIV_ASS expr
   87     | LVAL SUR_ASS expr
   88     | LVAL LS_ASS expr
   89     | LVAL RS_ASS expr
   90     | LVAL OR_ASS expr
   91     | LVAL AND_ASS expr
   92     | LVAL XOR_ASS expr
   93     | SUB expr
   94     | ADD expr
   95     | LOG_NOT expr
   96     | BIT_NOT expr
   97     | BIT_AND expr
   98     | MUL expr
   99     | INCR expr
  100     | DECR expr
  101     | expr INCR
  102     | expr DECR
  103     | LEFTBR expr RIGHTBR

  104 T: T1
  105  | T1 MUL

  106 T1: T_INT
  107   | T_CHAR
  108   | T_BOOL
  109   | T_STRING
  110   | T_VOID


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    T_CHAR (258) 34 107
    T_INT (259) 33 106
    T_STRING (260) 109
    T_BOOL (261) 35 108
    T_VOID (262) 110
    LOP_ASS (263) 33 34 35 51 82
    ADD_ASS (264) 83
    SUB_ASS (265) 84
    MUL_ASS (266) 85
    DIV_ASS (267) 86
    SUR_ASS (268) 87
    LS_ASS (269) 88
    RS_ASS (270) 89
    AND_ASS (271) 91
    OR_ASS (272) 90
    XOR_ASS (273) 92
    LOG_OR (274) 81
    LOG_AND (275) 80
    BIT_OR (276) 72
    BIT_XOR (277) 73
    BIT_AND (278) 71 97
    EQ (279) 74
    UEQ (280) 75
    GT (281) 77
    LT (282) 76
    GE (283) 79
    LE (284) 78
    LSHIFT (285) 41 69
    RSHIFT (286) 70
    ADD (287) 37 64 94
    SUB (288) 38 42 65 93
    MUL (289) 39 66 98 105
    DIV (290) 40 67
    SUR (291) 68
    ADDR (292)
    STAR (293)
    LEFTBR (294) 17 19 20 29 43 63 103
    RIGHTBR (295) 17 19 20 30 43 63 103
    LOG_NOT (296) 95
    BIT_NOT (297) 96
    UMINUS (298)
    UADD (299)
    INCR (300) 99 101
    DECR (301) 100 102
    LBRACE (302) 14
    RBRACE (303) 14
    M_LBR (304) 44 45 46 47
    M_RBR (305) 44 45 46 47
    BACK_INCR (306)
    BACK_DECR (307)
    SEMICOLON (308) 2 4 11 15 18 21 22 23 24 25
    COMMA (309) 8 53 55
    IDENTIFIER (310) 6 7 8 33 34 35 44 46 49 50 51 57 63
    INTEGER (311) 35 36 58
    CHAR (312) 34 60
    BOOL (313)
    STRING (314) 61
    HEX_INTEGER (315) 59
    IF (316) 19 20
    WHILE (317) 17
    FOR (318) 18
    RETURN (319) 21 22
    CONST (320) 33 34 35
    ELSE (321) 20
    BREAK (322) 23
    CONTINUE (323) 24


Nonterminals, with rules where they appear

    $accept (69)
        on left: 0
    program (70)
        on left: 1
        on right: 0
    units (71)
        on left: 2 3 4 5
        on right: 1 4 5
    function (72)
        on left: 6
        on right: 3 5
    PARMS (73)
        on left: 7 8 9
        on right: 6 8
    block_item (74)
        on left: 10 11
        on right: 13
    block_items (75)
        on left: 12 13
        on right: 13 14
    block (76)
        on left: 14
        on right: 6 16
    statement (77)
        on left: 15 16 17 18 19 20 21 22 23 24 25
        on right: 10 17 18 19 20
    for_expr (78)
        on left: 26 27 28
        on right: 18
    for_LEFTBR (79)
        on left: 29
        on right: 6 18
    for_RIGHTBR (80)
        on left: 30
        on right: 6 18
    declaration (81)
        on left: 31 32 33 34 35
        on right: 2 4 11 26
    CONST_EXP (82)
        on left: 36 37 38 39 40 41 42 43
        on right: 33 37 38 39 40 41 42 43 44 45
    ARRAY (83)
        on left: 44 45
        on right: 32 45
    ARRAY2 (84)
        on left: 46 47
        on right: 47 48 62
    LVAL (85)
        on left: 48 49
        on right: 82 83 84 85 86 87 88 89 90 91 92
    decl_item (86)
        on left: 50 51
        on right: 52 53
    IDENTIFIERS (87)
        on left: 52 53
        on right: 31 53
    PAS (88)
        on left: 54 55 56
        on right: 55 63
    expr (89)
        on left: 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103
        on right: 17 19 20 21 25 27 46 47 51 55 56 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103
    T (90)
        on left: 104 105
        on right: 6 7 8 31 32
    T1 (91)
        on left: 106 107 108 109 110
        on right: 104 105


State 0

    0 $accept: . program $end

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    CONST     shift, and go to state 6

    program      go to state 7
    units        go to state 8
    function     go to state 9
    declaration  go to state 10
    T            go to state 11
    T1           go to state 12


State 1

  107 T1: T_CHAR .

    $default  reduce using rule 107 (T1)


State 2

  106 T1: T_INT .

    $default  reduce using rule 106 (T1)


State 3

  109 T1: T_STRING .

    $default  reduce using rule 109 (T1)


State 4

  108 T1: T_BOOL .

    $default  reduce using rule 108 (T1)


State 5

  110 T1: T_VOID .

    $default  reduce using rule 110 (T1)


State 6

   33 declaration: CONST . T_INT IDENTIFIER LOP_ASS CONST_EXP
   34            | CONST . T_CHAR IDENTIFIER LOP_ASS CHAR
   35            | CONST . T_BOOL IDENTIFIER LOP_ASS INTEGER

    T_CHAR  shift, and go to state 13
    T_INT   shift, and go to state 14
    T_BOOL  shift, and go to state 15


State 7

    0 $accept: program . $end

    $end  shift, and go to state 16


State 8

    1 program: units .
    4 units: units . declaration SEMICOLON
    5      | units . function

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    CONST     shift, and go to state 6

    $default  reduce using rule 1 (program)

    function     go to state 17
    declaration  go to state 18
    T            go to state 11
    T1           go to state 12


State 9

    3 units: function .

    $default  reduce using rule 3 (units)


State 10

    2 units: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 19


State 11

    6 function: T . IDENTIFIER for_LEFTBR PARMS for_RIGHTBR block
   31 declaration: T . IDENTIFIERS
   32            | T . ARRAY

    IDENTIFIER  shift, and go to state 20

    ARRAY        go to state 21
    decl_item    go to state 22
    IDENTIFIERS  go to state 23


State 12

  104 T: T1 .
  105  | T1 . MUL

    MUL  shift, and go to state 24

    $default  reduce using rule 104 (T)


State 13

   34 declaration: CONST T_CHAR . IDENTIFIER LOP_ASS CHAR

    IDENTIFIER  shift, and go to state 25


State 14

   33 declaration: CONST T_INT . IDENTIFIER LOP_ASS CONST_EXP

    IDENTIFIER  shift, and go to state 26


State 15

   35 declaration: CONST T_BOOL . IDENTIFIER LOP_ASS INTEGER

    IDENTIFIER  shift, and go to state 27


State 16

    0 $accept: program $end .

    $default  accept


State 17

    5 units: units function .

    $default  reduce using rule 5 (units)


State 18

    4 units: units declaration . SEMICOLON

    SEMICOLON  shift, and go to state 28


State 19

    2 units: declaration SEMICOLON .

    $default  reduce using rule 2 (units)


State 20

    6 function: T IDENTIFIER . for_LEFTBR PARMS for_RIGHTBR block
   44 ARRAY: IDENTIFIER . M_LBR CONST_EXP M_RBR
   50 decl_item: IDENTIFIER .
   51          | IDENTIFIER . LOP_ASS expr

    LOP_ASS  shift, and go to state 29
    LEFTBR   shift, and go to state 30
    M_LBR    shift, and go to state 31

    $default  reduce using rule 50 (decl_item)

    for_LEFTBR  go to state 32


State 21

   32 declaration: T ARRAY .
   45 ARRAY: ARRAY . M_LBR CONST_EXP M_RBR

    M_LBR  shift, and go to state 33

    $default  reduce using rule 32 (declaration)


State 22

   52 IDENTIFIERS: decl_item .

    $default  reduce using rule 52 (IDENTIFIERS)


State 23

   31 declaration: T IDENTIFIERS .
   53 IDENTIFIERS: IDENTIFIERS . COMMA decl_item

    COMMA  shift, and go to state 34

    $default  reduce using rule 31 (declaration)


State 24

  105 T: T1 MUL .

    $default  reduce using rule 105 (T)


State 25

   34 declaration: CONST T_CHAR IDENTIFIER . LOP_ASS CHAR

    LOP_ASS  shift, and go to state 35


State 26

   33 declaration: CONST T_INT IDENTIFIER . LOP_ASS CONST_EXP

    LOP_ASS  shift, and go to state 36


State 27

   35 declaration: CONST T_BOOL IDENTIFIER . LOP_ASS INTEGER

    LOP_ASS  shift, and go to state 37


State 28

    4 units: units declaration SEMICOLON .

    $default  reduce using rule 4 (units)


State 29

   51 decl_item: IDENTIFIER LOP_ASS . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 54


State 30

   29 for_LEFTBR: LEFTBR .

    $default  reduce using rule 29 (for_LEFTBR)


State 31

   44 ARRAY: IDENTIFIER M_LBR . CONST_EXP M_RBR

    SUB      shift, and go to state 55
    LEFTBR   shift, and go to state 56
    INTEGER  shift, and go to state 57

    CONST_EXP  go to state 58


State 32

    6 function: T IDENTIFIER for_LEFTBR . PARMS for_RIGHTBR block

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5

    $default  reduce using rule 9 (PARMS)

    PARMS  go to state 59
    T      go to state 60
    T1     go to state 12


State 33

   45 ARRAY: ARRAY M_LBR . CONST_EXP M_RBR

    SUB      shift, and go to state 55
    LEFTBR   shift, and go to state 56
    INTEGER  shift, and go to state 57

    CONST_EXP  go to state 61


State 34

   53 IDENTIFIERS: IDENTIFIERS COMMA . decl_item

    IDENTIFIER  shift, and go to state 62

    decl_item  go to state 63


State 35

   34 declaration: CONST T_CHAR IDENTIFIER LOP_ASS . CHAR

    CHAR  shift, and go to state 64


State 36

   33 declaration: CONST T_INT IDENTIFIER LOP_ASS . CONST_EXP

    SUB      shift, and go to state 55
    LEFTBR   shift, and go to state 56
    INTEGER  shift, and go to state 57

    CONST_EXP  go to state 65


State 37

   35 declaration: CONST T_BOOL IDENTIFIER LOP_ASS . INTEGER

    INTEGER  shift, and go to state 66


State 38

   97 expr: BIT_AND . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 67


State 39

   94 expr: ADD . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 68


State 40

   93 expr: SUB . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 69


State 41

   98 expr: MUL . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 70


State 42

  103 expr: LEFTBR . expr RIGHTBR

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 71


State 43

   95 expr: LOG_NOT . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 72


State 44

   96 expr: BIT_NOT . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 73


State 45

   99 expr: INCR . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 74


State 46

  100 expr: DECR . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 75


State 47

   46 ARRAY2: IDENTIFIER . M_LBR expr M_RBR
   49 LVAL: IDENTIFIER .
   57 expr: IDENTIFIER .
   63     | IDENTIFIER . LEFTBR PAS RIGHTBR

    LEFTBR  shift, and go to state 76
    M_LBR   shift, and go to state 77

    LOP_ASS   reduce using rule 49 (LVAL)
    ADD_ASS   reduce using rule 49 (LVAL)
    SUB_ASS   reduce using rule 49 (LVAL)
    MUL_ASS   reduce using rule 49 (LVAL)
    DIV_ASS   reduce using rule 49 (LVAL)
    SUR_ASS   reduce using rule 49 (LVAL)
    LS_ASS    reduce using rule 49 (LVAL)
    RS_ASS    reduce using rule 49 (LVAL)
    AND_ASS   reduce using rule 49 (LVAL)
    OR_ASS    reduce using rule 49 (LVAL)
    XOR_ASS   reduce using rule 49 (LVAL)
    $default  reduce using rule 57 (expr)


State 48

   58 expr: INTEGER .

    $default  reduce using rule 58 (expr)


State 49

   60 expr: CHAR .

    $default  reduce using rule 60 (expr)


State 50

   61 expr: STRING .

    $default  reduce using rule 61 (expr)


State 51

   59 expr: HEX_INTEGER .

    $default  reduce using rule 59 (expr)


State 52

   47 ARRAY2: ARRAY2 . M_LBR expr M_RBR
   48 LVAL: ARRAY2 .
   62 expr: ARRAY2 .

    M_LBR  shift, and go to state 78

    LOP_ASS   reduce using rule 48 (LVAL)
    ADD_ASS   reduce using rule 48 (LVAL)
    SUB_ASS   reduce using rule 48 (LVAL)
    MUL_ASS   reduce using rule 48 (LVAL)
    DIV_ASS   reduce using rule 48 (LVAL)
    SUR_ASS   reduce using rule 48 (LVAL)
    LS_ASS    reduce using rule 48 (LVAL)
    RS_ASS    reduce using rule 48 (LVAL)
    AND_ASS   reduce using rule 48 (LVAL)
    OR_ASS    reduce using rule 48 (LVAL)
    XOR_ASS   reduce using rule 48 (LVAL)
    $default  reduce using rule 62 (expr)


State 53

   82 expr: LVAL . LOP_ASS expr
   83     | LVAL . ADD_ASS expr
   84     | LVAL . SUB_ASS expr
   85     | LVAL . MUL_ASS expr
   86     | LVAL . DIV_ASS expr
   87     | LVAL . SUR_ASS expr
   88     | LVAL . LS_ASS expr
   89     | LVAL . RS_ASS expr
   90     | LVAL . OR_ASS expr
   91     | LVAL . AND_ASS expr
   92     | LVAL . XOR_ASS expr

    LOP_ASS  shift, and go to state 79
    ADD_ASS  shift, and go to state 80
    SUB_ASS  shift, and go to state 81
    MUL_ASS  shift, and go to state 82
    DIV_ASS  shift, and go to state 83
    SUR_ASS  shift, and go to state 84
    LS_ASS   shift, and go to state 85
    RS_ASS   shift, and go to state 86
    AND_ASS  shift, and go to state 87
    OR_ASS   shift, and go to state 88
    XOR_ASS  shift, and go to state 89


State 54

   51 decl_item: IDENTIFIER LOP_ASS expr .
   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109

    $default  reduce using rule 51 (decl_item)


State 55

   42 CONST_EXP: SUB . CONST_EXP

    SUB      shift, and go to state 55
    LEFTBR   shift, and go to state 56
    INTEGER  shift, and go to state 57

    CONST_EXP  go to state 110


State 56

   43 CONST_EXP: LEFTBR . CONST_EXP RIGHTBR

    SUB      shift, and go to state 55
    LEFTBR   shift, and go to state 56
    INTEGER  shift, and go to state 57

    CONST_EXP  go to state 111


State 57

   36 CONST_EXP: INTEGER .

    $default  reduce using rule 36 (CONST_EXP)


State 58

   37 CONST_EXP: CONST_EXP . ADD CONST_EXP
   38          | CONST_EXP . SUB CONST_EXP
   39          | CONST_EXP . MUL CONST_EXP
   40          | CONST_EXP . DIV CONST_EXP
   41          | CONST_EXP . LSHIFT CONST_EXP
   44 ARRAY: IDENTIFIER M_LBR CONST_EXP . M_RBR

    LSHIFT  shift, and go to state 112
    ADD     shift, and go to state 113
    SUB     shift, and go to state 114
    MUL     shift, and go to state 115
    DIV     shift, and go to state 116
    M_RBR   shift, and go to state 117


State 59

    6 function: T IDENTIFIER for_LEFTBR PARMS . for_RIGHTBR block
    8 PARMS: PARMS . COMMA T IDENTIFIER

    RIGHTBR  shift, and go to state 118
    COMMA    shift, and go to state 119

    for_RIGHTBR  go to state 120


State 60

    7 PARMS: T . IDENTIFIER

    IDENTIFIER  shift, and go to state 121


State 61

   37 CONST_EXP: CONST_EXP . ADD CONST_EXP
   38          | CONST_EXP . SUB CONST_EXP
   39          | CONST_EXP . MUL CONST_EXP
   40          | CONST_EXP . DIV CONST_EXP
   41          | CONST_EXP . LSHIFT CONST_EXP
   45 ARRAY: ARRAY M_LBR CONST_EXP . M_RBR

    LSHIFT  shift, and go to state 112
    ADD     shift, and go to state 113
    SUB     shift, and go to state 114
    MUL     shift, and go to state 115
    DIV     shift, and go to state 116
    M_RBR   shift, and go to state 122


State 62

   50 decl_item: IDENTIFIER .
   51          | IDENTIFIER . LOP_ASS expr

    LOP_ASS  shift, and go to state 29

    $default  reduce using rule 50 (decl_item)


State 63

   53 IDENTIFIERS: IDENTIFIERS COMMA decl_item .

    $default  reduce using rule 53 (IDENTIFIERS)


State 64

   34 declaration: CONST T_CHAR IDENTIFIER LOP_ASS CHAR .

    $default  reduce using rule 34 (declaration)


State 65

   33 declaration: CONST T_INT IDENTIFIER LOP_ASS CONST_EXP .
   37 CONST_EXP: CONST_EXP . ADD CONST_EXP
   38          | CONST_EXP . SUB CONST_EXP
   39          | CONST_EXP . MUL CONST_EXP
   40          | CONST_EXP . DIV CONST_EXP
   41          | CONST_EXP . LSHIFT CONST_EXP

    LSHIFT  shift, and go to state 112
    ADD     shift, and go to state 113
    SUB     shift, and go to state 114
    MUL     shift, and go to state 115
    DIV     shift, and go to state 116

    $default  reduce using rule 33 (declaration)


State 66

   35 declaration: CONST T_BOOL IDENTIFIER LOP_ASS INTEGER .

    $default  reduce using rule 35 (declaration)


State 67

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
   97     | BIT_AND expr .
  101     | expr . INCR
  102     | expr . DECR

    INCR  shift, and go to state 108
    DECR  shift, and go to state 109

    $default  reduce using rule 97 (expr)


State 68

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
   94     | ADD expr .
  101     | expr . INCR
  102     | expr . DECR

    INCR  shift, and go to state 108
    DECR  shift, and go to state 109

    $default  reduce using rule 94 (expr)


State 69

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
   93     | SUB expr .
  101     | expr . INCR
  102     | expr . DECR

    INCR  shift, and go to state 108
    DECR  shift, and go to state 109

    $default  reduce using rule 93 (expr)


State 70

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
   98     | MUL expr .
  101     | expr . INCR
  102     | expr . DECR

    INCR  shift, and go to state 108
    DECR  shift, and go to state 109

    $default  reduce using rule 98 (expr)


State 71

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR
  103     | LEFTBR expr . RIGHTBR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    RIGHTBR  shift, and go to state 123
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109


State 72

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
   95     | LOG_NOT expr .
  101     | expr . INCR
  102     | expr . DECR

    INCR  shift, and go to state 108
    DECR  shift, and go to state 109

    $default  reduce using rule 95 (expr)


State 73

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
   96     | BIT_NOT expr .
  101     | expr . INCR
  102     | expr . DECR

    INCR  shift, and go to state 108
    DECR  shift, and go to state 109

    $default  reduce using rule 96 (expr)


State 74

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
   99     | INCR expr .
  101     | expr . INCR
  102     | expr . DECR

    INCR  shift, and go to state 108
    DECR  shift, and go to state 109

    $default  reduce using rule 99 (expr)


State 75

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  100     | DECR expr .
  101     | expr . INCR
  102     | expr . DECR

    INCR  shift, and go to state 108
    DECR  shift, and go to state 109

    $default  reduce using rule 100 (expr)


State 76

   63 expr: IDENTIFIER LEFTBR . PAS RIGHTBR

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    $default  reduce using rule 54 (PAS)

    ARRAY2  go to state 52
    LVAL    go to state 53
    PAS     go to state 124
    expr    go to state 125


State 77

   46 ARRAY2: IDENTIFIER M_LBR . expr M_RBR

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 126


State 78

   47 ARRAY2: ARRAY2 M_LBR . expr M_RBR

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 127


State 79

   82 expr: LVAL LOP_ASS . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 128


State 80

   83 expr: LVAL ADD_ASS . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 129


State 81

   84 expr: LVAL SUB_ASS . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 130


State 82

   85 expr: LVAL MUL_ASS . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 131


State 83

   86 expr: LVAL DIV_ASS . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 132


State 84

   87 expr: LVAL SUR_ASS . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 133


State 85

   88 expr: LVAL LS_ASS . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 134


State 86

   89 expr: LVAL RS_ASS . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 135


State 87

   91 expr: LVAL AND_ASS . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 136


State 88

   90 expr: LVAL OR_ASS . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 137


State 89

   92 expr: LVAL XOR_ASS . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 138


State 90

   81 expr: expr LOG_OR . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 139


State 91

   80 expr: expr LOG_AND . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 140


State 92

   72 expr: expr BIT_OR . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 141


State 93

   73 expr: expr BIT_XOR . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 142


State 94

   71 expr: expr BIT_AND . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 143


State 95

   74 expr: expr EQ . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 144


State 96

   75 expr: expr UEQ . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 145


State 97

   77 expr: expr GT . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 146


State 98

   76 expr: expr LT . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 147


State 99

   79 expr: expr GE . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 148


State 100

   78 expr: expr LE . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 149


State 101

   69 expr: expr LSHIFT . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 150


State 102

   70 expr: expr RSHIFT . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 151


State 103

   64 expr: expr ADD . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 152


State 104

   65 expr: expr SUB . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 153


State 105

   66 expr: expr MUL . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 154


State 106

   67 expr: expr DIV . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 155


State 107

   68 expr: expr SUR . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 156


State 108

  101 expr: expr INCR .

    $default  reduce using rule 101 (expr)


State 109

  102 expr: expr DECR .

    $default  reduce using rule 102 (expr)


State 110

   37 CONST_EXP: CONST_EXP . ADD CONST_EXP
   38          | CONST_EXP . SUB CONST_EXP
   39          | CONST_EXP . MUL CONST_EXP
   40          | CONST_EXP . DIV CONST_EXP
   41          | CONST_EXP . LSHIFT CONST_EXP
   42          | SUB CONST_EXP .

    $default  reduce using rule 42 (CONST_EXP)


State 111

   37 CONST_EXP: CONST_EXP . ADD CONST_EXP
   38          | CONST_EXP . SUB CONST_EXP
   39          | CONST_EXP . MUL CONST_EXP
   40          | CONST_EXP . DIV CONST_EXP
   41          | CONST_EXP . LSHIFT CONST_EXP
   43          | LEFTBR CONST_EXP . RIGHTBR

    LSHIFT   shift, and go to state 112
    ADD      shift, and go to state 113
    SUB      shift, and go to state 114
    MUL      shift, and go to state 115
    DIV      shift, and go to state 116
    RIGHTBR  shift, and go to state 157


State 112

   41 CONST_EXP: CONST_EXP LSHIFT . CONST_EXP

    SUB      shift, and go to state 55
    LEFTBR   shift, and go to state 56
    INTEGER  shift, and go to state 57

    CONST_EXP  go to state 158


State 113

   37 CONST_EXP: CONST_EXP ADD . CONST_EXP

    SUB      shift, and go to state 55
    LEFTBR   shift, and go to state 56
    INTEGER  shift, and go to state 57

    CONST_EXP  go to state 159


State 114

   38 CONST_EXP: CONST_EXP SUB . CONST_EXP

    SUB      shift, and go to state 55
    LEFTBR   shift, and go to state 56
    INTEGER  shift, and go to state 57

    CONST_EXP  go to state 160


State 115

   39 CONST_EXP: CONST_EXP MUL . CONST_EXP

    SUB      shift, and go to state 55
    LEFTBR   shift, and go to state 56
    INTEGER  shift, and go to state 57

    CONST_EXP  go to state 161


State 116

   40 CONST_EXP: CONST_EXP DIV . CONST_EXP

    SUB      shift, and go to state 55
    LEFTBR   shift, and go to state 56
    INTEGER  shift, and go to state 57

    CONST_EXP  go to state 162


State 117

   44 ARRAY: IDENTIFIER M_LBR CONST_EXP M_RBR .

    $default  reduce using rule 44 (ARRAY)


State 118

   30 for_RIGHTBR: RIGHTBR .

    $default  reduce using rule 30 (for_RIGHTBR)


State 119

    8 PARMS: PARMS COMMA . T IDENTIFIER

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5

    T   go to state 163
    T1  go to state 12


State 120

    6 function: T IDENTIFIER for_LEFTBR PARMS for_RIGHTBR . block

    LBRACE  shift, and go to state 164

    block  go to state 165


State 121

    7 PARMS: T IDENTIFIER .

    $default  reduce using rule 7 (PARMS)


State 122

   45 ARRAY: ARRAY M_LBR CONST_EXP M_RBR .

    $default  reduce using rule 45 (ARRAY)


State 123

  103 expr: LEFTBR expr RIGHTBR .

    $default  reduce using rule 103 (expr)


State 124

   55 PAS: PAS . COMMA expr
   63 expr: IDENTIFIER LEFTBR PAS . RIGHTBR

    RIGHTBR  shift, and go to state 166
    COMMA    shift, and go to state 167


State 125

   56 PAS: expr .
   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109

    $default  reduce using rule 56 (PAS)


State 126

   46 ARRAY2: IDENTIFIER M_LBR expr . M_RBR
   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109
    M_RBR    shift, and go to state 168


State 127

   47 ARRAY2: ARRAY2 M_LBR expr . M_RBR
   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109
    M_RBR    shift, and go to state 169


State 128

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
   82     | LVAL LOP_ASS expr .
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109

    $default  reduce using rule 82 (expr)


State 129

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
   83     | LVAL ADD_ASS expr .
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109

    $default  reduce using rule 83 (expr)


State 130

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
   84     | LVAL SUB_ASS expr .
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109

    $default  reduce using rule 84 (expr)


State 131

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
   85     | LVAL MUL_ASS expr .
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109

    $default  reduce using rule 85 (expr)


State 132

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
   86     | LVAL DIV_ASS expr .
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109

    $default  reduce using rule 86 (expr)


State 133

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
   87     | LVAL SUR_ASS expr .
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109

    $default  reduce using rule 87 (expr)


State 134

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
   88     | LVAL LS_ASS expr .
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109

    $default  reduce using rule 88 (expr)


State 135

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
   89     | LVAL RS_ASS expr .
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109

    $default  reduce using rule 89 (expr)


State 136

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
   91     | LVAL AND_ASS expr .
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109

    $default  reduce using rule 91 (expr)


State 137

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
   90     | LVAL OR_ASS expr .
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109

    $default  reduce using rule 90 (expr)


State 138

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
   92     | LVAL XOR_ASS expr .
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109

    $default  reduce using rule 92 (expr)


State 139

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
   81     | expr LOG_OR expr .
  101     | expr . INCR
  102     | expr . DECR

    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109

    $default  reduce using rule 81 (expr)


State 140

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   80     | expr LOG_AND expr .
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109

    $default  reduce using rule 80 (expr)


State 141

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   72     | expr BIT_OR expr .
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109

    $default  reduce using rule 72 (expr)


State 142

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   73     | expr BIT_XOR expr .
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109

    $default  reduce using rule 73 (expr)


State 143

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   71     | expr BIT_AND expr .
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    EQ      shift, and go to state 95
    UEQ     shift, and go to state 96
    GT      shift, and go to state 97
    LT      shift, and go to state 98
    GE      shift, and go to state 99
    LE      shift, and go to state 100
    LSHIFT  shift, and go to state 101
    RSHIFT  shift, and go to state 102
    ADD     shift, and go to state 103
    SUB     shift, and go to state 104
    MUL     shift, and go to state 105
    DIV     shift, and go to state 106
    SUR     shift, and go to state 107
    INCR    shift, and go to state 108
    DECR    shift, and go to state 109

    $default  reduce using rule 71 (expr)


State 144

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   74     | expr EQ expr .
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    GT      shift, and go to state 97
    LT      shift, and go to state 98
    GE      shift, and go to state 99
    LE      shift, and go to state 100
    LSHIFT  shift, and go to state 101
    RSHIFT  shift, and go to state 102
    ADD     shift, and go to state 103
    SUB     shift, and go to state 104
    MUL     shift, and go to state 105
    DIV     shift, and go to state 106
    SUR     shift, and go to state 107
    INCR    shift, and go to state 108
    DECR    shift, and go to state 109

    $default  reduce using rule 74 (expr)


State 145

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   75     | expr UEQ expr .
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    GT      shift, and go to state 97
    LT      shift, and go to state 98
    GE      shift, and go to state 99
    LE      shift, and go to state 100
    LSHIFT  shift, and go to state 101
    RSHIFT  shift, and go to state 102
    ADD     shift, and go to state 103
    SUB     shift, and go to state 104
    MUL     shift, and go to state 105
    DIV     shift, and go to state 106
    SUR     shift, and go to state 107
    INCR    shift, and go to state 108
    DECR    shift, and go to state 109

    $default  reduce using rule 75 (expr)


State 146

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   77     | expr GT expr .
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    LSHIFT  shift, and go to state 101
    RSHIFT  shift, and go to state 102
    ADD     shift, and go to state 103
    SUB     shift, and go to state 104
    MUL     shift, and go to state 105
    DIV     shift, and go to state 106
    SUR     shift, and go to state 107
    INCR    shift, and go to state 108
    DECR    shift, and go to state 109

    $default  reduce using rule 77 (expr)


State 147

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   76     | expr LT expr .
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    LSHIFT  shift, and go to state 101
    RSHIFT  shift, and go to state 102
    ADD     shift, and go to state 103
    SUB     shift, and go to state 104
    MUL     shift, and go to state 105
    DIV     shift, and go to state 106
    SUR     shift, and go to state 107
    INCR    shift, and go to state 108
    DECR    shift, and go to state 109

    $default  reduce using rule 76 (expr)


State 148

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   79     | expr GE expr .
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    LSHIFT  shift, and go to state 101
    RSHIFT  shift, and go to state 102
    ADD     shift, and go to state 103
    SUB     shift, and go to state 104
    MUL     shift, and go to state 105
    DIV     shift, and go to state 106
    SUR     shift, and go to state 107
    INCR    shift, and go to state 108
    DECR    shift, and go to state 109

    $default  reduce using rule 79 (expr)


State 149

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   78     | expr LE expr .
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    LSHIFT  shift, and go to state 101
    RSHIFT  shift, and go to state 102
    ADD     shift, and go to state 103
    SUB     shift, and go to state 104
    MUL     shift, and go to state 105
    DIV     shift, and go to state 106
    SUR     shift, and go to state 107
    INCR    shift, and go to state 108
    DECR    shift, and go to state 109

    $default  reduce using rule 78 (expr)


State 150

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   69     | expr LSHIFT expr .
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    ADD   shift, and go to state 103
    SUB   shift, and go to state 104
    MUL   shift, and go to state 105
    DIV   shift, and go to state 106
    SUR   shift, and go to state 107
    INCR  shift, and go to state 108
    DECR  shift, and go to state 109

    $default  reduce using rule 69 (expr)


State 151

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   70     | expr RSHIFT expr .
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    ADD   shift, and go to state 103
    SUB   shift, and go to state 104
    MUL   shift, and go to state 105
    DIV   shift, and go to state 106
    SUR   shift, and go to state 107
    INCR  shift, and go to state 108
    DECR  shift, and go to state 109

    $default  reduce using rule 70 (expr)


State 152

   64 expr: expr . ADD expr
   64     | expr ADD expr .
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    MUL   shift, and go to state 105
    DIV   shift, and go to state 106
    SUR   shift, and go to state 107
    INCR  shift, and go to state 108
    DECR  shift, and go to state 109

    $default  reduce using rule 64 (expr)


State 153

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   65     | expr SUB expr .
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    MUL   shift, and go to state 105
    DIV   shift, and go to state 106
    SUR   shift, and go to state 107
    INCR  shift, and go to state 108
    DECR  shift, and go to state 109

    $default  reduce using rule 65 (expr)


State 154

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   66     | expr MUL expr .
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    INCR  shift, and go to state 108
    DECR  shift, and go to state 109

    $default  reduce using rule 66 (expr)


State 155

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   67     | expr DIV expr .
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    INCR  shift, and go to state 108
    DECR  shift, and go to state 109

    $default  reduce using rule 67 (expr)


State 156

   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   68     | expr SUR expr .
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    INCR  shift, and go to state 108
    DECR  shift, and go to state 109

    $default  reduce using rule 68 (expr)


State 157

   43 CONST_EXP: LEFTBR CONST_EXP RIGHTBR .

    $default  reduce using rule 43 (CONST_EXP)


State 158

   37 CONST_EXP: CONST_EXP . ADD CONST_EXP
   38          | CONST_EXP . SUB CONST_EXP
   39          | CONST_EXP . MUL CONST_EXP
   40          | CONST_EXP . DIV CONST_EXP
   41          | CONST_EXP . LSHIFT CONST_EXP
   41          | CONST_EXP LSHIFT CONST_EXP .

    ADD  shift, and go to state 113
    SUB  shift, and go to state 114
    MUL  shift, and go to state 115
    DIV  shift, and go to state 116

    $default  reduce using rule 41 (CONST_EXP)


State 159

   37 CONST_EXP: CONST_EXP . ADD CONST_EXP
   37          | CONST_EXP ADD CONST_EXP .
   38          | CONST_EXP . SUB CONST_EXP
   39          | CONST_EXP . MUL CONST_EXP
   40          | CONST_EXP . DIV CONST_EXP
   41          | CONST_EXP . LSHIFT CONST_EXP

    MUL  shift, and go to state 115
    DIV  shift, and go to state 116

    $default  reduce using rule 37 (CONST_EXP)


State 160

   37 CONST_EXP: CONST_EXP . ADD CONST_EXP
   38          | CONST_EXP . SUB CONST_EXP
   38          | CONST_EXP SUB CONST_EXP .
   39          | CONST_EXP . MUL CONST_EXP
   40          | CONST_EXP . DIV CONST_EXP
   41          | CONST_EXP . LSHIFT CONST_EXP

    MUL  shift, and go to state 115
    DIV  shift, and go to state 116

    $default  reduce using rule 38 (CONST_EXP)


State 161

   37 CONST_EXP: CONST_EXP . ADD CONST_EXP
   38          | CONST_EXP . SUB CONST_EXP
   39          | CONST_EXP . MUL CONST_EXP
   39          | CONST_EXP MUL CONST_EXP .
   40          | CONST_EXP . DIV CONST_EXP
   41          | CONST_EXP . LSHIFT CONST_EXP

    $default  reduce using rule 39 (CONST_EXP)


State 162

   37 CONST_EXP: CONST_EXP . ADD CONST_EXP
   38          | CONST_EXP . SUB CONST_EXP
   39          | CONST_EXP . MUL CONST_EXP
   40          | CONST_EXP . DIV CONST_EXP
   40          | CONST_EXP DIV CONST_EXP .
   41          | CONST_EXP . LSHIFT CONST_EXP

    $default  reduce using rule 40 (CONST_EXP)


State 163

    8 PARMS: PARMS COMMA T . IDENTIFIER

    IDENTIFIER  shift, and go to state 170


State 164

   14 block: LBRACE . block_items RBRACE

    $default  reduce using rule 12 (block_items)

    block_items  go to state 171


State 165

    6 function: T IDENTIFIER for_LEFTBR PARMS for_RIGHTBR block .

    $default  reduce using rule 6 (function)


State 166

   63 expr: IDENTIFIER LEFTBR PAS RIGHTBR .

    $default  reduce using rule 63 (expr)


State 167

   55 PAS: PAS COMMA . expr

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 172


State 168

   46 ARRAY2: IDENTIFIER M_LBR expr M_RBR .

    $default  reduce using rule 46 (ARRAY2)


State 169

   47 ARRAY2: ARRAY2 M_LBR expr M_RBR .

    $default  reduce using rule 47 (ARRAY2)


State 170

    8 PARMS: PARMS COMMA T IDENTIFIER .

    $default  reduce using rule 8 (PARMS)


State 171

   13 block_items: block_items . block_item
   14 block: LBRACE block_items . RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    LBRACE       shift, and go to state 164
    RBRACE       shift, and go to state 173
    SEMICOLON    shift, and go to state 174
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51
    IF           shift, and go to state 175
    WHILE        shift, and go to state 176
    FOR          shift, and go to state 177
    RETURN       shift, and go to state 178
    CONST        shift, and go to state 6
    BREAK        shift, and go to state 179
    CONTINUE     shift, and go to state 180

    block_item   go to state 181
    block        go to state 182
    statement    go to state 183
    declaration  go to state 184
    ARRAY2       go to state 52
    LVAL         go to state 53
    expr         go to state 185
    T            go to state 186
    T1           go to state 12


State 172

   55 PAS: PAS COMMA expr .
   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109

    $default  reduce using rule 55 (PAS)


State 173

   14 block: LBRACE block_items RBRACE .

    $default  reduce using rule 14 (block)


State 174

   15 statement: SEMICOLON .

    $default  reduce using rule 15 (statement)


State 175

   19 statement: IF . LEFTBR expr RIGHTBR statement
   20          | IF . LEFTBR expr RIGHTBR statement ELSE statement

    LEFTBR  shift, and go to state 187


State 176

   17 statement: WHILE . LEFTBR expr RIGHTBR statement

    LEFTBR  shift, and go to state 188


State 177

   18 statement: FOR . for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement

    LEFTBR  shift, and go to state 30

    for_LEFTBR  go to state 189


State 178

   21 statement: RETURN . expr SEMICOLON
   22          | RETURN . SEMICOLON

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    SEMICOLON    shift, and go to state 190
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 191


State 179

   23 statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 192


State 180

   24 statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 193


State 181

   13 block_items: block_items block_item .

    $default  reduce using rule 13 (block_items)


State 182

   16 statement: block .

    $default  reduce using rule 16 (statement)


State 183

   10 block_item: statement .

    $default  reduce using rule 10 (block_item)


State 184

   11 block_item: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 194


State 185

   25 statement: expr . SEMICOLON
   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR     shift, and go to state 90
    LOG_AND    shift, and go to state 91
    BIT_OR     shift, and go to state 92
    BIT_XOR    shift, and go to state 93
    BIT_AND    shift, and go to state 94
    EQ         shift, and go to state 95
    UEQ        shift, and go to state 96
    GT         shift, and go to state 97
    LT         shift, and go to state 98
    GE         shift, and go to state 99
    LE         shift, and go to state 100
    LSHIFT     shift, and go to state 101
    RSHIFT     shift, and go to state 102
    ADD        shift, and go to state 103
    SUB        shift, and go to state 104
    MUL        shift, and go to state 105
    DIV        shift, and go to state 106
    SUR        shift, and go to state 107
    INCR       shift, and go to state 108
    DECR       shift, and go to state 109
    SEMICOLON  shift, and go to state 195


State 186

   31 declaration: T . IDENTIFIERS
   32            | T . ARRAY

    IDENTIFIER  shift, and go to state 196

    ARRAY        go to state 21
    decl_item    go to state 22
    IDENTIFIERS  go to state 23


State 187

   19 statement: IF LEFTBR . expr RIGHTBR statement
   20          | IF LEFTBR . expr RIGHTBR statement ELSE statement

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 197


State 188

   17 statement: WHILE LEFTBR . expr RIGHTBR statement

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51

    ARRAY2  go to state 52
    LVAL    go to state 53
    expr    go to state 198


State 189

   18 statement: FOR for_LEFTBR . for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51
    CONST        shift, and go to state 6

    $default  reduce using rule 28 (for_expr)

    for_expr     go to state 199
    declaration  go to state 200
    ARRAY2       go to state 52
    LVAL         go to state 53
    expr         go to state 201
    T            go to state 186
    T1           go to state 12


State 190

   22 statement: RETURN SEMICOLON .

    $default  reduce using rule 22 (statement)


State 191

   21 statement: RETURN expr . SEMICOLON
   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR     shift, and go to state 90
    LOG_AND    shift, and go to state 91
    BIT_OR     shift, and go to state 92
    BIT_XOR    shift, and go to state 93
    BIT_AND    shift, and go to state 94
    EQ         shift, and go to state 95
    UEQ        shift, and go to state 96
    GT         shift, and go to state 97
    LT         shift, and go to state 98
    GE         shift, and go to state 99
    LE         shift, and go to state 100
    LSHIFT     shift, and go to state 101
    RSHIFT     shift, and go to state 102
    ADD        shift, and go to state 103
    SUB        shift, and go to state 104
    MUL        shift, and go to state 105
    DIV        shift, and go to state 106
    SUR        shift, and go to state 107
    INCR       shift, and go to state 108
    DECR       shift, and go to state 109
    SEMICOLON  shift, and go to state 202


State 192

   23 statement: BREAK SEMICOLON .

    $default  reduce using rule 23 (statement)


State 193

   24 statement: CONTINUE SEMICOLON .

    $default  reduce using rule 24 (statement)


State 194

   11 block_item: declaration SEMICOLON .

    $default  reduce using rule 11 (block_item)


State 195

   25 statement: expr SEMICOLON .

    $default  reduce using rule 25 (statement)


State 196

   44 ARRAY: IDENTIFIER . M_LBR CONST_EXP M_RBR
   50 decl_item: IDENTIFIER .
   51          | IDENTIFIER . LOP_ASS expr

    LOP_ASS  shift, and go to state 29
    M_LBR    shift, and go to state 31

    $default  reduce using rule 50 (decl_item)


State 197

   19 statement: IF LEFTBR expr . RIGHTBR statement
   20          | IF LEFTBR expr . RIGHTBR statement ELSE statement
   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    RIGHTBR  shift, and go to state 203
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109


State 198

   17 statement: WHILE LEFTBR expr . RIGHTBR statement
   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    RIGHTBR  shift, and go to state 204
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109


State 199

   18 statement: FOR for_LEFTBR for_expr . SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement

    SEMICOLON  shift, and go to state 205


State 200

   26 for_expr: declaration .

    $default  reduce using rule 26 (for_expr)


State 201

   27 for_expr: expr .
   64 expr: expr . ADD expr
   65     | expr . SUB expr
   66     | expr . MUL expr
   67     | expr . DIV expr
   68     | expr . SUR expr
   69     | expr . LSHIFT expr
   70     | expr . RSHIFT expr
   71     | expr . BIT_AND expr
   72     | expr . BIT_OR expr
   73     | expr . BIT_XOR expr
   74     | expr . EQ expr
   75     | expr . UEQ expr
   76     | expr . LT expr
   77     | expr . GT expr
   78     | expr . LE expr
   79     | expr . GE expr
   80     | expr . LOG_AND expr
   81     | expr . LOG_OR expr
  101     | expr . INCR
  102     | expr . DECR

    LOG_OR   shift, and go to state 90
    LOG_AND  shift, and go to state 91
    BIT_OR   shift, and go to state 92
    BIT_XOR  shift, and go to state 93
    BIT_AND  shift, and go to state 94
    EQ       shift, and go to state 95
    UEQ      shift, and go to state 96
    GT       shift, and go to state 97
    LT       shift, and go to state 98
    GE       shift, and go to state 99
    LE       shift, and go to state 100
    LSHIFT   shift, and go to state 101
    RSHIFT   shift, and go to state 102
    ADD      shift, and go to state 103
    SUB      shift, and go to state 104
    MUL      shift, and go to state 105
    DIV      shift, and go to state 106
    SUR      shift, and go to state 107
    INCR     shift, and go to state 108
    DECR     shift, and go to state 109

    $default  reduce using rule 27 (for_expr)


State 202

   21 statement: RETURN expr SEMICOLON .

    $default  reduce using rule 21 (statement)


State 203

   19 statement: IF LEFTBR expr RIGHTBR . statement
   20          | IF LEFTBR expr RIGHTBR . statement ELSE statement

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    LBRACE       shift, and go to state 164
    SEMICOLON    shift, and go to state 174
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51
    IF           shift, and go to state 175
    WHILE        shift, and go to state 176
    FOR          shift, and go to state 177
    RETURN       shift, and go to state 178
    BREAK        shift, and go to state 179
    CONTINUE     shift, and go to state 180

    block      go to state 182
    statement  go to state 206
    ARRAY2     go to state 52
    LVAL       go to state 53
    expr       go to state 185


State 204

   17 statement: WHILE LEFTBR expr RIGHTBR . statement

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    LBRACE       shift, and go to state 164
    SEMICOLON    shift, and go to state 174
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51
    IF           shift, and go to state 175
    WHILE        shift, and go to state 176
    FOR          shift, and go to state 177
    RETURN       shift, and go to state 178
    BREAK        shift, and go to state 179
    CONTINUE     shift, and go to state 180

    block      go to state 182
    statement  go to state 207
    ARRAY2     go to state 52
    LVAL       go to state 53
    expr       go to state 185


State 205

   18 statement: FOR for_LEFTBR for_expr SEMICOLON . for_expr SEMICOLON for_expr for_RIGHTBR statement

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51
    CONST        shift, and go to state 6

    $default  reduce using rule 28 (for_expr)

    for_expr     go to state 208
    declaration  go to state 200
    ARRAY2       go to state 52
    LVAL         go to state 53
    expr         go to state 201
    T            go to state 186
    T1           go to state 12


State 206

   19 statement: IF LEFTBR expr RIGHTBR statement .
   20          | IF LEFTBR expr RIGHTBR statement . ELSE statement

    ELSE  shift, and go to state 209

    $default  reduce using rule 19 (statement)


State 207

   17 statement: WHILE LEFTBR expr RIGHTBR statement .

    $default  reduce using rule 17 (statement)


State 208

   18 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr . SEMICOLON for_expr for_RIGHTBR statement

    SEMICOLON  shift, and go to state 210


State 209

   20 statement: IF LEFTBR expr RIGHTBR statement ELSE . statement

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    LBRACE       shift, and go to state 164
    SEMICOLON    shift, and go to state 174
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51
    IF           shift, and go to state 175
    WHILE        shift, and go to state 176
    FOR          shift, and go to state 177
    RETURN       shift, and go to state 178
    BREAK        shift, and go to state 179
    CONTINUE     shift, and go to state 180

    block      go to state 182
    statement  go to state 211
    ARRAY2     go to state 52
    LVAL       go to state 53
    expr       go to state 185


State 210

   18 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON . for_expr for_RIGHTBR statement

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51
    CONST        shift, and go to state 6

    $default  reduce using rule 28 (for_expr)

    for_expr     go to state 212
    declaration  go to state 200
    ARRAY2       go to state 52
    LVAL         go to state 53
    expr         go to state 201
    T            go to state 186
    T1           go to state 12


State 211

   20 statement: IF LEFTBR expr RIGHTBR statement ELSE statement .

    $default  reduce using rule 20 (statement)


State 212

   18 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr . for_RIGHTBR statement

    RIGHTBR  shift, and go to state 118

    for_RIGHTBR  go to state 213


State 213

   18 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR . statement

    BIT_AND      shift, and go to state 38
    ADD          shift, and go to state 39
    SUB          shift, and go to state 40
    MUL          shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LOG_NOT      shift, and go to state 43
    BIT_NOT      shift, and go to state 44
    INCR         shift, and go to state 45
    DECR         shift, and go to state 46
    LBRACE       shift, and go to state 164
    SEMICOLON    shift, and go to state 174
    IDENTIFIER   shift, and go to state 47
    INTEGER      shift, and go to state 48
    CHAR         shift, and go to state 49
    STRING       shift, and go to state 50
    HEX_INTEGER  shift, and go to state 51
    IF           shift, and go to state 175
    WHILE        shift, and go to state 176
    FOR          shift, and go to state 177
    RETURN       shift, and go to state 178
    BREAK        shift, and go to state 179
    CONTINUE     shift, and go to state 180

    block      go to state 182
    statement  go to state 214
    ARRAY2     go to state 52
    LVAL       go to state 53
    expr       go to state 185


State 214

   18 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement .

    $default  reduce using rule 18 (statement)
