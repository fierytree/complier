Terminals unused in grammar

    BOOL


Grammar

    0 $accept: program $end

    1 program: units

    2 units: declaration SEMICOLON
    3      | function
    4      | units declaration SEMICOLON
    5      | units function

    6 function: T IDENTIFIER for_LEFTBR PARMS for_RIGHTBR block

    7 PARMS: T IDENTIFIER
    8      | PARMS COMMA T IDENTIFIER
    9      | %empty

   10 block_item: statement
   11           | declaration SEMICOLON

   12 block_items: %empty
   13            | block_items block_item

   14 block: LBRACE block_items RBRACE

   15 statement: SEMICOLON
   16          | block
   17          | WHILE LEFTBR expr RIGHTBR statement
   18          | FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement
   19          | IF LEFTBR expr RIGHTBR statement
   20          | IF LEFTBR expr RIGHTBR statement ELSE statement
   21          | RETURN expr SEMICOLON
   22          | RETURN SEMICOLON
   23          | expr SEMICOLON

   24 for_expr: declaration
   25         | expr
   26         | %empty

   27 for_LEFTBR: LEFTBR

   28 for_RIGHTBR: RIGHTBR

   29 declaration: T IDENTIFIER LOP_ASS expr
   30            | T IDENTIFIERS
   31            | T ARRAY
   32            | CONST T_INT IDENTIFIER LOP_ASS CONST_EXP
   33            | CONST T_CHAR IDENTIFIER LOP_ASS CHAR
   34            | CONST T_BOOL IDENTIFIER LOP_ASS INTEGER

   35 CONST_EXP: INTEGER
   36          | CONST_EXP ADD CONST_EXP
   37          | CONST_EXP SUB CONST_EXP
   38          | CONST_EXP MUL CONST_EXP
   39          | CONST_EXP DIV CONST_EXP
   40          | CONST_EXP LSHIFT CONST_EXP
   41          | SUB CONST_EXP
   42          | LEFTBR CONST_EXP RIGHTBR

   43 ARRAY: IDENTIFIER M_LBR CONST_EXP M_RBR
   44      | ARRAY M_LBR CONST_EXP M_RBR

   45 ARRAY2: IDENTIFIER M_LBR expr M_RBR
   46       | ARRAY2 M_LBR expr M_RBR

   47 LVAL: ARRAY2
   48     | IDENTIFIER

   49 IDENTIFIERS: IDENTIFIER
   50            | IDENTIFIERS COMMA IDENTIFIER

   51 PAS: %empty
   52    | PAS COMMA expr
   53    | expr

   54 expr: IDENTIFIER
   55     | INTEGER
   56     | HEX_INTEGER
   57     | CHAR
   58     | STRING
   59     | IDENTIFIER LEFTBR PAS RIGHTBR
   60     | expr ADD expr
   61     | expr SUB expr
   62     | expr MUL expr
   63     | expr DIV expr
   64     | expr SUR expr
   65     | expr LSHIFT expr
   66     | expr RSHIFT expr
   67     | expr BIT_AND expr
   68     | expr BIT_OR expr
   69     | expr BIT_XOR expr
   70     | expr EQ expr
   71     | expr UEQ expr
   72     | expr LT expr
   73     | expr GT expr
   74     | expr LE expr
   75     | expr GE expr
   76     | expr LOG_AND expr
   77     | expr LOG_OR expr
   78     | LVAL LOP_ASS expr
   79     | LVAL ADD_ASS expr
   80     | LVAL SUB_ASS expr
   81     | LVAL MUL_ASS expr
   82     | LVAL DIV_ASS expr
   83     | LVAL SUR_ASS expr
   84     | LVAL LS_ASS expr
   85     | LVAL RS_ASS expr
   86     | LVAL OR_ASS expr
   87     | LVAL AND_ASS expr
   88     | LVAL XOR_ASS expr
   89     | SUB expr
   90     | ADD expr
   91     | LOG_NOT expr
   92     | BIT_NOT expr
   93     | BIT_AND expr
   94     | INCR expr
   95     | DECR expr
   96     | expr INCR
   97     | expr DECR
   98     | LEFTBR expr RIGHTBR

   99 T: T_INT
  100  | T_CHAR
  101  | T_BOOL
  102  | T_STRING
  103  | T_VOID


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    T_CHAR (258) 33 100
    T_INT (259) 32 99
    T_STRING (260) 102
    T_BOOL (261) 34 101
    T_VOID (262) 103
    LOP_ASS (263) 29 32 33 34 78
    ADD_ASS (264) 79
    SUB_ASS (265) 80
    MUL_ASS (266) 81
    DIV_ASS (267) 82
    SUR_ASS (268) 83
    LS_ASS (269) 84
    RS_ASS (270) 85
    AND_ASS (271) 87
    OR_ASS (272) 86
    XOR_ASS (273) 88
    LOG_OR (274) 77
    LOG_AND (275) 76
    BIT_OR (276) 68
    BIT_XOR (277) 69
    BIT_AND (278) 67 93
    EQ (279) 70
    UEQ (280) 71
    GT (281) 73
    LT (282) 72
    GE (283) 75
    LE (284) 74
    LSHIFT (285) 40 65
    RSHIFT (286) 66
    ADD (287) 36 60 90
    SUB (288) 37 41 61 89
    MUL (289) 38 62
    DIV (290) 39 63
    SUR (291) 64
    BIT_NOT (292) 92
    LOG_NOT (293) 91
    INCR (294) 94 96
    DECR (295) 95 97
    LEFTBR (296) 17 19 20 27 42 59 98
    RIGHTBR (297) 17 19 20 28 42 59 98
    LBRACE (298) 14
    RBRACE (299) 14
    M_LBR (300) 43 44 45 46
    M_RBR (301) 43 44 45 46
    SEMICOLON (302) 2 4 11 15 18 21 22 23
    COMMA (303) 8 50 52
    IDENTIFIER (304) 6 7 8 29 32 33 34 43 45 48 49 50 54 59
    INTEGER (305) 34 35 55
    CHAR (306) 33 57
    BOOL (307)
    STRING (308) 58
    HEX_INTEGER (309) 56
    IF (310) 19 20
    WHILE (311) 17
    FOR (312) 18
    RETURN (313) 21 22
    CONST (314) 32 33 34
    ELSE (315) 20
    ADDR (316)
    UMINUS (317)
    UADD (318)
    BACK_INCR (319)
    BACK_DECR (320)


Nonterminals, with rules where they appear

    $accept (66)
        on left: 0
    program (67)
        on left: 1
        on right: 0
    units (68)
        on left: 2 3 4 5
        on right: 1 4 5
    function (69)
        on left: 6
        on right: 3 5
    PARMS (70)
        on left: 7 8 9
        on right: 6 8
    block_item (71)
        on left: 10 11
        on right: 13
    block_items (72)
        on left: 12 13
        on right: 13 14
    block (73)
        on left: 14
        on right: 6 16
    statement (74)
        on left: 15 16 17 18 19 20 21 22 23
        on right: 10 17 18 19 20
    for_expr (75)
        on left: 24 25 26
        on right: 18
    for_LEFTBR (76)
        on left: 27
        on right: 6 18
    for_RIGHTBR (77)
        on left: 28
        on right: 6 18
    declaration (78)
        on left: 29 30 31 32 33 34
        on right: 2 4 11 24
    CONST_EXP (79)
        on left: 35 36 37 38 39 40 41 42
        on right: 32 36 37 38 39 40 41 42 43 44
    ARRAY (80)
        on left: 43 44
        on right: 31 44
    ARRAY2 (81)
        on left: 45 46
        on right: 46 47
    LVAL (82)
        on left: 47 48
        on right: 78 79 80 81 82 83 84 85 86 87 88
    IDENTIFIERS (83)
        on left: 49 50
        on right: 30 50
    PAS (84)
        on left: 51 52 53
        on right: 52 59
    expr (85)
        on left: 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98
        on right: 17 19 20 21 23 25 29 45 46 52 53 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98
    T (86)
        on left: 99 100 101 102 103
        on right: 6 7 8 29 30 31


State 0

    0 $accept: . program $end

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    CONST     shift, and go to state 6

    program      go to state 7
    units        go to state 8
    function     go to state 9
    declaration  go to state 10
    T            go to state 11


State 1

  100 T: T_CHAR .

    $default  reduce using rule 100 (T)


State 2

   99 T: T_INT .

    $default  reduce using rule 99 (T)


State 3

  102 T: T_STRING .

    $default  reduce using rule 102 (T)


State 4

  101 T: T_BOOL .

    $default  reduce using rule 101 (T)


State 5

  103 T: T_VOID .

    $default  reduce using rule 103 (T)


State 6

   32 declaration: CONST . T_INT IDENTIFIER LOP_ASS CONST_EXP
   33            | CONST . T_CHAR IDENTIFIER LOP_ASS CHAR
   34            | CONST . T_BOOL IDENTIFIER LOP_ASS INTEGER

    T_CHAR  shift, and go to state 12
    T_INT   shift, and go to state 13
    T_BOOL  shift, and go to state 14


State 7

    0 $accept: program . $end

    $end  shift, and go to state 15


State 8

    1 program: units .
    4 units: units . declaration SEMICOLON
    5      | units . function

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5
    CONST     shift, and go to state 6

    $default  reduce using rule 1 (program)

    function     go to state 16
    declaration  go to state 17
    T            go to state 11


State 9

    3 units: function .

    $default  reduce using rule 3 (units)


State 10

    2 units: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 18


State 11

    6 function: T . IDENTIFIER for_LEFTBR PARMS for_RIGHTBR block
   29 declaration: T . IDENTIFIER LOP_ASS expr
   30            | T . IDENTIFIERS
   31            | T . ARRAY

    IDENTIFIER  shift, and go to state 19

    ARRAY        go to state 20
    IDENTIFIERS  go to state 21


State 12

   33 declaration: CONST T_CHAR . IDENTIFIER LOP_ASS CHAR

    IDENTIFIER  shift, and go to state 22


State 13

   32 declaration: CONST T_INT . IDENTIFIER LOP_ASS CONST_EXP

    IDENTIFIER  shift, and go to state 23


State 14

   34 declaration: CONST T_BOOL . IDENTIFIER LOP_ASS INTEGER

    IDENTIFIER  shift, and go to state 24


State 15

    0 $accept: program $end .

    $default  accept


State 16

    5 units: units function .

    $default  reduce using rule 5 (units)


State 17

    4 units: units declaration . SEMICOLON

    SEMICOLON  shift, and go to state 25


State 18

    2 units: declaration SEMICOLON .

    $default  reduce using rule 2 (units)


State 19

    6 function: T IDENTIFIER . for_LEFTBR PARMS for_RIGHTBR block
   29 declaration: T IDENTIFIER . LOP_ASS expr
   43 ARRAY: IDENTIFIER . M_LBR CONST_EXP M_RBR
   49 IDENTIFIERS: IDENTIFIER .

    LOP_ASS  shift, and go to state 26
    LEFTBR   shift, and go to state 27
    M_LBR    shift, and go to state 28

    $default  reduce using rule 49 (IDENTIFIERS)

    for_LEFTBR  go to state 29


State 20

   31 declaration: T ARRAY .
   44 ARRAY: ARRAY . M_LBR CONST_EXP M_RBR

    M_LBR  shift, and go to state 30

    $default  reduce using rule 31 (declaration)


State 21

   30 declaration: T IDENTIFIERS .
   50 IDENTIFIERS: IDENTIFIERS . COMMA IDENTIFIER

    COMMA  shift, and go to state 31

    $default  reduce using rule 30 (declaration)


State 22

   33 declaration: CONST T_CHAR IDENTIFIER . LOP_ASS CHAR

    LOP_ASS  shift, and go to state 32


State 23

   32 declaration: CONST T_INT IDENTIFIER . LOP_ASS CONST_EXP

    LOP_ASS  shift, and go to state 33


State 24

   34 declaration: CONST T_BOOL IDENTIFIER . LOP_ASS INTEGER

    LOP_ASS  shift, and go to state 34


State 25

    4 units: units declaration SEMICOLON .

    $default  reduce using rule 4 (units)


State 26

   29 declaration: T IDENTIFIER LOP_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 50


State 27

   27 for_LEFTBR: LEFTBR .

    $default  reduce using rule 27 (for_LEFTBR)


State 28

   43 ARRAY: IDENTIFIER M_LBR . CONST_EXP M_RBR

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 54


State 29

    6 function: T IDENTIFIER for_LEFTBR . PARMS for_RIGHTBR block

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5

    $default  reduce using rule 9 (PARMS)

    PARMS  go to state 55
    T      go to state 56


State 30

   44 ARRAY: ARRAY M_LBR . CONST_EXP M_RBR

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 57


State 31

   50 IDENTIFIERS: IDENTIFIERS COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 58


State 32

   33 declaration: CONST T_CHAR IDENTIFIER LOP_ASS . CHAR

    CHAR  shift, and go to state 59


State 33

   32 declaration: CONST T_INT IDENTIFIER LOP_ASS . CONST_EXP

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 60


State 34

   34 declaration: CONST T_BOOL IDENTIFIER LOP_ASS . INTEGER

    INTEGER  shift, and go to state 61


State 35

   93 expr: BIT_AND . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 62


State 36

   90 expr: ADD . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 63


State 37

   89 expr: SUB . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 64


State 38

   92 expr: BIT_NOT . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 65


State 39

   91 expr: LOG_NOT . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 66


State 40

   94 expr: INCR . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 67


State 41

   95 expr: DECR . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 68


State 42

   98 expr: LEFTBR . expr RIGHTBR

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 69


State 43

   45 ARRAY2: IDENTIFIER . M_LBR expr M_RBR
   48 LVAL: IDENTIFIER .
   54 expr: IDENTIFIER .
   59     | IDENTIFIER . LEFTBR PAS RIGHTBR

    LEFTBR  shift, and go to state 70
    M_LBR   shift, and go to state 71

    LOP_ASS   reduce using rule 48 (LVAL)
    ADD_ASS   reduce using rule 48 (LVAL)
    SUB_ASS   reduce using rule 48 (LVAL)
    MUL_ASS   reduce using rule 48 (LVAL)
    DIV_ASS   reduce using rule 48 (LVAL)
    SUR_ASS   reduce using rule 48 (LVAL)
    LS_ASS    reduce using rule 48 (LVAL)
    RS_ASS    reduce using rule 48 (LVAL)
    AND_ASS   reduce using rule 48 (LVAL)
    OR_ASS    reduce using rule 48 (LVAL)
    XOR_ASS   reduce using rule 48 (LVAL)
    $default  reduce using rule 54 (expr)


State 44

   55 expr: INTEGER .

    $default  reduce using rule 55 (expr)


State 45

   57 expr: CHAR .

    $default  reduce using rule 57 (expr)


State 46

   58 expr: STRING .

    $default  reduce using rule 58 (expr)


State 47

   56 expr: HEX_INTEGER .

    $default  reduce using rule 56 (expr)


State 48

   46 ARRAY2: ARRAY2 . M_LBR expr M_RBR
   47 LVAL: ARRAY2 .

    M_LBR  shift, and go to state 72

    $default  reduce using rule 47 (LVAL)


State 49

   78 expr: LVAL . LOP_ASS expr
   79     | LVAL . ADD_ASS expr
   80     | LVAL . SUB_ASS expr
   81     | LVAL . MUL_ASS expr
   82     | LVAL . DIV_ASS expr
   83     | LVAL . SUR_ASS expr
   84     | LVAL . LS_ASS expr
   85     | LVAL . RS_ASS expr
   86     | LVAL . OR_ASS expr
   87     | LVAL . AND_ASS expr
   88     | LVAL . XOR_ASS expr

    LOP_ASS  shift, and go to state 73
    ADD_ASS  shift, and go to state 74
    SUB_ASS  shift, and go to state 75
    MUL_ASS  shift, and go to state 76
    DIV_ASS  shift, and go to state 77
    SUR_ASS  shift, and go to state 78
    LS_ASS   shift, and go to state 79
    RS_ASS   shift, and go to state 80
    AND_ASS  shift, and go to state 81
    OR_ASS   shift, and go to state 82
    XOR_ASS  shift, and go to state 83


State 50

   29 declaration: T IDENTIFIER LOP_ASS expr .
   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 29 (declaration)


State 51

   41 CONST_EXP: SUB . CONST_EXP

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 104


State 52

   42 CONST_EXP: LEFTBR . CONST_EXP RIGHTBR

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 105


State 53

   35 CONST_EXP: INTEGER .

    $default  reduce using rule 35 (CONST_EXP)


State 54

   36 CONST_EXP: CONST_EXP . ADD CONST_EXP
   37          | CONST_EXP . SUB CONST_EXP
   38          | CONST_EXP . MUL CONST_EXP
   39          | CONST_EXP . DIV CONST_EXP
   40          | CONST_EXP . LSHIFT CONST_EXP
   43 ARRAY: IDENTIFIER M_LBR CONST_EXP . M_RBR

    LSHIFT  shift, and go to state 106
    ADD     shift, and go to state 107
    SUB     shift, and go to state 108
    MUL     shift, and go to state 109
    DIV     shift, and go to state 110
    M_RBR   shift, and go to state 111


State 55

    6 function: T IDENTIFIER for_LEFTBR PARMS . for_RIGHTBR block
    8 PARMS: PARMS . COMMA T IDENTIFIER

    RIGHTBR  shift, and go to state 112
    COMMA    shift, and go to state 113

    for_RIGHTBR  go to state 114


State 56

    7 PARMS: T . IDENTIFIER

    IDENTIFIER  shift, and go to state 115


State 57

   36 CONST_EXP: CONST_EXP . ADD CONST_EXP
   37          | CONST_EXP . SUB CONST_EXP
   38          | CONST_EXP . MUL CONST_EXP
   39          | CONST_EXP . DIV CONST_EXP
   40          | CONST_EXP . LSHIFT CONST_EXP
   44 ARRAY: ARRAY M_LBR CONST_EXP . M_RBR

    LSHIFT  shift, and go to state 106
    ADD     shift, and go to state 107
    SUB     shift, and go to state 108
    MUL     shift, and go to state 109
    DIV     shift, and go to state 110
    M_RBR   shift, and go to state 116


State 58

   50 IDENTIFIERS: IDENTIFIERS COMMA IDENTIFIER .

    $default  reduce using rule 50 (IDENTIFIERS)


State 59

   33 declaration: CONST T_CHAR IDENTIFIER LOP_ASS CHAR .

    $default  reduce using rule 33 (declaration)


State 60

   32 declaration: CONST T_INT IDENTIFIER LOP_ASS CONST_EXP .
   36 CONST_EXP: CONST_EXP . ADD CONST_EXP
   37          | CONST_EXP . SUB CONST_EXP
   38          | CONST_EXP . MUL CONST_EXP
   39          | CONST_EXP . DIV CONST_EXP
   40          | CONST_EXP . LSHIFT CONST_EXP

    LSHIFT  shift, and go to state 106
    ADD     shift, and go to state 107
    SUB     shift, and go to state 108
    MUL     shift, and go to state 109
    DIV     shift, and go to state 110

    $default  reduce using rule 32 (declaration)


State 61

   34 declaration: CONST T_BOOL IDENTIFIER LOP_ASS INTEGER .

    $default  reduce using rule 34 (declaration)


State 62

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   93     | BIT_AND expr .
   96     | expr . INCR
   97     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 93 (expr)


State 63

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   90     | ADD expr .
   96     | expr . INCR
   97     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 90 (expr)


State 64

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   89     | SUB expr .
   96     | expr . INCR
   97     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 89 (expr)


State 65

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   92     | BIT_NOT expr .
   96     | expr . INCR
   97     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 92 (expr)


State 66

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   91     | LOG_NOT expr .
   96     | expr . INCR
   97     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 91 (expr)


State 67

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   94     | INCR expr .
   96     | expr . INCR
   97     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 94 (expr)


State 68

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   95     | DECR expr .
   96     | expr . INCR
   97     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 95 (expr)


State 69

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR
   98     | LEFTBR expr . RIGHTBR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103
    RIGHTBR  shift, and go to state 117


State 70

   59 expr: IDENTIFIER LEFTBR . PAS RIGHTBR

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    $default  reduce using rule 51 (PAS)

    ARRAY2  go to state 48
    LVAL    go to state 49
    PAS     go to state 118
    expr    go to state 119


State 71

   45 ARRAY2: IDENTIFIER M_LBR . expr M_RBR

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 120


State 72

   46 ARRAY2: ARRAY2 M_LBR . expr M_RBR

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 121


State 73

   78 expr: LVAL LOP_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 122


State 74

   79 expr: LVAL ADD_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 123


State 75

   80 expr: LVAL SUB_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 124


State 76

   81 expr: LVAL MUL_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 125


State 77

   82 expr: LVAL DIV_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 126


State 78

   83 expr: LVAL SUR_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 127


State 79

   84 expr: LVAL LS_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 128


State 80

   85 expr: LVAL RS_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 129


State 81

   87 expr: LVAL AND_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 130


State 82

   86 expr: LVAL OR_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 131


State 83

   88 expr: LVAL XOR_ASS . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 132


State 84

   77 expr: expr LOG_OR . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 133


State 85

   76 expr: expr LOG_AND . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 134


State 86

   68 expr: expr BIT_OR . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 135


State 87

   69 expr: expr BIT_XOR . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 136


State 88

   67 expr: expr BIT_AND . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 137


State 89

   70 expr: expr EQ . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 138


State 90

   71 expr: expr UEQ . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 139


State 91

   73 expr: expr GT . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 140


State 92

   72 expr: expr LT . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 141


State 93

   75 expr: expr GE . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 142


State 94

   74 expr: expr LE . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 143


State 95

   65 expr: expr LSHIFT . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 144


State 96

   66 expr: expr RSHIFT . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 145


State 97

   60 expr: expr ADD . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 146


State 98

   61 expr: expr SUB . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 147


State 99

   62 expr: expr MUL . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 148


State 100

   63 expr: expr DIV . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 149


State 101

   64 expr: expr SUR . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 150


State 102

   96 expr: expr INCR .

    $default  reduce using rule 96 (expr)


State 103

   97 expr: expr DECR .

    $default  reduce using rule 97 (expr)


State 104

   36 CONST_EXP: CONST_EXP . ADD CONST_EXP
   37          | CONST_EXP . SUB CONST_EXP
   38          | CONST_EXP . MUL CONST_EXP
   39          | CONST_EXP . DIV CONST_EXP
   40          | CONST_EXP . LSHIFT CONST_EXP
   41          | SUB CONST_EXP .

    $default  reduce using rule 41 (CONST_EXP)


State 105

   36 CONST_EXP: CONST_EXP . ADD CONST_EXP
   37          | CONST_EXP . SUB CONST_EXP
   38          | CONST_EXP . MUL CONST_EXP
   39          | CONST_EXP . DIV CONST_EXP
   40          | CONST_EXP . LSHIFT CONST_EXP
   42          | LEFTBR CONST_EXP . RIGHTBR

    LSHIFT   shift, and go to state 106
    ADD      shift, and go to state 107
    SUB      shift, and go to state 108
    MUL      shift, and go to state 109
    DIV      shift, and go to state 110
    RIGHTBR  shift, and go to state 151


State 106

   40 CONST_EXP: CONST_EXP LSHIFT . CONST_EXP

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 152


State 107

   36 CONST_EXP: CONST_EXP ADD . CONST_EXP

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 153


State 108

   37 CONST_EXP: CONST_EXP SUB . CONST_EXP

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 154


State 109

   38 CONST_EXP: CONST_EXP MUL . CONST_EXP

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 155


State 110

   39 CONST_EXP: CONST_EXP DIV . CONST_EXP

    SUB      shift, and go to state 51
    LEFTBR   shift, and go to state 52
    INTEGER  shift, and go to state 53

    CONST_EXP  go to state 156


State 111

   43 ARRAY: IDENTIFIER M_LBR CONST_EXP M_RBR .

    $default  reduce using rule 43 (ARRAY)


State 112

   28 for_RIGHTBR: RIGHTBR .

    $default  reduce using rule 28 (for_RIGHTBR)


State 113

    8 PARMS: PARMS COMMA . T IDENTIFIER

    T_CHAR    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_STRING  shift, and go to state 3
    T_BOOL    shift, and go to state 4
    T_VOID    shift, and go to state 5

    T  go to state 157


State 114

    6 function: T IDENTIFIER for_LEFTBR PARMS for_RIGHTBR . block

    LBRACE  shift, and go to state 158

    block  go to state 159


State 115

    7 PARMS: T IDENTIFIER .

    $default  reduce using rule 7 (PARMS)


State 116

   44 ARRAY: ARRAY M_LBR CONST_EXP M_RBR .

    $default  reduce using rule 44 (ARRAY)


State 117

   98 expr: LEFTBR expr RIGHTBR .

    $default  reduce using rule 98 (expr)


State 118

   52 PAS: PAS . COMMA expr
   59 expr: IDENTIFIER LEFTBR PAS . RIGHTBR

    RIGHTBR  shift, and go to state 160
    COMMA    shift, and go to state 161


State 119

   53 PAS: expr .
   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 53 (PAS)


State 120

   45 ARRAY2: IDENTIFIER M_LBR expr . M_RBR
   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103
    M_RBR    shift, and go to state 162


State 121

   46 ARRAY2: ARRAY2 M_LBR expr . M_RBR
   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103
    M_RBR    shift, and go to state 163


State 122

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   78     | LVAL LOP_ASS expr .
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 78 (expr)


State 123

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   79     | LVAL ADD_ASS expr .
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 79 (expr)


State 124

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   80     | LVAL SUB_ASS expr .
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 80 (expr)


State 125

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   81     | LVAL MUL_ASS expr .
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 81 (expr)


State 126

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   82     | LVAL DIV_ASS expr .
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 82 (expr)


State 127

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   83     | LVAL SUR_ASS expr .
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 83 (expr)


State 128

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   84     | LVAL LS_ASS expr .
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 84 (expr)


State 129

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   85     | LVAL RS_ASS expr .
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 85 (expr)


State 130

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   87     | LVAL AND_ASS expr .
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 87 (expr)


State 131

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   86     | LVAL OR_ASS expr .
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 86 (expr)


State 132

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   88     | LVAL XOR_ASS expr .
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 88 (expr)


State 133

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   77     | expr LOG_OR expr .
   96     | expr . INCR
   97     | expr . DECR

    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 77 (expr)


State 134

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   76     | expr LOG_AND expr .
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 76 (expr)


State 135

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   68     | expr BIT_OR expr .
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 68 (expr)


State 136

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   69     | expr BIT_XOR expr .
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 69 (expr)


State 137

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   67     | expr BIT_AND expr .
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    EQ      shift, and go to state 89
    UEQ     shift, and go to state 90
    GT      shift, and go to state 91
    LT      shift, and go to state 92
    GE      shift, and go to state 93
    LE      shift, and go to state 94
    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 67 (expr)


State 138

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   70     | expr EQ expr .
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    GT      shift, and go to state 91
    LT      shift, and go to state 92
    GE      shift, and go to state 93
    LE      shift, and go to state 94
    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 70 (expr)


State 139

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   71     | expr UEQ expr .
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    GT      shift, and go to state 91
    LT      shift, and go to state 92
    GE      shift, and go to state 93
    LE      shift, and go to state 94
    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 71 (expr)


State 140

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   73     | expr GT expr .
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 73 (expr)


State 141

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   72     | expr LT expr .
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 72 (expr)


State 142

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   75     | expr GE expr .
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 75 (expr)


State 143

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   74     | expr LE expr .
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    LSHIFT  shift, and go to state 95
    RSHIFT  shift, and go to state 96
    ADD     shift, and go to state 97
    SUB     shift, and go to state 98
    MUL     shift, and go to state 99
    DIV     shift, and go to state 100
    SUR     shift, and go to state 101
    INCR    shift, and go to state 102
    DECR    shift, and go to state 103

    $default  reduce using rule 74 (expr)


State 144

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   65     | expr LSHIFT expr .
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    ADD   shift, and go to state 97
    SUB   shift, and go to state 98
    MUL   shift, and go to state 99
    DIV   shift, and go to state 100
    SUR   shift, and go to state 101
    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 65 (expr)


State 145

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   66     | expr RSHIFT expr .
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    ADD   shift, and go to state 97
    SUB   shift, and go to state 98
    MUL   shift, and go to state 99
    DIV   shift, and go to state 100
    SUR   shift, and go to state 101
    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 66 (expr)


State 146

   60 expr: expr . ADD expr
   60     | expr ADD expr .
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    MUL   shift, and go to state 99
    DIV   shift, and go to state 100
    SUR   shift, and go to state 101
    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 60 (expr)


State 147

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   61     | expr SUB expr .
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    MUL   shift, and go to state 99
    DIV   shift, and go to state 100
    SUR   shift, and go to state 101
    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 61 (expr)


State 148

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   62     | expr MUL expr .
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 62 (expr)


State 149

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   63     | expr DIV expr .
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 63 (expr)


State 150

   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   64     | expr SUR expr .
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    INCR  shift, and go to state 102
    DECR  shift, and go to state 103

    $default  reduce using rule 64 (expr)


State 151

   42 CONST_EXP: LEFTBR CONST_EXP RIGHTBR .

    $default  reduce using rule 42 (CONST_EXP)


State 152

   36 CONST_EXP: CONST_EXP . ADD CONST_EXP
   37          | CONST_EXP . SUB CONST_EXP
   38          | CONST_EXP . MUL CONST_EXP
   39          | CONST_EXP . DIV CONST_EXP
   40          | CONST_EXP . LSHIFT CONST_EXP
   40          | CONST_EXP LSHIFT CONST_EXP .

    ADD  shift, and go to state 107
    SUB  shift, and go to state 108
    MUL  shift, and go to state 109
    DIV  shift, and go to state 110

    $default  reduce using rule 40 (CONST_EXP)


State 153

   36 CONST_EXP: CONST_EXP . ADD CONST_EXP
   36          | CONST_EXP ADD CONST_EXP .
   37          | CONST_EXP . SUB CONST_EXP
   38          | CONST_EXP . MUL CONST_EXP
   39          | CONST_EXP . DIV CONST_EXP
   40          | CONST_EXP . LSHIFT CONST_EXP

    MUL  shift, and go to state 109
    DIV  shift, and go to state 110

    $default  reduce using rule 36 (CONST_EXP)


State 154

   36 CONST_EXP: CONST_EXP . ADD CONST_EXP
   37          | CONST_EXP . SUB CONST_EXP
   37          | CONST_EXP SUB CONST_EXP .
   38          | CONST_EXP . MUL CONST_EXP
   39          | CONST_EXP . DIV CONST_EXP
   40          | CONST_EXP . LSHIFT CONST_EXP

    MUL  shift, and go to state 109
    DIV  shift, and go to state 110

    $default  reduce using rule 37 (CONST_EXP)


State 155

   36 CONST_EXP: CONST_EXP . ADD CONST_EXP
   37          | CONST_EXP . SUB CONST_EXP
   38          | CONST_EXP . MUL CONST_EXP
   38          | CONST_EXP MUL CONST_EXP .
   39          | CONST_EXP . DIV CONST_EXP
   40          | CONST_EXP . LSHIFT CONST_EXP

    $default  reduce using rule 38 (CONST_EXP)


State 156

   36 CONST_EXP: CONST_EXP . ADD CONST_EXP
   37          | CONST_EXP . SUB CONST_EXP
   38          | CONST_EXP . MUL CONST_EXP
   39          | CONST_EXP . DIV CONST_EXP
   39          | CONST_EXP DIV CONST_EXP .
   40          | CONST_EXP . LSHIFT CONST_EXP

    $default  reduce using rule 39 (CONST_EXP)


State 157

    8 PARMS: PARMS COMMA T . IDENTIFIER

    IDENTIFIER  shift, and go to state 164


State 158

   14 block: LBRACE . block_items RBRACE

    $default  reduce using rule 12 (block_items)

    block_items  go to state 165


State 159

    6 function: T IDENTIFIER for_LEFTBR PARMS for_RIGHTBR block .

    $default  reduce using rule 6 (function)


State 160

   59 expr: IDENTIFIER LEFTBR PAS RIGHTBR .

    $default  reduce using rule 59 (expr)


State 161

   52 PAS: PAS COMMA . expr

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 166


State 162

   45 ARRAY2: IDENTIFIER M_LBR expr M_RBR .

    $default  reduce using rule 45 (ARRAY2)


State 163

   46 ARRAY2: ARRAY2 M_LBR expr M_RBR .

    $default  reduce using rule 46 (ARRAY2)


State 164

    8 PARMS: PARMS COMMA T IDENTIFIER .

    $default  reduce using rule 8 (PARMS)


State 165

   13 block_items: block_items . block_item
   14 block: LBRACE block_items . RBRACE

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LBRACE       shift, and go to state 158
    RBRACE       shift, and go to state 167
    SEMICOLON    shift, and go to state 168
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47
    IF           shift, and go to state 169
    WHILE        shift, and go to state 170
    FOR          shift, and go to state 171
    RETURN       shift, and go to state 172
    CONST        shift, and go to state 6

    block_item   go to state 173
    block        go to state 174
    statement    go to state 175
    declaration  go to state 176
    ARRAY2       go to state 48
    LVAL         go to state 49
    expr         go to state 177
    T            go to state 178


State 166

   52 PAS: PAS COMMA expr .
   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 52 (PAS)


State 167

   14 block: LBRACE block_items RBRACE .

    $default  reduce using rule 14 (block)


State 168

   15 statement: SEMICOLON .

    $default  reduce using rule 15 (statement)


State 169

   19 statement: IF . LEFTBR expr RIGHTBR statement
   20          | IF . LEFTBR expr RIGHTBR statement ELSE statement

    LEFTBR  shift, and go to state 179


State 170

   17 statement: WHILE . LEFTBR expr RIGHTBR statement

    LEFTBR  shift, and go to state 180


State 171

   18 statement: FOR . for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement

    LEFTBR  shift, and go to state 27

    for_LEFTBR  go to state 181


State 172

   21 statement: RETURN . expr SEMICOLON
   22          | RETURN . SEMICOLON

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    SEMICOLON    shift, and go to state 182
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 183


State 173

   13 block_items: block_items block_item .

    $default  reduce using rule 13 (block_items)


State 174

   16 statement: block .

    $default  reduce using rule 16 (statement)


State 175

   10 block_item: statement .

    $default  reduce using rule 10 (block_item)


State 176

   11 block_item: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 184


State 177

   23 statement: expr . SEMICOLON
   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR     shift, and go to state 84
    LOG_AND    shift, and go to state 85
    BIT_OR     shift, and go to state 86
    BIT_XOR    shift, and go to state 87
    BIT_AND    shift, and go to state 88
    EQ         shift, and go to state 89
    UEQ        shift, and go to state 90
    GT         shift, and go to state 91
    LT         shift, and go to state 92
    GE         shift, and go to state 93
    LE         shift, and go to state 94
    LSHIFT     shift, and go to state 95
    RSHIFT     shift, and go to state 96
    ADD        shift, and go to state 97
    SUB        shift, and go to state 98
    MUL        shift, and go to state 99
    DIV        shift, and go to state 100
    SUR        shift, and go to state 101
    INCR       shift, and go to state 102
    DECR       shift, and go to state 103
    SEMICOLON  shift, and go to state 185


State 178

   29 declaration: T . IDENTIFIER LOP_ASS expr
   30            | T . IDENTIFIERS
   31            | T . ARRAY

    IDENTIFIER  shift, and go to state 186

    ARRAY        go to state 20
    IDENTIFIERS  go to state 21


State 179

   19 statement: IF LEFTBR . expr RIGHTBR statement
   20          | IF LEFTBR . expr RIGHTBR statement ELSE statement

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 187


State 180

   17 statement: WHILE LEFTBR . expr RIGHTBR statement

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47

    ARRAY2  go to state 48
    LVAL    go to state 49
    expr    go to state 188


State 181

   18 statement: FOR for_LEFTBR . for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47
    CONST        shift, and go to state 6

    $default  reduce using rule 26 (for_expr)

    for_expr     go to state 189
    declaration  go to state 190
    ARRAY2       go to state 48
    LVAL         go to state 49
    expr         go to state 191
    T            go to state 178


State 182

   22 statement: RETURN SEMICOLON .

    $default  reduce using rule 22 (statement)


State 183

   21 statement: RETURN expr . SEMICOLON
   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR     shift, and go to state 84
    LOG_AND    shift, and go to state 85
    BIT_OR     shift, and go to state 86
    BIT_XOR    shift, and go to state 87
    BIT_AND    shift, and go to state 88
    EQ         shift, and go to state 89
    UEQ        shift, and go to state 90
    GT         shift, and go to state 91
    LT         shift, and go to state 92
    GE         shift, and go to state 93
    LE         shift, and go to state 94
    LSHIFT     shift, and go to state 95
    RSHIFT     shift, and go to state 96
    ADD        shift, and go to state 97
    SUB        shift, and go to state 98
    MUL        shift, and go to state 99
    DIV        shift, and go to state 100
    SUR        shift, and go to state 101
    INCR       shift, and go to state 102
    DECR       shift, and go to state 103
    SEMICOLON  shift, and go to state 192


State 184

   11 block_item: declaration SEMICOLON .

    $default  reduce using rule 11 (block_item)


State 185

   23 statement: expr SEMICOLON .

    $default  reduce using rule 23 (statement)


State 186

   29 declaration: T IDENTIFIER . LOP_ASS expr
   43 ARRAY: IDENTIFIER . M_LBR CONST_EXP M_RBR
   49 IDENTIFIERS: IDENTIFIER .

    LOP_ASS  shift, and go to state 26
    M_LBR    shift, and go to state 28

    $default  reduce using rule 49 (IDENTIFIERS)


State 187

   19 statement: IF LEFTBR expr . RIGHTBR statement
   20          | IF LEFTBR expr . RIGHTBR statement ELSE statement
   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103
    RIGHTBR  shift, and go to state 193


State 188

   17 statement: WHILE LEFTBR expr . RIGHTBR statement
   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103
    RIGHTBR  shift, and go to state 194


State 189

   18 statement: FOR for_LEFTBR for_expr . SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement

    SEMICOLON  shift, and go to state 195


State 190

   24 for_expr: declaration .

    $default  reduce using rule 24 (for_expr)


State 191

   25 for_expr: expr .
   60 expr: expr . ADD expr
   61     | expr . SUB expr
   62     | expr . MUL expr
   63     | expr . DIV expr
   64     | expr . SUR expr
   65     | expr . LSHIFT expr
   66     | expr . RSHIFT expr
   67     | expr . BIT_AND expr
   68     | expr . BIT_OR expr
   69     | expr . BIT_XOR expr
   70     | expr . EQ expr
   71     | expr . UEQ expr
   72     | expr . LT expr
   73     | expr . GT expr
   74     | expr . LE expr
   75     | expr . GE expr
   76     | expr . LOG_AND expr
   77     | expr . LOG_OR expr
   96     | expr . INCR
   97     | expr . DECR

    LOG_OR   shift, and go to state 84
    LOG_AND  shift, and go to state 85
    BIT_OR   shift, and go to state 86
    BIT_XOR  shift, and go to state 87
    BIT_AND  shift, and go to state 88
    EQ       shift, and go to state 89
    UEQ      shift, and go to state 90
    GT       shift, and go to state 91
    LT       shift, and go to state 92
    GE       shift, and go to state 93
    LE       shift, and go to state 94
    LSHIFT   shift, and go to state 95
    RSHIFT   shift, and go to state 96
    ADD      shift, and go to state 97
    SUB      shift, and go to state 98
    MUL      shift, and go to state 99
    DIV      shift, and go to state 100
    SUR      shift, and go to state 101
    INCR     shift, and go to state 102
    DECR     shift, and go to state 103

    $default  reduce using rule 25 (for_expr)


State 192

   21 statement: RETURN expr SEMICOLON .

    $default  reduce using rule 21 (statement)


State 193

   19 statement: IF LEFTBR expr RIGHTBR . statement
   20          | IF LEFTBR expr RIGHTBR . statement ELSE statement

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LBRACE       shift, and go to state 158
    SEMICOLON    shift, and go to state 168
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47
    IF           shift, and go to state 169
    WHILE        shift, and go to state 170
    FOR          shift, and go to state 171
    RETURN       shift, and go to state 172

    block      go to state 174
    statement  go to state 196
    ARRAY2     go to state 48
    LVAL       go to state 49
    expr       go to state 177


State 194

   17 statement: WHILE LEFTBR expr RIGHTBR . statement

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LBRACE       shift, and go to state 158
    SEMICOLON    shift, and go to state 168
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47
    IF           shift, and go to state 169
    WHILE        shift, and go to state 170
    FOR          shift, and go to state 171
    RETURN       shift, and go to state 172

    block      go to state 174
    statement  go to state 197
    ARRAY2     go to state 48
    LVAL       go to state 49
    expr       go to state 177


State 195

   18 statement: FOR for_LEFTBR for_expr SEMICOLON . for_expr SEMICOLON for_expr for_RIGHTBR statement

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47
    CONST        shift, and go to state 6

    $default  reduce using rule 26 (for_expr)

    for_expr     go to state 198
    declaration  go to state 190
    ARRAY2       go to state 48
    LVAL         go to state 49
    expr         go to state 191
    T            go to state 178


State 196

   19 statement: IF LEFTBR expr RIGHTBR statement .
   20          | IF LEFTBR expr RIGHTBR statement . ELSE statement

    ELSE  shift, and go to state 199

    $default  reduce using rule 19 (statement)


State 197

   17 statement: WHILE LEFTBR expr RIGHTBR statement .

    $default  reduce using rule 17 (statement)


State 198

   18 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr . SEMICOLON for_expr for_RIGHTBR statement

    SEMICOLON  shift, and go to state 200


State 199

   20 statement: IF LEFTBR expr RIGHTBR statement ELSE . statement

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LBRACE       shift, and go to state 158
    SEMICOLON    shift, and go to state 168
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47
    IF           shift, and go to state 169
    WHILE        shift, and go to state 170
    FOR          shift, and go to state 171
    RETURN       shift, and go to state 172

    block      go to state 174
    statement  go to state 201
    ARRAY2     go to state 48
    LVAL       go to state 49
    expr       go to state 177


State 200

   18 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON . for_expr for_RIGHTBR statement

    T_CHAR       shift, and go to state 1
    T_INT        shift, and go to state 2
    T_STRING     shift, and go to state 3
    T_BOOL       shift, and go to state 4
    T_VOID       shift, and go to state 5
    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47
    CONST        shift, and go to state 6

    $default  reduce using rule 26 (for_expr)

    for_expr     go to state 202
    declaration  go to state 190
    ARRAY2       go to state 48
    LVAL         go to state 49
    expr         go to state 191
    T            go to state 178


State 201

   20 statement: IF LEFTBR expr RIGHTBR statement ELSE statement .

    $default  reduce using rule 20 (statement)


State 202

   18 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr . for_RIGHTBR statement

    RIGHTBR  shift, and go to state 112

    for_RIGHTBR  go to state 203


State 203

   18 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR . statement

    BIT_AND      shift, and go to state 35
    ADD          shift, and go to state 36
    SUB          shift, and go to state 37
    BIT_NOT      shift, and go to state 38
    LOG_NOT      shift, and go to state 39
    INCR         shift, and go to state 40
    DECR         shift, and go to state 41
    LEFTBR       shift, and go to state 42
    LBRACE       shift, and go to state 158
    SEMICOLON    shift, and go to state 168
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 44
    CHAR         shift, and go to state 45
    STRING       shift, and go to state 46
    HEX_INTEGER  shift, and go to state 47
    IF           shift, and go to state 169
    WHILE        shift, and go to state 170
    FOR          shift, and go to state 171
    RETURN       shift, and go to state 172

    block      go to state 174
    statement  go to state 204
    ARRAY2     go to state 48
    LVAL       go to state 49
    expr       go to state 177


State 204

   18 statement: FOR for_LEFTBR for_expr SEMICOLON for_expr SEMICOLON for_expr for_RIGHTBR statement .

    $default  reduce using rule 18 (statement)
